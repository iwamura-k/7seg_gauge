[
    {
        "id": "6e2a86939db2feb2",
        "type": "tab",
        "label": "アナログメーター・７セグＯＣＲ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16474d16.e8b2f3",
        "type": "tab",
        "label": "フロー 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c23fd6fe.8e28c8",
        "type": "tab",
        "label": "ログ",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ca4ee912.7831c8",
        "type": "tab",
        "label": "設定",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e590b9a9444db32c",
        "type": "tab",
        "label": "管理者コマンド",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f404d7ae.5de898",
        "type": "tab",
        "label": "メール送信設定",
        "disabled": false,
        "info": ""
    },
    {
        "id": "78343655.9fb1a8",
        "type": "tab",
        "label": "その他設定",
        "disabled": false,
        "info": ""
    },
    {
        "id": "92130b74.2074b8",
        "type": "tab",
        "label": "ユニット操作",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8f11d900e2c81d8d",
        "type": "tab",
        "label": "カメラ",
        "disabled": false,
        "info": ""
    },
    {
        "id": "916a9af3eb5cec35",
        "type": "tab",
        "label": "SSOCR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "85fd863d751e4741",
        "type": "tab",
        "label": "画像認識アナログメーター認識",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e4e780b06009f68e",
        "type": "tab",
        "label": "フロー 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8716dce.c0c578",
        "type": "tab",
        "label": "フロー 3",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1eb77752a0f352b9",
        "type": "tab",
        "label": "実験用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3092101353e92f2b",
        "type": "tab",
        "label": "",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e7681ea02d300375",
        "type": "tab",
        "label": "フロー 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "47d8bd94.9dc294",
        "type": "subflow",
        "name": "kill",
        "info": "指定したmsg.payloadの名称を含むプロセスをkillする。",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "c7f4364e.6927c8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "7c70a5f1.d5cafc",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 280,
                "wires": [
                    {
                        "id": "2d21b1fd.b6a53e",
                        "port": 1
                    },
                    {
                        "id": "baba97af.3a0008",
                        "port": 1
                    }
                ]
            },
            {
                "x": 820,
                "y": 340,
                "wires": [
                    {
                        "id": "2d21b1fd.b6a53e",
                        "port": 2
                    },
                    {
                        "id": "baba97af.3a0008",
                        "port": 2
                    }
                ]
            }
        ]
    },
    {
        "id": "7a21b679996998b7",
        "type": "subflow",
        "name": "kill (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 180,
                "wires": [
                    {
                        "id": "d3b174b22ddb7f86"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 140,
                "wires": [
                    {
                        "id": "6e9e07c78741db7d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 260,
                "wires": [
                    {
                        "id": "2077e534cee02314",
                        "port": 1
                    },
                    {
                        "id": "2531a94c3a3bc1c9",
                        "port": 1
                    }
                ]
            },
            {
                "x": 720,
                "y": 320,
                "wires": [
                    {
                        "id": "2077e534cee02314",
                        "port": 2
                    },
                    {
                        "id": "2531a94c3a3bc1c9",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "867a438d9455ee92",
        "type": "subflow",
        "name": "kill (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 180,
                "wires": [
                    {
                        "id": "f8a5558249cc95d7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 140,
                "wires": [
                    {
                        "id": "9287274aa4d0cdf9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 260,
                "wires": [
                    {
                        "id": "27f0bc9bb972d854",
                        "port": 1
                    },
                    {
                        "id": "1c72613656134a02",
                        "port": 1
                    }
                ]
            },
            {
                "x": 720,
                "y": 320,
                "wires": [
                    {
                        "id": "27f0bc9bb972d854",
                        "port": 2
                    },
                    {
                        "id": "1c72613656134a02",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "86fbcd55.ef339",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ec0bebb6.c69648",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#303e78",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED ダッシュボード",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY/MM/DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 10,
                "gy": 10,
                "cx": 0,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6a4a711b.bf16f",
        "type": "ui_tab",
        "name": "ログ",
        "icon": "whatshot",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bff11dbe.0087d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": "",
        "height": ""
    },
    {
        "id": "d234bc0f.4d3ff",
        "type": "ui_tab",
        "name": "データ設定",
        "icon": "settings",
        "order": 13,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ddedfe0.98b22",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": "2"
    },
    {
        "id": "6f4da241.e07f4c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": "6"
    },
    {
        "id": "b6542289.d7f8d",
        "type": "ui_tab",
        "name": "ダッシュボード",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1a42578e.073358",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "7d23539b.e51604",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "6b916b87.33de44",
        "type": "ui_group",
        "name": "ログ",
        "tab": "884f14fe.92e168",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4d5df431.f8cb1c",
        "type": "ui_group",
        "name": "水槽モニタリングシステムについて",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "be3776d5.7e81b8",
        "type": "ui_group",
        "name": "照度ログ",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "59d9d5af.e1eedc",
        "type": "ui_group",
        "name": "音声",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "4",
        "collapse": false
    },
    {
        "id": "22cf876a.fdb778",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "59d9d5af.e1eedc",
        "order": 4,
        "width": 1,
        "height": "4"
    },
    {
        "id": "923329d2.b859f8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": "2"
    },
    {
        "id": "85032e6c.7aade",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 1,
        "height": "6"
    },
    {
        "id": "e15337ec.e52498",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "7d23539b.e51604",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "8c93cbd1.fb2cb8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "ac7943b2.89b52",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d26bb624.ef7e48",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "ac7943b2.89b52",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "bcdafb3.cbe1d08",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "367db452.59eefc",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "31c2dccf29fca103",
        "type": "ui_group",
        "name": "湿度ログ",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "baf7c63670c7442c",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "103d7a87f61bab18",
        "type": "ui_group",
        "name": "溶存酸素濃度ログ",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false
    },
    {
        "id": "0567b654d81ddf52",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "374d7cae.b9fb44",
        "type": "ui_group",
        "name": "スペクトログラム",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "16",
        "collapse": false
    },
    {
        "id": "e8a3c50e.22ba38",
        "type": "ui_group",
        "name": "見える化",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "dc9cc717.4e0c08",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "877a220e.92001",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "d7dd9718.9ee208",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "f506d14b.4d91a",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "38379e36.a15ac2",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "5ca72523.cf726c",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "5fe63a77.8d8034",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "79a9def6.57d64",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "d5e411e7.81e8a",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "31967d3c.8631f2",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "2e6285bc.423e8a",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "7e2e575e.f72178",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 1,
        "height": "3"
    },
    {
        "id": "54633fcd.3d84a",
        "type": "ui_group",
        "name": "スペクトログラム",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "16",
        "collapse": false
    },
    {
        "id": "ad3fc1c3.c77eb",
        "type": "ui_group",
        "name": "見える化",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "76c19de7.3c3b24",
        "type": "ui_group",
        "name": "気圧ログ",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "90f78813.e094c8",
        "type": "ui_group",
        "name": "振動ログ",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3a38c40f.b7ce4c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "log",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "88cafc9e.2a994",
        "type": "ui_group",
        "name": "電圧ログ",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97334318.8857c",
        "type": "ui_group",
        "name": "振動ログ",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db6143b7.2067a",
        "type": "ui_tab",
        "name": "その他設定",
        "icon": "dashboard",
        "order": 18,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2924e521.12fd2a",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "63fc741b.4c4a6c",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "59803964.6a9cb8",
        "type": "ui_group",
        "name": "データ名設定",
        "tab": "d234bc0f.4d3ff",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "83c95264.cd3fd",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "b6542289.d7f8d",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c621e4f.f449a",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "cb1db53.c45ff48",
        "type": "ui_spacer",
        "z": "16474d16.e8b2f3",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "62f316fc.43e408",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "27",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8360c55a.442a28",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "7fd1047d.8e654c",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f58132a.d6e58c",
        "type": "ui_tab",
        "name": "メール送信設定",
        "icon": "dashboard",
        "order": 15,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d9ffe36e.2f2d7",
        "type": "ui_group",
        "name": "mail",
        "tab": "4f58132a.d6e58c",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c7f3929f.7968e",
        "type": "ui_spacer",
        "z": "78343655.9fb1a8",
        "name": "spacer",
        "group": "83c95264.cd3fd",
        "order": 3,
        "width": 24,
        "height": 1
    },
    {
        "id": "583c4bd0.5a40c4",
        "type": "ui_spacer",
        "z": "78343655.9fb1a8",
        "name": "spacer",
        "group": "83c95264.cd3fd",
        "order": 5,
        "width": 24,
        "height": 1
    },
    {
        "id": "c258d84f.e591b8",
        "type": "ui_tab",
        "name": "ユニット操作",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "208d3918.4b0066",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "c258d84f.e591b8",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7fd1047d.8e654c",
        "type": "ui_tab",
        "name": "カメラデータ表示",
        "icon": "dashboard",
        "order": 19,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "31787600.224eaa",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "db6143b7.2067a",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "5869a8c2ff663493",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "d234bc0f.4d3ff",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "561dd571b28fc8d1",
        "type": "ui_group",
        "name": "Group 4",
        "tab": "d234bc0f.4d3ff",
        "order": 4,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "884f14fe.92e168",
        "type": "ui_tab",
        "name": "接続",
        "icon": "dashboard",
        "order": 20,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e22ece36.23ec6",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "884f14fe.92e168",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "89f6d3c7.a4813",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "884f14fe.92e168",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8bb53a60.3e73e8",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "6a4a711b.bf16f",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db0ce79969273322",
        "type": "ui_tab",
        "name": "カメラ設定",
        "icon": "dashboard",
        "order": 21,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eb5b7c1b6e50479c",
        "type": "ui_group",
        "name": "カメラ設定",
        "tab": "db0ce79969273322",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "37b450ec6540097e",
        "type": "ui_spacer",
        "z": "78343655.9fb1a8",
        "name": "spacer",
        "group": "31787600.224eaa",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "64bb2da3b78a5d52",
        "type": "ui_spacer",
        "z": "78343655.9fb1a8",
        "name": "spacer",
        "group": "31787600.224eaa",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "53d9fec4.65124",
        "type": "ui_tab",
        "name": "動画データ表示",
        "icon": "dashboard",
        "order": 22,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f4b715c4.813018",
        "type": "ui_group",
        "name": "動画データ表示",
        "tab": "53d9fec4.65124",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1a09cf20.290ef1",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "f5823b09.3a9fd8",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "c6506253.f1731",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "4a531cf3.b865c4",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 5,
        "width": 3,
        "height": 1
    },
    {
        "id": "8b7b0a0f.64ea68",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "4095eb04.3aa4a4",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 7,
        "width": 3,
        "height": 1
    },
    {
        "id": "a9b5ecc5.0d1a6",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "9b9924e5.d71608",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "6d1ce6a.f36d218",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "32931f60.84e3c",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "3acb4a1d.d836b6",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "2677da5d.389e96",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "7c942ac0.d4d574",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 14,
        "width": 3,
        "height": 1
    },
    {
        "id": "a262dbf1.5fa928",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 15,
        "width": 3,
        "height": 1
    },
    {
        "id": "6abcaf69.29a56",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "4a820905.6db1c8",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 17,
        "width": 3,
        "height": 1
    },
    {
        "id": "cb2e47d6.56b518",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 18,
        "width": 3,
        "height": 1
    },
    {
        "id": "2f06307.b5e9fd",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 19,
        "width": 3,
        "height": 1
    },
    {
        "id": "451d5f1a.4120e",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 20,
        "width": 3,
        "height": 1
    },
    {
        "id": "5ff0f830.dbde98",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 21,
        "width": 3,
        "height": 1
    },
    {
        "id": "d81e5f86.0fcd3",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 22,
        "width": 3,
        "height": 1
    },
    {
        "id": "d20a20ab.f77f9",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 23,
        "width": 3,
        "height": 1
    },
    {
        "id": "93d5cb33.ef8c78",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 24,
        "width": 3,
        "height": 1
    },
    {
        "id": "ce359320.067b",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 25,
        "width": 3,
        "height": 1
    },
    {
        "id": "56767ebf.42f",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 26,
        "width": 3,
        "height": 1
    },
    {
        "id": "d4913c16.3434e",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 27,
        "width": 3,
        "height": 1
    },
    {
        "id": "5b168fb4.88022",
        "type": "ui_spacer",
        "z": "8f11d900e2c81d8d",
        "name": "spacer",
        "group": "f4b715c4.813018",
        "order": 28,
        "width": 3,
        "height": 1
    },
    {
        "id": "25b39e1c.a27172",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "furnace",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "9b0b090985dca8da",
        "type": "ui_tab",
        "name": "7セグ表示認識設定",
        "icon": "dashboard",
        "order": 23,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c7831878985d276",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "9b0b090985dca8da",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bad736678fbc2d71",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 2,
        "width": 22,
        "height": 1
    },
    {
        "id": "a1f5bb8174a86422",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 3,
        "width": 22,
        "height": 1
    },
    {
        "id": "bbde034fc0e3f7ab",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 4,
        "width": 22,
        "height": 1
    },
    {
        "id": "1c075fd79e643049",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 5,
        "width": 22,
        "height": 1
    },
    {
        "id": "8921ed3a9a9c20cb",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 6,
        "width": 22,
        "height": 1
    },
    {
        "id": "a5c5627dae9184f3",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 7,
        "width": 22,
        "height": 1
    },
    {
        "id": "fdd21815d3468c33",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 8,
        "width": 22,
        "height": 1
    },
    {
        "id": "28c0ba0a802eb7c6",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 9,
        "width": 22,
        "height": 1
    },
    {
        "id": "46958581aac44fcc",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 10,
        "width": 22,
        "height": 1
    },
    {
        "id": "f27a7f85a42ece37",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 11,
        "width": 22,
        "height": 1
    },
    {
        "id": "58f45025e10f5557",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 12,
        "width": 22,
        "height": 1
    },
    {
        "id": "ed59194a81d8a2d0",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 13,
        "width": 22,
        "height": 1
    },
    {
        "id": "7886381152574be7",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 14,
        "width": 22,
        "height": 1
    },
    {
        "id": "d2c82746118ca64c",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 15,
        "width": 22,
        "height": 1
    },
    {
        "id": "e78e950d5ceb98e5",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 16,
        "width": 22,
        "height": 1
    },
    {
        "id": "30cb99116d943156",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 17,
        "width": 22,
        "height": 1
    },
    {
        "id": "41e8d53a96a2d0b0",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 18,
        "width": 22,
        "height": 1
    },
    {
        "id": "39b78de0edc03f4c",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 19,
        "width": 22,
        "height": 1
    },
    {
        "id": "06017d05de2dd23a",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 20,
        "width": 22,
        "height": 1
    },
    {
        "id": "d4f32ac1c7adaf3a",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 21,
        "width": 22,
        "height": 1
    },
    {
        "id": "beb391df5bdddcd0",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 22,
        "width": 22,
        "height": 1
    },
    {
        "id": "ba132c6f5882f2ca",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 23,
        "width": 22,
        "height": 1
    },
    {
        "id": "7cef7ba69a1b8d6b",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 24,
        "width": 22,
        "height": 1
    },
    {
        "id": "55c997cf99cd9734",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 25,
        "width": 22,
        "height": 1
    },
    {
        "id": "7cfd78db0e3ff326",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 26,
        "width": 22,
        "height": 1
    },
    {
        "id": "c523ab37e95c2a99",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 27,
        "width": 22,
        "height": 1
    },
    {
        "id": "c56f063748f85252",
        "type": "ui_spacer",
        "z": "916a9af3eb5cec35",
        "name": "spacer",
        "group": "1c7831878985d276",
        "order": 28,
        "width": 22,
        "height": 1
    },
    {
        "id": "4aa2a5745d26787e",
        "type": "ui_group",
        "name": "デフォルト",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "28dc92388852b8e3",
        "type": "ui_tab",
        "name": "OCR設定",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "72f57cb9fbf4f251",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "28dc92388852b8e3",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d77f5ceffab61fb7",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "7d9bc2a38980090a",
        "order": 1,
        "disp": false,
        "width": "38",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a8f857e0c7656f18",
        "type": "ui_tab",
        "name": "画像認識",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f21c6831facf0718",
        "type": "ui_group",
        "name": "画像認識",
        "tab": "a8f857e0c7656f18",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42950d5fe92f6bd6",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "db6143b7.2067a",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "f324228d8323a1a5",
        "type": "ui_tab",
        "name": "画像認識値表示",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a6606b610a1391d9",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "f324228d8323a1a5",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1fd4af693768c4f7",
        "type": "ui_tab",
        "name": "その他コマンド",
        "icon": "dashboard",
        "order": 17,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "75f8dd9e8aa16c65",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "1fd4af693768c4f7",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d904aa423025b228",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 2,
        "width": 24,
        "height": 1
    },
    {
        "id": "ccf78d7f3b2606ac",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 3,
        "width": 24,
        "height": 1
    },
    {
        "id": "4b6b8a7ae73fe626",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 4,
        "width": 24,
        "height": 1
    },
    {
        "id": "50d46a085bdf6493",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 5,
        "width": 24,
        "height": 1
    },
    {
        "id": "6d6fc6a52919afca",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 6,
        "width": 24,
        "height": 1
    },
    {
        "id": "8d519ab5e8b6db16",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 7,
        "width": 24,
        "height": 1
    },
    {
        "id": "ee13e4704bf56e46",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 8,
        "width": 24,
        "height": 1
    },
    {
        "id": "45e96fc5ecce5188",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 9,
        "width": 24,
        "height": 1
    },
    {
        "id": "a69105ea340b8f5c",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 10,
        "width": 24,
        "height": 1
    },
    {
        "id": "c6b290e928e005ec",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 11,
        "width": 24,
        "height": 1
    },
    {
        "id": "81af227cd825e797",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 12,
        "width": 24,
        "height": 1
    },
    {
        "id": "21a6c3bc6f3d738d",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 13,
        "width": 24,
        "height": 1
    },
    {
        "id": "6f82b1ce1d92a1b4",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 14,
        "width": 24,
        "height": 1
    },
    {
        "id": "dcb26f38c44e77fe",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 15,
        "width": 24,
        "height": 1
    },
    {
        "id": "a11d9d8e99f84a2d",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 16,
        "width": 24,
        "height": 1
    },
    {
        "id": "7f9da1cd04fe587c",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 17,
        "width": 24,
        "height": 1
    },
    {
        "id": "9cf7e2b3d77fc4e3",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 18,
        "width": 24,
        "height": 1
    },
    {
        "id": "5107d078fdb7fea3",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 19,
        "width": 24,
        "height": 1
    },
    {
        "id": "177c154821295202",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 20,
        "width": 24,
        "height": 1
    },
    {
        "id": "4f96d31e1429e5b4",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 21,
        "width": 24,
        "height": 1
    },
    {
        "id": "020577c7d93cc97b",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 22,
        "width": 24,
        "height": 1
    },
    {
        "id": "f52d2ecb307e89ec",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 23,
        "width": 24,
        "height": 1
    },
    {
        "id": "1fadf7a66f7e3870",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 24,
        "width": 24,
        "height": 1
    },
    {
        "id": "50a71170d4aba839",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 25,
        "width": 24,
        "height": 1
    },
    {
        "id": "cb3e2504bf5742f4",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 26,
        "width": 24,
        "height": 1
    },
    {
        "id": "846affb60a2a925a",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 27,
        "width": 24,
        "height": 1
    },
    {
        "id": "2871d5d7c67a4c27",
        "type": "ui_spacer",
        "z": "e4e780b06009f68e",
        "name": "spacer",
        "group": "75f8dd9e8aa16c65",
        "order": 28,
        "width": 24,
        "height": 1
    },
    {
        "id": "7b8f068718a50ecf",
        "type": "ui_tab",
        "name": "カメラ登録",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "44b746a172526f54",
        "type": "ui_group",
        "name": "カメラ登録",
        "tab": "7b8f068718a50ecf",
        "order": 1,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c7afe959e5c99e6",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": 38,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d9bc2a38980090a",
        "type": "ui_tab",
        "name": "ダッシュボード",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "332f9c200e7f4257",
        "type": "ui_group",
        "name": "ダッシュボード",
        "tab": "7d9bc2a38980090a",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a75f8e2abf83f8ae",
        "type": "ui_tab",
        "name": "ログ",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1f5c443f02ccdb9b",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "a75f8e2abf83f8ae",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6727152e3e1fd431",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b18df8a56786d3f9",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": false,
        "width": "27",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7625105e536bec46",
        "type": "ui_tab",
        "name": "センサ登録",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "149b6b710dac4ab1",
        "type": "ui_group",
        "name": "センサ登録",
        "tab": "7625105e536bec46",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c7904f5d33a58e54",
        "type": "ui_group",
        "name": "角度スケーリング設定",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "319a97fbbdd2e24b",
        "type": "ui_group",
        "name": "電流センサ設定",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "18b08346fa9a8343",
        "type": "ui_group",
        "name": "電力センサ設定",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aab6d060c2b05533",
        "type": "ui_tab",
        "name": "システム設定",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7fcf05f70a697e61",
        "type": "ui_group",
        "name": "システム設定",
        "tab": "aab6d060c2b05533",
        "order": 1,
        "disp": false,
        "width": "34",
        "collapse": false,
        "className": ""
    },
    {
        "id": "86e5caf1d5296825",
        "type": "ui_group",
        "name": "イベントログ",
        "tab": "db6143b7.2067a",
        "order": 1,
        "disp": false,
        "width": "36",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fdbbddacc865e2ce",
        "type": "ui_tab",
        "name": "閾値設定",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "db75fd86854df70a",
        "type": "ui_group",
        "name": "閾値設定",
        "tab": "fdbbddacc865e2ce",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9c2642dc00ebda38",
        "type": "ui_group",
        "name": "メール送信設定",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "31",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cb3e9dea9be0ab07",
        "type": "ui_tab",
        "name": "取説",
        "icon": "dashboard",
        "order": 16,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "12866929233d4104",
        "type": "ui_group",
        "name": "取説",
        "tab": "cb3e9dea9be0ab07",
        "order": 1,
        "disp": false,
        "width": "40",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d21e49bd3e7e6ce9",
        "type": "ui_tab",
        "name": "角度センサスケーリング設定",
        "icon": "dashboard",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8210375b8a28cb48",
        "type": "ui_group",
        "name": "角度センサスケーリング設定",
        "tab": "d21e49bd3e7e6ce9",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "177ceee2fc6b952c",
        "type": "sqlitedb",
        "db": "",
        "mode": "RWC"
    },
    {
        "id": "4218833fc4e33f28",
        "type": "sqlitedb",
        "db": "",
        "mode": "RWC"
    },
    {
        "id": "6b1a3c935a0a6251",
        "type": "sqlitedb",
        "db": "/tmp/sensor",
        "mode": "RWC"
    },
    {
        "id": "623010e9b0d3f99b",
        "type": "sqlitedb",
        "db": "/tmp/setting",
        "mode": "RWC"
    },
    {
        "id": "42de03919d1334d9",
        "type": "sqlitedb",
        "db": "/tmp/th",
        "mode": "RWC"
    },
    {
        "id": "4790579ce68bcbbd",
        "type": "sqlitedb",
        "db": "/tmp/event",
        "mode": "RWC"
    },
    {
        "id": "44ce1afd6ab48152",
        "type": "sqlitedb",
        "db": "/tmp/sensor_value",
        "mode": "RWC"
    },
    {
        "id": "427ff3efc65cfd53",
        "type": "sqlitedb",
        "db": "/tmp/latest_value",
        "mode": "RWC"
    },
    {
        "id": "baba97af.3a0008",
        "type": "exec",
        "z": "47d8bd94.9dc294",
        "command": "ps ahx",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "cab379f9.69c9f8"
            ],
            [],
            []
        ]
    },
    {
        "id": "cab379f9.69c9f8",
        "type": "split",
        "z": "47d8bd94.9dc294",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "cdcd79f2.5153e8"
            ]
        ]
    },
    {
        "id": "19e342d4.bb461d",
        "type": "function",
        "z": "47d8bd94.9dc294",
        "name": "",
        "func": "msg.payload = msg.payload.split(' ').filter(c => c !== \"\")[0];\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 200,
        "wires": [
            [
                "2d21b1fd.b6a53e"
            ]
        ]
    },
    {
        "id": "2d21b1fd.b6a53e",
        "type": "exec",
        "z": "47d8bd94.9dc294",
        "command": "kill",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "7c70a5f1.d5cafc"
            ],
            [],
            []
        ]
    },
    {
        "id": "cdcd79f2.5153e8",
        "type": "switch",
        "z": "47d8bd94.9dc294",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "filter",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "19e342d4.bb461d"
            ]
        ]
    },
    {
        "id": "c7f4364e.6927c8",
        "type": "change",
        "z": "47d8bd94.9dc294",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "baba97af.3a0008"
            ]
        ]
    },
    {
        "id": "7c70a5f1.d5cafc",
        "type": "delay",
        "z": "47d8bd94.9dc294",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2077e534cee02314",
        "type": "exec",
        "z": "7a21b679996998b7",
        "command": "ps ahx",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "30b15528a4e09320"
            ],
            [],
            []
        ]
    },
    {
        "id": "97f5defe1319af38",
        "type": "switch",
        "z": "7a21b679996998b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "filter",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "efa2dfd243533830"
            ]
        ]
    },
    {
        "id": "30b15528a4e09320",
        "type": "split",
        "z": "7a21b679996998b7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "97f5defe1319af38"
            ]
        ]
    },
    {
        "id": "efa2dfd243533830",
        "type": "function",
        "z": "7a21b679996998b7",
        "name": "",
        "func": "msg.payload = msg.payload.split(' ').filter(c => c !== \"\")[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "2531a94c3a3bc1c9"
            ]
        ]
    },
    {
        "id": "2531a94c3a3bc1c9",
        "type": "exec",
        "z": "7a21b679996998b7",
        "command": "sudo kill",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "6e9e07c78741db7d"
            ],
            [],
            []
        ]
    },
    {
        "id": "d3b174b22ddb7f86",
        "type": "change",
        "z": "7a21b679996998b7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 200,
        "wires": [
            [
                "2077e534cee02314"
            ]
        ]
    },
    {
        "id": "6e9e07c78741db7d",
        "type": "delay",
        "z": "7a21b679996998b7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "27f0bc9bb972d854",
        "type": "exec",
        "z": "867a438d9455ee92",
        "command": "ps ahx",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "57e163b23e5cee80"
            ],
            [],
            []
        ]
    },
    {
        "id": "f39c59f1d29e98b9",
        "type": "switch",
        "z": "867a438d9455ee92",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "filter",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "09138e5f88a3e56a"
            ]
        ]
    },
    {
        "id": "57e163b23e5cee80",
        "type": "split",
        "z": "867a438d9455ee92",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 180,
        "wires": [
            [
                "f39c59f1d29e98b9"
            ]
        ]
    },
    {
        "id": "09138e5f88a3e56a",
        "type": "function",
        "z": "867a438d9455ee92",
        "name": "",
        "func": "msg.payload = msg.payload.split(' ').filter(c => c !== \"\")[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "1c72613656134a02"
            ]
        ]
    },
    {
        "id": "1c72613656134a02",
        "type": "exec",
        "z": "867a438d9455ee92",
        "command": "sudo kill",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "9287274aa4d0cdf9"
            ],
            [],
            []
        ]
    },
    {
        "id": "f8a5558249cc95d7",
        "type": "change",
        "z": "867a438d9455ee92",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 200,
        "wires": [
            [
                "27f0bc9bb972d854"
            ]
        ]
    },
    {
        "id": "9287274aa4d0cdf9",
        "type": "delay",
        "z": "867a438d9455ee92",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "97782be991f51586",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "44b746a172526f54",
        "name": "カメラ設定",
        "order": 1,
        "width": "26",
        "height": "102",
        "format": "<p>\n    <label for=\"usb_port\">USBポート</label>\n    <select id=\"usb_port\"></select>\n</p>\n\n<button type=\"button\" id=\"add\" size=\"10\" class=\"button\" >カメラ追加</button>\n<table border=\"1\" width=\"1000\" id=\"table\" >\n    \n    <thead>\n        <tr>\n            <th>USBポート</th>\n            <th>カメラ名</th>\n            <th>無効化</th>\n            <th>削除</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<div class=\"flexb\">\n<button type=\"button\" id=\"register\" 　size=\"10\" class=\"button\">登録</button>\n<button type=\"button\" id=\"cancel\" size=\"10\" class=\"button\"  >元に戻す</button>\n\n</div>\n\n<script>\n(function (scope) {\n    server = `http://192.168.3.245:8000`;\n   // server = `http://${location.hostname}:8000`;\n    initialize();\n    //ページ読み込み時の処理の登録\n    //document.addEventListener(\"DOMContentLoaded\", initialize);\n\n   \n    function initialize() {\n        console.log(\"initializing\");\n        const table = document.querySelector(\"#table\");\n        table_initialize(table);\n        get_camera_parameters();\n        get_camera_settings(table);\n       \n    }\n    //ページを開いた時にカメラの設定とパラメータヲロード\n    document.querySelector(\"#cancel\").onclick = reset_setting;\n    function reset_setting(){\n        if(window.confirm(\"実行しますか？\")){\n            initialize()\n        }\n        \n    }\n\n    //カメラの設定パラメーターをサーバーから取得する関数\n    function get_camera_parameters() {\n        \n        $.get(`${server}/load_camera_setting_page_parameter/`,\n            function (data) {\n                console.log(data);\n    \n                //USBポートの名前とIDの組の配列\n                \n                remove_all_options(\"usb_port\");\n                //USBポートの選択セレクトタブにオプションを追加\n                add_option_to_usb_port_selector(\"usb_port\", data);\n            \n            });\n  \n    }\n\n    //カメラの設定パラメーターをサーバーから取得する関数\n    function get_camera_settings(table) {\n        $.get(`${server}/load_camera_setting/`,\n            function (data) {\n                console.log(data)\n            for (let i = 0; i < data.length; i++) {\n                let usb_port = data[i].usb_port;\n                let name = data[i].name;\n                let is_valid = data[i].is_valid;\n                \n                let doms = create_doms(table, [usb_port, name, is_valid,0]);\n                add_doms_to_table(table, doms);\n                \n            }\n        });\n    }\n\n\n    //USBポートのセレクトタブにUSBポート名、USBポートNo.を追加する関数\n    function add_option_to_usb_port_selector(id, usb_port_options) {\n        const usb_port_selector = document.querySelector(`#${id}`);\n        for (let i = 0; i < usb_port_options.length; i++) {\n            let option_name = usb_port_options[i].name;\n            let option_value = usb_port_options[i].value;\n            let option_dom = add_selector_option(option_name, option_value);\n            usb_port_selector.appendChild(option_dom);\n        }\n    }\n    //USBポートのオプション要素を全削除する関数\n    function remove_all_options(id) {\n        // select要素を取得\n        let select = document.getElementById(id);\n        // select要素が存在する場合\n        if (select) {\n            // すべてのoption要素を削除\n            while (select.options.length > 0) {\n                select.remove(0);\n            }\n        } else {\n            console.error(\"指定したIDのselect要素が見つかりません。\");\n        }\n    }\n\n    //セレクトタブにオプションを追加する関数\n    function add_selector_option(text, value) {\n        const option = document.createElement(\"option\");\n        // optionタグのテキストを設定する\n        option.text = text;\n        // optionタグのvalueを設定する\n        option.value = value;\n        // selectタグの子要素にoptionタグを追加する\n        return option;\n    }\n\n    //設定データから設定テーブルを生成する関数\n    function create_table(table, data) {\n        for (let i = 0; i < data.length; i++) {\n            let usb_port = data[i].usb_port;\n            let name = data[i].name;\n            let is_valid = data[i].is_valid;\n            let is_delete = null;\n\n            let doms = create_doms(table, [usb_port, name, is_valid, is_delete]);\n            add_doms_to_table(table, doms);\n\n        }\n    }\n\n    document.querySelector(\"#add\").onclick = add_col;\n    function add_col() {\n        const table = document.querySelector(\"#table\");\n        const usb_port_dom = document.querySelector(\"#usb_port\");\n        const idx = usb_port_dom.selectedIndex;\n        const usb_port = usb_port_dom.options[idx].value;\n\n       \n        const camera_name = \"\";\n        const is_valid = false;\n        const is_delete = false;\n        const doms = create_doms(table, [usb_port, camera_name, is_valid, is_delete]);\n        add_doms_to_table(table, doms);\n        usb_port_dom.removeChild( usb_port_dom.options[idx]);\n    \n    \n    }\n\n\n    //設定表の列のDOMを生成する関数\n    function create_doms(table, defalut_values) {\n        const col = String(table.rows.length - 1);\n        const usb_port_div = div_create(`usb_port_${col}`, defalut_values[0]);//DIVタグ生成\n        const name_input = input_create(\"text\", `name_${col}`, defalut_values[1], \"text_input\",null); //カメラ名入力欄生成\n        const is_valid_checkbox = input_create(\"checkbox\", `is_valid_${col}`, null,null,defalut_values[2]);//チェックボックス生成\n        const is_delete_checkbox = input_create(\"checkbox\", `is_delete_${col}`,null,null,defalut_values[3]);//チェックボックス生成\n        const doms = [usb_port_div, name_input, is_valid_checkbox, is_delete_checkbox];\n        return doms;\n    }\n\n    //設定表の初期化関数\n    function table_initialize(table) {\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n   \n\n    //DOMをテーブルに追加する関数\n    function add_doms_to_table(table, doms) {\n        //行の末尾に生成したDOMを追加\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n\n    //入力欄の定義関数\n    function input_create(type, id, value, class_name,checked) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n         if (type==\"text\"){\n             input.value = value; \n         }\n        input.className = class_name;\n        if (type==\"checkbox\"){\n            input.checked=checked\n        }\n        return input;\n    }\n\n    //divの定義関数\n    function div_create(id, text) {\n        let div_node = document.createElement(\"div\");\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n\n    //設定表の内容を辞書にロードする関数\n    function store_table_setting(table) {\n        const keys = [\"usb_port\",\"name\", \"is_valid\", \"is_delete\"];\n        const array_data = get_table_child_elements(table);\n        console.log(array_data);\n        const dict_data = convert_array_to_dict(keys, array_data);\n        return dict_data;\n    }\n\n    //登録ボタンクリックでサーバーに表のセンサ情報を登録\n    document.querySelector(\"#register\").onclick = register_setting;\n    function register_setting() {\n        if(window.confirm(\"実行しますか。\\n削除にチェックが入っているカメラのOCR設定、閾値設定はすべて削除されます\")){\n        const table = document.querySelector(\"#table\");\n        const send_data = JSON.stringify(store_table_setting(table));\n        const keys = [\"name\", \"usb_port\", \"is_valid\", \"is_delete\"];\n        console.log(send_data);\n        $.ajax({\n            url: `${server}/register_camera_setting/`,\n            type: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            dataType: 'json',\n            data: send_data,\n        }).done(function (data) {\n            console.log(data);\n            if (data.is_success == false) {\n                window.alert(\"設定が不正です\");\n                for (let i = 0; i < data.check_data.length; i++) {\n                    let col = data.check_data[i];\n                    for (let j = 0; j < keys.length; j++) {\n                        let check_string = col[keys[j]];\n                        let dom = document.querySelector(`#${keys[j]}_${i}`);\n                        console.log(dom);\n                        console.log(check_string);\n                        if (check_string == \"ok\") {\n                            dom.style.backgroundColor = \"#FFFFFF\";\n                        } else {\n                            dom.style.backgroundColor = \"#FFCCFF\";\n                        }\n                    }\n                }\n            }else{\n                table_initialize(table);\n                get_camera_parameters();\n                get_camera_settings(table);\n                \n            }\n           \n                \n            \n        })\n       \n        }\n    }\n\n    //表のデータを配列にロードする関数\n    function get_table_child_elements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; i++) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; j++) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    row_data.push(get_dom_value(dom));\n                }\n            }\n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //２次元配列を辞書に変換する関数\n    function convert_array_to_dict(keys, data) {\n        const newData = data.map((item) => {\n            let obj = {};\n            keys.forEach((key, i) => (obj[key] = item[i]));\n            return obj;\n        });\n        return newData;\n\n    }\n\n    //DOMの値を取得する関数\n    function get_dom_value(dom) {\n        console.log(dom.tagName);\n        if (dom.tagName == \"DIV\") {\n            if (dom.innerText == \"\") {\n                return null;\n            }\n            else {\n                return dom.innerText;\n            }\n        }\n\n        if (dom.tagName == \"INPUT\" && dom.getAttribute('type') === 'checkbox') {\n            if (dom.checked) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        if (dom.tagName == \"SELECT\" || dom.tagName == \"INPUT\") {\n            if (dom.value == \"\") {\n                return null;\n            } else {\n                return dom.value;\n            }\n        }\n    }\n\n\n\n})(scope);\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d2add90e485bb60d",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "72f57cb9fbf4f251",
        "name": "７セグ表示認識設定",
        "order": 1,
        "width": "40",
        "height": "62",
        "format": "<h1>設定選択</h1>\n<div class=wrapper1>\n\n<label>設定名\n<select id='setting_id' >\n    \n</select>\n</label>   \n\n</div>\n\n<label>カメラ選択\n<select id='camera_port' >\n    \n</select>\n</label>\n<div  class=wrapper1>\n<button type='button' class='button' id='take_an_image'>設定用画像撮影</button>\n<button type='button' class='button' id='delete_an_image'>設定用画像削除</button>\n</div>\n\n\n\n<label>画像選択\n<select id='image_name' ></select>\n</label>\n\n<h1>描画設定</h1>\n<div  class=wrapper1>\n    <label>線色: \n  <select id='pivot_color_select' class='color_select'>\n    <option value='#FF0000'>赤</option>\n    <option value='#00FF00'>緑</option>\n    <option value='#0000FF'>青</option>\n    <option value='#FFA500'>橙</option>\n    <option value='#FFFF00'>黄</option>\n    <option value='#800080'>紫</option>\n    <option value='#FFC0CB'>桃</option>\n  </select>\n  </label>\n  \n  <label>ピボットサイズ\n<input type='number' id='pivot_size' class='number' value='5'>\n    </label>\n\n</div>\n<h1>設定画像</h1>\n<div id='background_div'>\n    <canvas id='image_canvas'></canvas>\n    <canvas id='ui_canvas'></canvas>\n</div>  \n\n<h1>表示領域設定</h1>\n<div class=wrapper1>\n    \n    <table border='1' id=\"roi\">\n    <thead>\n        <tr>\n            <th>X1</th>\n            <th>Y1</th>\n            <th>X2</th>\n            <th>Y2</th>\n            <th>X3</th>\n            <th>Y3</th>\n            <th>X4</th>\n            <th>Y4</th>\n        </tr>\n        <tr>\n            <td><input type='number' class='number' id='roi_x1'></td> \n            <td><input type='number' class='number' id='roi_y1'></td>\n            <td><input type='number' class='number' id='roi_x2'></td>\n            <td><input type='number' class='number' id='roi_y2'></td>\n            <td><input type='number' class='number' id='roi_x3'></td> \n            <td><input type='number' class='number' id='roi_y3'></td>\n            <td><input type='number' class='number' id='roi_x4'></td>\n            <td><input type='number' class='number' id='roi_y4'></td>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n\n<div  class=wrapper1>\n    <button type='button' class='button' id='roi_register'>領域確定</button>\n    <button type='button' class='button' id='roi_reset'>元に戻す</button>\n</div>\n\n\n<h1>セグメント領域設定</h1>\n<div  class=wrapper1>\n    <button type='button' class='button' id='segment_region_add'>領域設定追加</button>\n    <button type='button' class='button' id='segment_region_delete'>領域設定削除</button>\n    <label>間隔\n<input type='number' id='segment_region_space' value='10'>\n</label>\n</div>\n<br>\n\n<table border='1' id='segment_region_table' width='250'>\n    \n    <thead>\n        <tr>\n            <th>左上_X</th>\n            <th>左上_Y</th>\n            <th>右下_X</th>\n            <th>右下_Y</th>\n            \n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n<label>セグメントの輪郭設定を有効にする\n<input type='checkbox' id='is_segment_outline_setting_enabled'>\n</label>\n<table border='1' id='segment_point_table' width='500'>\n    \n    <thead>\n        <tr>\n            <th>左上_X</th>\n            <th>左上_Y</th>\n            <th>右上_X</th>\n            <th>右上_Y</th>\n            <th>右下_X</th>\n            <th>右下_Y</th>\n            <th>左下_X</th>\n            <th>左下_Y</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n<br>\n\n<h1>少数点設定</h1>\n<div  class=wrapper1>\n    <button type='button' class='button' id='decimal_point_add'>小数点設定追加</button>\n    <button type='button' class='button' id='decimal_point_delete'>小数点設定削除</button>\n</div>\n<table border='1' id='decimal_point_table' width='125'>\n    \n    <thead>\n        <tr>\n            <th>X</th>\n            <th>Y</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n\n\n\n\n\n<h1>セグメント認識色設定</h1>\n<div class=wrapper1>\n    <button type='button' class='button' id='on_color'>表示色指定</button>\n    \n    <table border='1'>\n    <thead>\n        <tr>\n            <th>青</th>\n            <th>緑</th>\n            <th>赤</th>\n           \n        </tr>\n        <tr>\n            <td><div id='on_color_blue' style='background-color:red;'>-1</div></td> \n            <td><div id='on_color_green' style='background-color:red;'>-1</div></td> \n            <td><div id='on_color_red' style='background-color:red;'>-1</div></td> \n\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n    </table>\n    \n    \n    <div id='on_color_value'></div>\n    \n</div>\n<br>\n\n<div  class=wrapper1>\n    <button type='button' class='button' id='off_color'>消灯色指定</button>\n    \n    <table border='1'>\n    <thead>\n        <tr>\n            <th>青</th>\n            <th>緑</th>\n            <th>赤</th>\n           \n        </tr>\n        <tr>\n            <td><div id='off_color_blue' style='background-color:red;' >-1</div></td> \n            <td><div id='off_color_green' style='background-color:red;'>-1</div></td> \n            <td><div id='off_color_red' style='background-color:red;'>-1</div></td> \n\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n    </table>\n\n   \n    <div id='off_color_value'></div>\n    \n    \n</div>\n\n<label>設定名\n<input type='text' id='setting_name'>\n</label>\n<label>単位\n<input type='text' id='value_unit'>\n</label>\n\n<br>\n<label>この設定を休止状態にする\n<input type='checkbox' id='is_setting_disabled'>\n</label>\n<br>\n\n\n<div  class=wrapper1>\n    <button type='button' class='button' id='add_new_setting'>新規登録</button>\n    <button type='button' class='button' id='update_setting'>上書き</button>\n    <button type='button' class='button' id='fetch_setting'>元に戻す</button>\n    <button type='button' class='button' id='delete_setting'>削除</button>\n</div>\n<br>\n\n<div  class=wrapper1>\n    <button type='button' class='button' id='test_setting'>テスト</button>\n    <div>指示値：<span id='test_value'></span></div>\n</div>\n<br>\n\n\n<script>\n(function (scope) {\n    //グローバル変数\n    let isDragging = false;//マウスがドラッグ中でTrue\n    let selectedPivot = null;//キャンバス上の選択中のピボット\n    let isTransformed = false;//キャンバス上の画像が射影変換されていたらTrue\n\n    //定数\n    const SERVER_URL = `http://192.168.3.204:8000`;\n    //const SERVER_URL =`http://${location.hostname}:8000`;\n    const LINETHICKNESS = 1;\n    const SettingSelector = document.getElementById('setting_id');\n    const CameraSelector = document.getElementById('camera_port');\n    const TakeImageButton = document.getElementById('take_an_image');\n    const deleteImageButton = document.getElementById('delete_an_image');\n    const ImageSelector = document.getElementById('image_name');\n    const SettingNameInput = document.getElementById('setting_name');\n    const SettingUnitInput = document.getElementById('value_unit');\n    const pivotColorSelector = document.getElementById('pivot_color_select');\n    const pivotSizeInput = document.getElementById('pivot_size');\n    const CanvasDiv = document.getElementById('background_div');\n    const ImageCanvas = document.getElementById('image_canvas');\n    const UiCanvas = document.getElementById('ui_canvas');\n    const PerspectivePointTable = document.getElementById('roi');\n    const PerspectivePointX1Input = document.getElementById('roi_x1');\n    const PerspectivePointY1Input = document.getElementById('roi_y1');\n    const PerspectivePointX2Input = document.getElementById('roi_x2');\n    const PerspectivePointY2Input = document.getElementById('roi_y2');\n    const PerspectivePointX3Input = document.getElementById('roi_x3');\n    const PerspectivePointY3Input = document.getElementById('roi_y3');\n    const PerspectivePointX4Input = document.getElementById('roi_x4');\n    const PerspectivePointY4Input = document.getElementById('roi_y4');\n    const PerspectiveTransformationExcecuteButton = document.getElementById('roi_register');\n    const PerspectiveTransformationResetButton = document.getElementById('roi_reset');\n    const SegmentRegionsTable = document.getElementById('segment_region_table');\n    const SegmentRegionsAddButton = document.getElementById('segment_region_add');\n    const SegmentRegionsDeleteButton = document.getElementById('segment_region_delete');\n    const SegmentRegionsSpaceInput = document.getElementById('segment_region_space');\n    const SegmentRegionElementIds = ['region_left_x', 'region_left_y', 'region_right_x', 'region_right_y']\n    const DecimalPointsTable = document.getElementById('decimal_point_table')\n    const DecimalPointsAddButton = document.getElementById('decimal_point_add')\n    const DecimalPointsDeleteButton = document.getElementById('decimal_point_delete')\n    const DecimalPointsElementIds = ['decimal_x', 'decimal_y']\n    const SegmentPointsSettingEnableCheckbox = document.getElementById('is_segment_outline_setting_enabled')\n    const SegmentPointsTable = document.getElementById('segment_point_table')\n    const SegmentPointElementIds = ['segment_upper_left_x', 'segment_upper_left_y', 'segment_upper_right_x', 'segment_upper_right_y', 'segment_lower_right_x', 'segment_lower_right_y', 'segment_lower_left_x', 'segment_lower_left_y']\n    const onColorSelectButton = document.getElementById('on_color')\n    const offColorSelectButton = document.getElementById('off_color')\n    const SegmentOnColorBlueDiv = document.getElementById('on_color_blue')\n    const SegmentOnColorGreenDiv = document.getElementById('on_color_green')\n    const SegmentOnColorRedDiv = document.getElementById('on_color_red')\n    const SegmentOffColorBlueDiv = document.getElementById('off_color_blue')\n    const SegmentOffColorGreenDiv = document.getElementById('off_color_green')\n    const SegmentOffColorRedDiv = document.getElementById('off_color_red')\n    const SettingDisableCheckbox = document.getElementById('is_setting_disabled')\n    const SettingAddButton = document.getElementById('add_new_setting');\n    const SettingRegisterButton = document.getElementById('update_setting')\n    const SettingResetButton = document.getElementById('fetch_setting')\n    const SettingDeleteButton = document.getElementById('delete_setting')\n    const SettingTestButton = document.getElementById('test_setting')\n    const SettingResult=document.getElementById(\"test_value\");\n\n    initialize()\n\n    //射影変換後の画像にあるピボット座標をリストで返す\n    function getCoordinateDOMsAfterTransfomation() {\n        let doms = [];\n        const id0 = [SegmentPointElementIds.slice(0, 2), SegmentPointElementIds.slice(2, 4), SegmentPointElementIds.slice(4, 6), SegmentPointElementIds.slice(6, 8)];\n        const id1 = [DecimalPointsElementIds.slice(0, 2)];\n        const id2 = [SegmentRegionElementIds.slice(0, 2), SegmentRegionElementIds.slice(2, 4)];\n        const ids = [id0, id1, id2]\n        const tables = [SegmentPointsTable, DecimalPointsTable, SegmentRegionsTable]\n        for (let i = 0; i < ids.length; i++) {\n            addCoordinateDomsAfterTransformation(doms, tables[i], ids[i]);\n        }\n        return doms;\n    }\n\n    //配列domsに射影変換後の画像にあるピボットの座標を連想配列にして入れる\n    function addCoordinateDomsAfterTransformation(doms, table, ids) {\n        const col = table.rows.length - 1\n        for (let i = 0; i < col; i++) {\n            for (let j = 0; j < ids.length; j++) {\n                let id = ids[j]\n                doms.push({\n                    dom_x: document.getElementById(`${id[0]}_${i}`),\n                    dom_y: document.getElementById(`${id[1]}_${i}`)\n                });\n            }\n        }\n    }\n\n    //射影変換前の画像にあるピボット座標をリストで返す\n    function getCoordinateDOMsBeforeTransformation() {\n        const temp0 = [PerspectivePointX1Input, PerspectivePointY1Input]\n        const temp1 = [PerspectivePointX2Input, PerspectivePointY2Input]\n        const temp2 = [PerspectivePointX3Input, PerspectivePointY3Input]\n        const temp3 = [PerspectivePointX4Input, PerspectivePointY4Input]\n        const keys = [\"dom_x\", \"dom_y\"];\n        const data = [temp0, temp1, temp2, temp3]\n        return convertArrayToDict(keys, data)\n    }\n\n    (() => {\n        const canvas = UiCanvas;\n        const calculateDistance = (x1, y1, x2, y2) => {\n            return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n        };\n\n        //画像上に描画されているピボット座標から現在のマウスの座標から最も近いピボットを選択する\n        const findClosestCoordinate = (mouseX, mouseY, coordinates) => {\n            let closestIndex = null;\n            let closestDistance = Infinity;\n            let closestCoordX = null;\n            let closestCoordY = null;\n\n            coordinates.forEach((coordinate, index) => {\n                const cordX = Number(coordinate.dom_x.value);\n                const cordY = Number(coordinate.dom_y.value);\n                const distance = calculateDistance(mouseX, mouseY, cordX, cordY);\n\n                if (distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIndex = index;\n                    closestCoordX = cordX;\n                    closestCoordY = cordY;\n                }\n            });\n\n            return {\n                index: closestIndex,\n                x: closestCoordX,\n                y: closestCoordY,\n                distance: closestDistance\n            };\n        };\n\n        //マウスの左ボタン押しで、画像上に描画されているピボット座標から現在のマウスの座標から最も近いピボットを選択する\n        const handleMouseDown = (event) => {\n            const rect = canvas.getBoundingClientRect();\n            const mouseX = event.clientX - rect.left;\n            const mouseY = event.clientY - rect.top;\n            //画像上にあるピボットの配列の取得\n            const coordinates = !isTransformed ? getCoordinateDOMsBeforeTransformation() : getCoordinateDOMsAfterTransfomation();\n            console.log(coordinates)\n            const closestCoordinate = findClosestCoordinate(mouseX, mouseY, coordinates);\n            isDragging = true;\n            selectedPivot = coordinates[closestCoordinate.index];\n\n        };\n\n        //マウスがドラッグ中で、選択中のピボットの座標をマウスの動作に合わせて変化させ、ピボットのInputの座標値の書き換え、ピボットの描画を行う\n        const handleMouseMove = (event) => {\n            const rect = canvas.getBoundingClientRect();\n            const mouseX = event.clientX - rect.left;\n            const mouseY = event.clientY - rect.top;\n\n            if (isDragging && selectedPivot && checkIfWithinCanvas(mouseX, mouseY)) {\n\n                selectedPivot.dom_x.value = parseInt(mouseX);\n                selectedPivot.dom_y.value = parseInt(mouseY);\n                if (!isTransformed) {\n                    renderRoiSetting()\n                    checkRoiInputs();\n                } else {\n                    drawAndCheckSegmentSettings();\n                }\n            }\n        };\n\n\n        function checkIfWithinCanvas(mouseX, mouseY) {\n            const ret0 = Number(mouseX) >= 0 && Number(mouseX) <= canvas.width\n            const ret1 = Number(mouseY) >= 0 && Number(mouseY) <= canvas.height\n            return ret0 && ret1\n        }\n\n\n        //マウスの左ボタンを話したら、ドラグフラグと選択中ピボットのリセット\n        const handleMouseUp = () => {\n            isDragging = false;\n            selectedPivot = null;\n        };\n        canvas.addEventListener('mousedown', handleMouseDown);\n        canvas.addEventListener('mousemove', handleMouseMove);\n        canvas.addEventListener('mouseup', handleMouseUp);\n    })();\n\n    //ページを開いた時の処理\n    async function initialize() {\n        isDragging = false;\n        selectedPivot = null;\n        offsetX = 0;\n        offsetY = 0;\n        isTransformed = false;\n        //サーバーからデータを取得\n        await loadCameraIdsandNames();//撮影用のカメラIDとカメラ名のリスト\n        await loadSettingIdsAndNames();//設定IDと設定名のリストの取得のリスト\n        //セレクトタブのデフォルト値の選択\n        CameraSelector.querySelector('option[value=\"\"]').selected = true;//カメラセレクトタブ\n        SettingSelector.querySelector('option[value=\"\"]').selected = true;//設定名セレクトタブ\n        //設定登録、上書き、削除ボタンを無効化\n        disableElements([SettingRegisterButton, SettingResetButton, SettingDeleteButton,TakeImageButton,deleteImageButton,ImageSelector])\n        enableElements([SettingAddButton])\n        //画面上のInput、Canvas,Divを適当な値で初期化\n        initializeDoms();\n    }\n\n    //画面上のInput,Canvas,Divを適当な値で初期化\n    function initializeDoms() {\n        clearCanvas(ImageCanvas, 100, 100);\n        clearCanvas(UiCanvas, 100, 100);\n\n        CanvasDiv.style.height = '100px';\n        SettingNameInput.value = '';\n        SettingUnitInput.value = '';\n\n        const perspectivePointsInputs = [\n            PerspectivePointX1Input, PerspectivePointY1Input,\n            PerspectivePointX2Input, PerspectivePointY2Input,\n            PerspectivePointX3Input, PerspectivePointY3Input,\n            PerspectivePointX4Input, PerspectivePointY4Input\n        ];\n\n        perspectivePointsInputs.forEach(input => input.value = '');\n\n        loadSettingsForTable([], SegmentRegionsTable, SegmentRegionElementIds, extractSegmentRegionValues, createSegmentRegiondoms)\n        loadSettingsForTable([], SegmentPointsTable, SegmentPointElementIds, extractSegmentPointValues, createSegmentOutlineDoms)\n        loadSettingsForTable([], DecimalPointsTable, DecimalPointsElementIds, extractDecimalPointValues, createDecimalDoms)\n\n        SegmentRegionsSpaceInput.value = '10';\n        SegmentPointsSettingEnableCheckbox.checked = false;\n        SegmentOnColorBlueDiv.innerText = '-1';\n        SegmentOnColorGreenDiv.innerText = '-1';\n        SegmentOnColorRedDiv.innerText = '-1';\n        SegmentOffColorBlueDiv.innerText = '-1';\n        SegmentOffColorGreenDiv.innerText = '-1';\n        SegmentOffColorRedDiv.innerText = '-1';\n        SettingDisableCheckbox.checked = false;\n        checkDivColors();\n\n        return;\n    }\n\n    //キャンバスを初期化\n    function clearCanvas(canvas, width, height) {\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.width = width\n        canvas.height = height\n    }\n\n    //配列settingsに格納されているデータを引数tableの表を初期化し、格納する\n    function loadSettingsForTable(settings, table, ids, extractionFunction, DOMFunction) {\n        tableInitialize(table);\n        for (let setting of settings) {\n            let values = extractionFunction(setting);\n            let doms = DOMFunction(table, values, ids);\n            addDomsToTable(table, doms);\n        }\n    }\n\n    //連想配列settingからセグメント領域設定情報を配列で返す\n    function extractSegmentRegionValues(setting) {\n        return [\n            setting.region_left_x,\n            setting.region_left_y,\n            setting.region_right_x,\n            setting.region_right_y\n        ];\n    }\n\n    //連想配列settingからセグメント座標設定情報を配列で返す\n    function extractSegmentPointValues(setting) {\n        return [\n            setting.segment_upper_left_x,\n            setting.segment_upper_left_y,\n            setting.segment_upper_right_x,\n            setting.segment_upper_right_y,\n            setting.segment_lower_right_x,\n            setting.segment_lower_right_y,\n            setting.segment_lower_left_x,\n            setting.segment_lower_left_y\n        ];\n    }\n\n    //連想配列settingから小数点設定情報を配列で返す\n    function extractDecimalPointValues(setting) {\n        return [setting.decimal_x, setting.decimal_y];\n    }\n\n    //サーバーからDBに登録されているカメラを取得し、カメラのセレクトタブに入れる\n    async function loadSettingIdsAndNames() {\n        const apiUrl = buildApiUrl('setting_ids_and_names');\n        const data = await getJsonData(apiUrl);\n        removeOptions(SettingSelector);\n        addOptions(SettingSelector, data);\n\n        return;\n    }\n\n    //サーバーから選択中の設定名に該当する設定をサーバーから取得し、画面上のDOMにロードする\n    SettingSelector.onchange = getSettingBySettingId;\n    async function getSettingBySettingId() {\n        if (getSelectorValue(SettingSelector) != \"\") {\n            enableElements([SettingRegisterButton, SettingResetButton, SettingDeleteButton])\n            disableElements([SettingAddButton])\n            const setting_id = getSelectorValue(SettingSelector)\n            const apiUrl = buildApiUrl('get_ocr_setting', { setting_id: setting_id });\n            const data = await getJsonData(apiUrl);\n            await loadSetting(data);\n            checkSetting()\n            const imagePath = `/setting_images/${buildImagePath()}`;\n            await initializeCanvas(imagePath);\n            return;\n        }\n        initialize();\n    }\n    \n    SettingResetButton.onclick = reloadSetting;\n    function reloadSetting(){\n        if(window.confirm(\"実行しますか？\")){\n             getSettingBySettingId();\n        }\n    }\n\n    //引数dataの内容を画面上のDOMに格納する\n    async function loadSetting(data) {\n        CameraSelector.querySelector(`option[value='${String(data.camera_port)}']`).selected = true;\n        await loadSettingImage()\n        ImageSelector.querySelector(`option[value='${String(data.image_name)}']`).selected = true;\n        SettingNameInput.value = data.setting_name;\n        SettingUnitInput.value = data.value_unit;\n        pivotColorSelector.querySelector(`option[value='${String(data.pivot_color_select)}']`).selected = true;\n        pivotSizeInput.value = data.pivot_size;\n        PerspectivePointX1Input.value = data.roi_x1;\n        PerspectivePointY1Input.value = data.roi_y1\n        PerspectivePointX2Input.value = data.roi_x2\n        PerspectivePointY2Input.value = data.roi_y2\n        PerspectivePointX3Input.value = data.roi_x3\n        PerspectivePointY3Input.value = data.roi_y3\n        PerspectivePointX4Input.value = data.roi_x4\n        PerspectivePointY4Input.value = data.roi_y4\n        loadSettingsForTable(data.segment_region_table, SegmentRegionsTable, SegmentRegionElementIds, extractSegmentRegionValues, createSegmentRegiondoms)\n        loadSettingsForTable(data.segment_point_table, SegmentPointsTable, SegmentPointElementIds, extractSegmentPointValues, createSegmentOutlineDoms)\n        loadSettingsForTable(data.decimal_point_table, DecimalPointsTable, DecimalPointsElementIds, extractDecimalPointValues, createDecimalDoms)\n        SegmentRegionsSpaceInput.value = data.segment_region_space;\n        SegmentPointsSettingEnableCheckbox.checked = data.is_segment_outline_setting_enabled;\n        SegmentOnColorBlueDiv.innerText = String(data.on_color_blue)\n        SegmentOnColorGreenDiv.innerText = String(data.on_color_green)\n        SegmentOnColorRedDiv.innerText = String(data.on_color_red)\n        SegmentOffColorBlueDiv.innerText = String(data.off_color_blue)\n        SegmentOffColorGreenDiv.innerText = String(data.off_color_green)\n        SegmentOffColorRedDiv.innerText = String(data.off_color_red)\n        SettingDisableCheckbox.checked = data.is_setting_disabled;\n        return;\n    }\n\n    // APIのURLを生成\n    function buildApiUrl(endpoint, params = {}) {\n        const queryString = new URLSearchParams(params).toString();\n        return `${SERVER_URL}/${endpoint}${queryString ? '?' + queryString : ''}`;\n    }\n\n    // セレクタタブのオプション要素を作成し、セレクトタブに追加する\n    function addOptions(selector, options, nameKey = 'name', valueKey = 'value') {\n        removeOptions(selector);\n        options.forEach((option) => {\n            const optionDom = createOptionElement(option[nameKey], option[valueKey]);\n            selector.appendChild(optionDom);\n        });\n        const dom = createOptionElement('選択してください', '');\n        selector.add(dom, 0);\n    }\n\n    // セレクトタブからオプション要素を削除する\n    function removeOptions(selector) {\n        selector.innerHTML = '';\n    }\n\n    // セレクトタブのオプション要素を作成する\n    function createOptionElement(text, value) {\n        const option = document.createElement('option');\n        option.text = text;\n        option.value = value;\n        return option;\n    }\n\n    //サーバーからurlで指定されるエンドポイントからデータを取得し、返す\n    async function fetchResponse(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('サーバーエラー: ' + response.statusText);\n            }\n            return response;\n        } catch (error) {\n            console.error(error);\n            throw new Error('データの取得中にエラーが発生しました: ' + error.message);\n        }\n    }\n\n    async function getJsonData(url) {\n        const response = await fetchResponse(url);\n        return await response.json();\n    }\n\n    async function fetchBlobData(url) {\n        const response = await fetchResponse(url);\n        return await response.blob();\n    }\n\n    async function loadCameraIdsandNames() {\n        const apiUrl = buildApiUrl('get_camera/');\n        const data = await getJsonData(apiUrl);\n        addOptions(CameraSelector, data, 'name', 'usb_port');\n        return 'done';\n    }\n\n    TakeImageButton.onclick = takeSettingImage;\n    //設定用画像を撮影し、画像のセレクトタブに追加＋撮影に成功したかどうか表示\n    async function takeSettingImage() {\n        if (window.confirm(\"撮影しますか？\")) {\n            const usbPort = getSelectorValue(CameraSelector);\n            const apiUrl = buildApiUrl('take_an_image', { usb_port: usbPort });\n            const data = await getJsonData(apiUrl);\n            loadSettingImage();\n            window.confirm(data);\n            return;\n        }\n    }\n\n    deleteImageButton.onclick = deleteSettingImage;\n    //セレクトタブで選択された画像を削除し、画像のセレクトタブから削除＋削除に成功したかどうか表示\n    async function deleteSettingImage() {\n        if (window.confirm(\"削除しますか？\")) {\n            const usbPort = getSelectorValue(CameraSelector);\n            const imageName = getSelectorValue(ImageSelector);\n            const apiUrl = buildApiUrl('delete_an_image', { usb_port: usbPort, image_name: imageName });\n            const data = await getJsonData(apiUrl);\n            loadSettingImage();\n            window.confirm(data);\n            return;\n        }\n    }\n\n    CameraSelector.onchange = loadSettingImage;\n    //カメラのセレクトタブで選択されたカメラで撮影された画像をサーバーから取得し、画像のセレクトタブに追加\n    async function loadSettingImage() {\n        if (getSelectorValue(CameraSelector) != \"\") {\n            enableElements([TakeImageButton, deleteImageButton, ImageSelector])\n\n            const usbPort = getSelectorValue(CameraSelector);\n            const apiUrl = buildApiUrl('get_setting_image', { usb_port: usbPort });\n            const data = await getJsonData(apiUrl);\n            addOptions(ImageSelector, data);\n            ImageSelector.querySelector(`option[value=\"\"]`).selected = true;\n            return 'done';\n        }\n        disableElements([TakeImageButton, deleteImageButton, ImageSelector])\n\n    }\n\n    //セレクトタブの値を取得する\n    function getSelectorValue(selector) {\n        const idx = selector.selectedIndex;\n        const value = selector.options[idx].value;\n        return value;\n    }\n\n    //OCR設定をキャンバスに描く関数\n    pivotColorSelector.onchange = draw_settings;\n    pivotSizeInput.onchange = draw_settings;\n    function draw_settings() {\n        const canvas = UiCanvas;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        if (!isTransformed) {\n            renderRoiSetting()\n            return\n        }\n        drawAndCheckSegmentSettings();\n    }\n\n    function disableElements(doms) {\n        doms.forEach(dom => {\n            dom.disabled = true;\n        });\n    }\n\n    function enableElements(doms) {\n        doms.forEach(dom => {\n            dom.disabled = false;\n        });\n    }\n\n    // 画像をPromiseとして返す\n    function loadImage(src) {\n        return new Promise((resolve, reject) => {\n            const img = new Image();\n            img.onload = () => resolve(img);\n            img.onerror = (e) => reject(e);\n            img.src = src;\n        });\n    }\n\n    //画像をキャンバスに描く関数\n    async function initializeCanvas(img_src) {\n        const canvas = UiCanvas;\n        const backgroundCanvas = ImageCanvas;\n        const image = await loadImage(img_src).catch(e => {\n            console.log('onload error', e);\n        });\n\n        setupCanvasSizeAndPosition(image, canvas, backgroundCanvas, CanvasDiv);\n        drawImageOnCanvas(ImageCanvas, image, [0, 0, image.width, image.height], [0, 0, image.width, image.height]);\n        setDefaultRoiPoints(canvas);\n        renderRoiSetting()\n        isTransformed = false;\n        return;\n    }\n\n    //キャンバスサイズ、重ね順を画像に合わせて変更する\n    function setupCanvasSizeAndPosition(image, canvas, backgroundCanvas, canvasDiv) {\n        resizeCanvasToImage(image, canvas, ImageCanvas, CanvasDiv);\n        canvasDiv.style.position = 'relative';\n        canvasDiv.style.height = `${image.height}px`;\n        backgroundCanvas.style.position = 'absolute';\n        backgroundCanvas.style.zIndex = 2;\n        canvas.style.position = 'absolute';\n        canvas.style.zIndex = 3;\n    }\n\n    //デフォルトの射影変換点を射影変換用のInputに値として入れる\n    function setDefaultRoiPoints(canvas) {\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        if (PerspectivePointX1Input.value == '') {\n            PerspectivePointX1Input.value = 30;\n            PerspectivePointY1Input.value = 30;\n            PerspectivePointX2Input.value = centerX;\n            PerspectivePointY2Input.value = 30;\n            PerspectivePointX3Input.value = centerX;\n            PerspectivePointY3Input.value = centerY;\n            PerspectivePointX4Input.value = 30;\n            PerspectivePointY4Input.value = centerY;\n        }\n    }\n\n    PerspectiveTransformationResetButton.onclick = resetKeystoneCorrection;\n    ImageSelector.onchange = resetKeystoneCorrection;\n    // 射影変換前状態にキャンバスとボタンを戻す\n    async function resetKeystoneCorrection() {\n        disableElements([SegmentRegionsAddButton, DecimalPointsAddButton, SegmentRegionsDeleteButton, DecimalPointsDeleteButton]);\n        enableElements([PerspectiveTransformationExcecuteButton]);\n\n        const imagePath = `/setting_images/${buildImagePath()}`;\n        await initializeCanvas(imagePath);\n        return;\n    }\n\n    function buildImagePath() {\n        return `PORT_${getSelectorValue(CameraSelector)}/${getSelectorValue(ImageSelector)}`;\n    }\n\n    //キャンバスのサイズを画像に合わせる\n    function resizeCanvasToImage(image, canvas, backgroundCanvas, container) {\n        container.style.width = `${image.width}px`;\n        container.style.height = `${image.height}px`;\n        [canvas, backgroundCanvas].forEach(c => {\n            c.width = image.width;\n            c.height = image.height;\n        });\n    }\n\n    //キャンバスに画像を描く\n    function drawImageOnCanvas(canvas, image, src, dest) {\n        if (canvas.getContext('2d')) {\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(image, ...src, ...dest);\n        }\n    }\n\n    const perspectivePointInputs = [\n        PerspectivePointX1Input, PerspectivePointX2Input, PerspectivePointX3Input, PerspectivePointX4Input,\n        PerspectivePointY1Input, PerspectivePointY2Input, PerspectivePointY3Input, PerspectivePointY4Input\n    ];\n    perspectivePointInputs.forEach(input => input.onchange = drawAndCheckRoiSetting);\n\n    //射影変換設定の描画とチェック\n    function drawAndCheckRoiSetting() {\n        if (!isTransformed) {\n            renderRoiSetting();\n            checkRoiInputs();\n        }\n    }\n\n    //射影変換設定をキャンバスに描画\n    function renderRoiSetting() {\n        const roiCoordinates = getRoiPoints();\n        const ctx = UiCanvas.getContext('2d');\n        ctx.clearRect(0, 0, UiCanvas.width, UiCanvas.height);\n        drawRoiShape(ctx, roiCoordinates);\n    }\n\n\n    function getRoiPoints() {\n        return [\n            { x: Number(PerspectivePointX1Input.value), y: Number(PerspectivePointY1Input.value) },\n            { x: Number(PerspectivePointX2Input.value), y: Number(PerspectivePointY2Input.value) },\n            { x: Number(PerspectivePointX3Input.value), y: Number(PerspectivePointY3Input.value) },\n            { x: Number(PerspectivePointX4Input.value), y: Number(PerspectivePointY4Input.value) }\n        ];\n    }\n\n    //射影変換の設定用の座標から四隅がピボットの四角形を描画\n    function drawRoiShape(ctx, points) {\n        drawRectangle(ctx, points);\n        points.forEach(point => drawPivot(ctx, point));\n    }\n\n    function drawRectangle(ctx, points) {\n        ctx.strokeStyle = pivotColorSelector.value;\n        ctx.lineWidth = LINETHICKNESS;\n        ctx.beginPath();\n        points.forEach((point, i) => {\n            const nextPoint = points[(i + 1) % points.length];\n            ctx.moveTo(point.x, point.y);\n            ctx.lineTo(nextPoint.x, nextPoint.y);\n        });\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n    function drawPivot(ctx, pivot) {\n        ctx.strokeStyle = pivotColorSelector.value;\n        ctx.fillStyle = pivotColorSelector.value;\n\n        ctx.beginPath();\n        ctx.arc(pivot.x, pivot.y, pivotSizeInput.value, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n    function drawCircle(ctx, pivot) {\n        ctx.strokeStyle = pivotColorSelector.value;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(pivot.x, pivot.y, pivotSizeInput.value, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n    PerspectiveTransformationExcecuteButton.onclick = applyPerspectiveTransformation;\n    //射影変換を実行し、射影変換後の画像をサーバーから取得し、キャンバスに描画\n    async function applyPerspectiveTransformation() {\n        disableElements([PerspectiveTransformationExcecuteButton]);\n        enableElements([SegmentRegionsAddButton, SegmentRegionsDeleteButton, DecimalPointsAddButton, DecimalPointsDeleteButton]);\n\n        checkRoiInputs();\n\n\n        const roiValues = [\n            PerspectivePointX1Input.value,\n            PerspectivePointY1Input.value,\n            PerspectivePointX2Input.value,\n            PerspectivePointY2Input.value,\n            PerspectivePointX3Input.value,\n            PerspectivePointY3Input.value,\n            PerspectivePointX4Input.value,\n            PerspectivePointY4Input.value\n        ];\n\n        const usbPort = getSelectorValue(CameraSelector);\n        const imageName = getSelectorValue(ImageSelector);\n        const imagePath = buildImagePath();\n\n        const apiUrl = buildApiUrl('do_keystone_correction', {\n            x1: roiValues[0],\n            y1: roiValues[1],\n            x2: roiValues[2],\n            y2: roiValues[3],\n            x3: roiValues[4],\n            y3: roiValues[5],\n            x4: roiValues[6],\n            y4: roiValues[7],\n            path: imagePath\n        });\n\n        const blob = await fetchBlobData(apiUrl);\n        const imgUrl = URL.createObjectURL(blob);\n\n        const img = new Image();\n        img.onload = function () {\n            resizeCanvasToImage(img, UiCanvas, ImageCanvas, CanvasDiv);\n            drawImageOnCanvas(ImageCanvas, img, [0, 0, img.width, img.height], [0, 0, img.width, img.height]);\n            drawAndCheckSegmentSettings();\n        };\n        img.src = imgUrl;\n\n        isTransformed = true;\n    }\n\n    SegmentRegionsAddButton.onclick = () => addAndDrawSegmentRegion();\n    // セグメント領域設定用inputを表に追加する\n    function addAndDrawSegmentRegion() {\n        const ids = SegmentRegionElementIds;\n        const table = SegmentRegionsTable;\n        const canvas = UiCanvas;\n        const newRegion = calculateNewRegionPosition(table, canvas, SegmentRegionsSpaceInput, ids);\n        const domElements = createSegmentRegiondoms(table, newRegion, ids);\n        addDomsToTable(table, domElements);\n        addSegmentOutlinePoints();\n        drawAndCheckSegmentSettings()\n    }\n\n    //セグメント領域の設定表の列のDOMを生成する関数\n    function createSegmentRegiondoms(table, defalut_values, ids) {\n        const col = String(table.rows.length - 1);\n        const offset = (defalut_values[2] - defalut_values[0] + defalut_values[4]);\n        const x_left_input = inputCreate('number', `${ids[0]}_${col}`, defalut_values[0], 'number', null, drawAndCheckSegmentSettings);\n        const y_left_input = inputCreate('number', `${ids[1]}_${col}`, defalut_values[1], 'number', null, drawAndCheckSegmentSettings);\n        const x_right_input = inputCreate('number', `${ids[2]}_${col}`, defalut_values[2], 'number', null, drawAndCheckSegmentSettings);\n        const y_right_input = inputCreate('number', `${ids[3]}_${col}`, defalut_values[3], 'number', null, drawAndCheckSegmentSettings);\n        const doms = [x_left_input, y_left_input, x_right_input, y_right_input];\n        return doms;\n    }\n\n    //セグメント領域のデフォルト値を計算する\n    function calculateNewRegionPosition(table, canvas, spaceInput, ids) {\n        const col = table.rows.length - 1;\n        let x_left = 5;\n        let y_top = 5;\n        let x_right = parseInt(canvas.width / 4);\n        let y_bottom = canvas.height - 10;\n        const space = parseInt(spaceInput.value);\n\n        if (col > 0) {\n            const previousColIndex = col - 1;\n            const ex_x_left = getNumberValueById(`${ids[0]}_${previousColIndex}`);\n            const ex_y_top = getNumberValueById(`${ids[1]}_${previousColIndex}`);\n            const ex_x_right = getNumberValueById(`${ids[2]}_${previousColIndex}`);\n            const ex_y_bottom = getNumberValueById(`${ids[3]}_${previousColIndex}`);\n            const offset = ex_x_right - ex_x_left + space;\n            x_left = ex_x_left + offset;\n            y_top = ex_y_top;\n            x_right = x_left + (ex_x_right - ex_x_left);\n            y_bottom = ex_y_bottom;\n        }\n\n        return [x_left, y_top, x_right, y_bottom];\n    }\n\n    SegmentRegionsSpaceInput.onchange = () => updateSegmentRegionsAndSegmentOutline();\n    // セグメント領域、輪郭設定を更新、描画\n    function updateSegmentRegionsAndSegmentOutline() {\n        const ids = SegmentPointElementIds;\n        const regionTable = SegmentRegionsTable;\n        const space = Number(SegmentRegionsSpaceInput.value);\n        const sids = SegmentRegionElementIds;\n        const segmentTable = SegmentPointsTable;\n        updateRegionSpaces(sids, regionTable, space);\n        updateSegmentOutlineSpaces(ids, sids, segmentTable);\n        drawAndCheckSegmentSettings();\n    }\n\n    // セグメント領域設定のInput値を更新\n    function updateRegionSpaces(ids, table, space) {\n        for (let i = 1; i < table.rows.length - 1; i++) {\n            // Get the x-position of the right edge of the previous region.\n            const prevXRight = getNumberValueById(`${ids[2]}_${i - 1}`);\n            // Calculate the new x-positions for the left and right edges of the current region.\n            const newXLeft = prevXRight + space;\n            const currentXRight = getNumberValueById(`${ids[2]}_${i}`);\n            const currentXLeft = getNumberValueById(`${ids[0]}_${i}`);\n            const width = currentXRight - currentXLeft;\n            const newXRight = newXLeft + width;\n            // Update the current row's DOM elements with the new x-positions.\n            document.getElementById(`${ids[0]}_${i}`).value = newXLeft.toString();\n            document.getElementById(`${ids[2]}_${i}`).value = newXRight.toString();\n        }\n    }\n\n    // セグメント領域設定を描画\n    function drawSegmentRegions(ctx) {\n        const table = SegmentRegionsTable;\n        const ids = SegmentRegionElementIds;\n        for (let i = 1; i < table.rows.length; i++) {\n            const region = getRegionValues(ids, i - 1);\n            drawSegmentRegion(ctx, region);\n        }\n    }\n\n    function getRegionValues(ids, index) {\n        return {\n            xLeft: getNumberValueById(`${ids[0]}_${index}`),\n            yTop: getNumberValueById(`${ids[1]}_${index}`),\n            xRight: getNumberValueById(`${ids[2]}_${index}`),\n            yBottom: getNumberValueById(`${ids[3]}_${index}`)\n        };\n    }\n\n    function drawSegmentRegion(ctx, { xLeft, yTop, xRight, yBottom }) {\n        const positions = [\n            { x: xLeft, y: yTop },\n            { x: xRight, y: yTop },\n            { x: xRight, y: yBottom },\n            { x: xLeft, y: yBottom }\n        ];\n        const pivots = [positions[0], positions[2]];\n        drawRectangle(ctx, positions);\n        pivots.forEach(pivot => drawPivot(ctx, pivot));\n    }\n\n    SegmentRegionsDeleteButton.onclick = () => deleteSegmentSetting();\n    //セグメント領域設定表の末尾の行を削除し、描画する関数\n    function deleteSegmentSetting() {\n        deleteSegmentRegion();\n        deleteSegmentOutlineSetting();\n        drawAndCheckSegmentSettings();\n    }\n\n    function deleteSegmentRegion() {\n        const RegionTable = SegmentRegionsTable;\n        deleteRow(RegionTable)\n    }\n\n    function deleteRow(table) {\n        if (table.rows.length > 1) { // Ensure there is at least one row to delete\n            table.deleteRow(-1);\n        }\n    }\n\n\n\n    // Simplified function to get value by ID and parse as number\n    function getNumberValueById(id) {\n        return Number(document.getElementById(id).value);\n    }\n\n    DecimalPointsAddButton.onclick = addAndDrawDecimalPoint;\n    //小数点設定表に小数点設定を追加し、描画する関数\n    function addAndDrawDecimalPoint() {\n        const ids = DecimalPointsElementIds\n        const canvas = UiCanvas;\n        const table = DecimalPointsTable;\n        let decimal_x = 10\n        let decimal_y = canvas.height - 10\n        const doms = createDecimalDoms(table, [decimal_x, decimal_y], ids);\n        addDomsToTable(table, doms);\n        drawAndCheckSegmentSettings()\n    }\n\n    //小数点設定表の列のDOMを生成する関数\n    function createDecimalDoms(table, defalut_values, ids) {\n        const col = String(table.rows.length - 1);\n        const decimal_x_input = inputCreate('number', `${ids[0]}_${col}`, defalut_values[0], 'number', null, drawAndCheckSegmentSettings);\n        const decimal_y_input = inputCreate('number', `${ids[1]}_${col}`, defalut_values[1], 'number', null, drawAndCheckSegmentSettings);\n        const doms = [decimal_x_input, decimal_y_input];\n        return doms;\n    }\n\n    //小数点設定を描画する関数\n    function drawDecimalPoints(ctx) {\n        const ids = DecimalPointsElementIds\n        const table = DecimalPointsTable;\n\n        for (let i = 1; i < table.rows.length; i++) {\n            let decimal_x = Number(document.getElementById(`${ids[0]}_${i - 1}`).value);\n            let decimal_y = Number(document.getElementById(`${ids[1]}_${i - 1}`).value);\n            let positions = [\n                { x: decimal_x, y: decimal_y },\n            ];\n            for (let i = 0; i < positions.length; i++) {\n                drawPivot(ctx, positions[i])\n            }\n        }\n    }\n\n    DecimalPointsDeleteButton.onclick = deleteDecimalPoint;\n    //小数点設定表の末尾の行を削除する関数\n    function deleteDecimalPoint() {\n        const table = DecimalPointsTable;\n        const col = table.rows.length - 2;\n        if (col >= 0) {\n            table.deleteRow(-1);\n            drawAndCheckSegmentSettings();\n        }\n    }\n\n    //セグメント輪郭設定表に行を追加し、描画する関数\n    function addSegmentOutlinePoints() {\n        const sids = SegmentRegionElementIds\n        const ids = SegmentPointElementIds\n        const table = SegmentPointsTable;\n        const col = String(table.rows.length - 1);\n        const coordinates = calculateNewSegmentOutlinePoints(ids, sids, col)\n        const doms = createSegmentOutlineDoms(table, coordinates, ids);\n        addDomsToTable(table, doms);\n        drawAndCheckSegmentSettings()\n    }\n\n    //セグメント輪郭設定に追加する設定のデフォルト値を計算し返す関数\n    function calculateNewSegmentOutlinePoints(ids, sids, col) {\n        const height = Number(document.getElementById(`${sids[3]}_${col}`).value) - Number(document.getElementById(`${sids[1]}_${col}`).value) - 10;\n        const width = Number(document.getElementById(`${sids[2]}_${col}`).value) - Number(document.getElementById(`${sids[0]}_${col}`).value) - 10;\n        let x_upper_left = Number(document.getElementById(`${sids[0]}_${col}`).value) + 10;\n        let y_upper_left = Number(document.getElementById(`${sids[1]}_${col}`).value) + 10;\n        let x_upper_right = x_upper_left + width - 10;\n        let y_upper_right = y_upper_left;\n        let x_lower_right = x_upper_right;\n        let y_lower_right = y_upper_right + height - 10;\n        let x_lower_left = x_upper_left;\n        let y_lower_left = y_lower_right;\n\n        if (col > 0) {\n            let pre_x = Number(document.getElementById(`${sids[0]}_${col - 1}`).value);\n            let pre_y = Number(document.getElementById(`${sids[1]}_${col - 1}`).value);\n\n            let x_upper_left_offset = Number(document.getElementById(`${ids[0]}_${col - 1}`).value) - pre_x\n            let y_upper_left_offset = Number(document.getElementById(`${ids[1]}_${col - 1}`).value) - pre_y\n            let x_upper_right_offset = Number(document.getElementById(`${ids[2]}_${col - 1}`).value) - pre_x\n            let y_upper_right_offset = Number(document.getElementById(`${ids[3]}_${col - 1}`).value) - pre_y\n            let x_lower_right_offset = Number(document.getElementById(`${ids[4]}_${col - 1}`).value) - pre_x\n            let y_lower_right_offset = Number(document.getElementById(`${ids[5]}_${col - 1}`).value) - pre_y\n            let x_lower_left_offset = Number(document.getElementById(`${ids[6]}_${col - 1}`).value) - pre_x\n            let y_lower_left_offset = Number(document.getElementById(`${ids[7]}_${col - 1}`).value) - pre_y\n\n            let origin_x = Number(document.getElementById(`${sids[0]}_${col}`).value);\n            let origin_y = Number(document.getElementById(`${sids[1]}_${col}`).value);\n\n\n            x_upper_left = x_upper_left_offset + origin_x\n            y_upper_left = y_upper_left_offset + origin_y\n            x_upper_right = x_upper_right_offset + origin_x\n            y_upper_right = y_upper_right_offset + origin_y\n            x_lower_right = x_lower_right_offset + origin_x\n            y_lower_right = y_lower_right_offset + origin_y\n            x_lower_left = x_lower_left_offset + origin_x\n            y_lower_left = y_lower_left_offset + origin_y\n        }\n        const ret = [x_upper_left, y_upper_left, x_upper_right, y_upper_right, x_lower_right, y_lower_right, x_lower_left, y_lower_left]\n        return ret\n    }\n\n    // セグメント輪郭設定のInput値を更新\n    function updateSegmentOutlineSpaces(ids, sids, table) {\n        for (let i = 1; i < table.rows.length - 1; i++) {\n            const region_x = getNumberValueById(`${sids[0]}_${i}`);\n            const pre_region_x = getNumberValueById(`${sids[0]}_${i - 1}`);\n            const segment_points = ([getNumberValueById(`${ids[0]}_${i - 1}`), getNumberValueById(`${ids[2]}_${i - 1}`), getNumberValueById(`${ids[4]}_${i - 1}`), getNumberValueById(`${ids[6]}_${i - 1}`)])\n            const segment_points_diff = segment_points.map((x) => x - pre_region_x);\n            updateSegmentOutlinePoints(ids, i, region_x, segment_points_diff);\n        }\n\n    }\n\n    function updateSegmentOutlinePoints(ids, index, left_x, diffs) {\n        document.getElementById(`${ids[0]}_${index}`).value = String(left_x + diffs[0]);\n        document.getElementById(`${ids[2]}_${index}`).value = String(left_x + diffs[1]);\n        document.getElementById(`${ids[4]}_${index}`).value = String(left_x + diffs[2]);\n        document.getElementById(`${ids[6]}_${index}`).value = String(left_x + diffs[3]);\n    }\n\n    function createSegmentOutlineInputs(idPrefix, column, defaultValue, onChangeCallback) {\n        return inputCreate('number', `${idPrefix}_${column}`, defaultValue, 'number', null, onChangeCallback);\n    }\n\n    function createSegmentOutlineDoms(table, default_values, ids) {\n        const column = String(table.rows.length - 1);\n        const doms = ids.map((id, index) => createSegmentOutlineInputs(id, column, default_values[index], drawAndCheckSegmentSettings));\n        return doms;\n    }\n\n    function getSegmentCoordinates(ids, index) {\n        return ids.map(id => Number(document.getElementById(`${id}_${index}`).value));\n    }\n\n    function drawSegmentOutlines(ctx, positions) {\n        positions.forEach(position => drawPivot(ctx, position));\n        drawRectangle(ctx, positions);\n    }\n\n    //セグメント認識点を算出し、描画する関数\n    function drawRecognitionPoints(ctx, positions) {\n        const recognition_points = calculateSegmentRecognitionPoints(...positions);\n        recognition_points.forEach(point => drawCircle(ctx, point));\n    }\n\n    //セグメント輪郭設定のポイントからセグメントを認識する7点の座標を算出し返す関数\n    function calculateSegmentRecognitionPoints(upper_left_x, upper_left_y, upper_right_x, upper_right_y, lower_right_x, lower_right_y, lower_left_x, lower_left_y) {\n        const upper_middle_x = parseInt((upper_left_x + upper_right_x) / 2);\n        const upper_middle_y = parseInt((upper_left_y + upper_right_y) / 2);\n\n        const lower_middle_x = parseInt((lower_left_x + lower_right_x) / 2);\n        const lower_middle_y = parseInt((lower_left_y + lower_right_y) / 2);\n\n        const middle_x = parseInt((upper_middle_x + lower_middle_x) / 2);\n        const middle_y = parseInt((upper_middle_y + lower_middle_y) / 2);\n\n        const r_upper_left_x = lower_left_x + parseInt((upper_left_x - lower_left_x) / 4);\n        const r_upper_left_y = lower_left_y + parseInt((upper_left_y - lower_left_y) / 4);\n\n        const r_lower_left_x = lower_left_x + parseInt(3 * (upper_left_x - lower_left_x) / 4);\n        const r_lower_left_y = lower_left_y + parseInt(3 * (upper_left_y - lower_left_y) / 4);\n\n        const r_upper_right_x = lower_right_x + parseInt((upper_right_x - lower_right_x) / 4);\n        const r_upper_right_y = lower_right_y + parseInt((upper_right_y - lower_right_y) / 4);\n\n        const r_lower_right_x = lower_right_x + parseInt(3 * (upper_right_x - lower_right_x) / 4);\n        const r_lower_right_y = lower_right_y + parseInt(3 * (upper_right_y - lower_right_y) / 4);\n\n        const points = [{ x: upper_middle_x, y: upper_middle_y },\n        { x: lower_middle_x, y: lower_middle_y },\n        { x: middle_x, y: middle_y },\n        { x: r_upper_left_x, y: r_upper_left_y },\n        { x: r_lower_left_x, y: r_lower_left_y },\n        { x: r_upper_right_x, y: r_upper_right_y },\n        { x: r_lower_right_x, y: r_lower_right_y }\n        ]\n        console.log(points)\n        return points\n    }\n\n    //セグメント輪郭設定の描画処理\n    function drawSegmentOutlineSetting(ctx) {\n        if (SegmentPointsSettingEnableCheckbox.checked) {\n            const table = SegmentPointsTable;\n            const ids = SegmentPointElementIds;\n\n            for (let i = 0; i < table.rows.length - 1; i++) {\n                const [upperLeftX, upperLeftY, upperRightX, upperRightY, lowerRightX, lowerRightY, lowerLeftX, lowerLeftY] = getSegmentCoordinates(ids, i);\n                const positions = [\n                    { x: upperLeftX, y: upperLeftY },\n                    { x: upperRightX, y: upperRightY },\n                    { x: lowerRightX, y: lowerRightY },\n                    { x: lowerLeftX, y: lowerLeftY }\n                ];\n\n                drawSegmentOutlines(ctx, positions);\n                drawRecognitionPoints(ctx, positions.map(position => [position.x, position.y]).flat());\n            }\n        }\n    }\n\n    SegmentPointsSettingEnableCheckbox.onchange = drawAndCheckSegmentSettings\n    //セグメント設定をチェック、描画する関数\n    function drawAndCheckSegmentSettings() {\n        if (isTransformed) {\n            const canvas = UiCanvas;\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            drawDecimalPoints(ctx);\n            drawSegmentRegions(ctx)\n            drawSegmentOutlineSetting(ctx);\n            checkSegmentSettingInput()\n        }\n    }\n\n    function deleteSegmentOutlineSetting() {\n        const SegmentPointtable = SegmentPointsTable;\n        deleteRow(SegmentPointtable)\n    }\n\n\n    //設定表の初期化関数\n    function tableInitialize(table) {\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n\n    //DOMをテーブルに追加する関数\n    function addDomsToTable(table, doms) {\n        //行の末尾に生成したDOMを追加\n        const col = String(table.rows.length - 1);\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n\n    //入力欄の定義関数\n    function inputCreate(type, id, value, class_name, checked, func) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n        if (type == 'text' || type == 'number') {\n            input.value = value;\n        }\n        input.className = class_name;\n        if (type == 'checkbox') {\n            input.checked = checked\n        }\n        if (func) {\n            input.onchange = func\n        }\n        return input;\n    }\n\n    //表示色指定、消灯色指定ボタンをクリックで関数set_colorを実行\n    onColorSelectButton.onclick = setSegmentColor;\n    offColorSelectButton.onclick = setSegmentColor;\n\n    //キャンバス上の画像をクリックし、クリックした座標の色情報をdivに出力\n    function setSegmentColor() {\n        //キャンバスのロード\n        const ui_canvas = UiCanvas;\n        const background_canvas = ImageCanvas\n        const context = background_canvas.getContext('2d');\n        //画像が描画されているキャンバスが一番上にくるようにして、色を取得できるようにする\n        background_canvas.style.zIndex = 2;\n        ui_canvas.style.zIndex = 1;\n        //クリックされたボタンのidを取得\n        const idx = this.id;\n        //色を表示するdivのdomを指定\n        const color_view_id = `${this.id}_view`;\n        const color_view = document.getElementById(`${color_view_id}`);\n        //キャンバス上でマウスがクリックされたら、関数get_rgbaを実行\n        background_canvas.addEventListener('click', getRGB);\n        //クリックされた座標の色情報をdivに出力する\n        function getRGB(e) {\n            //キャンバスの枠幅、形状を取得\n            const borderWidth = 1;\n            const rect = e.target.getBoundingClientRect();\n            //  マウス座標の取得\n            const x = Math.round(e.clientX - rect.left - borderWidth);\n            const y = Math.round(e.clientY - rect.top - borderWidth);\n            //  指定座標のImageDataオブジェクトの取得 \n            const imagedata = context.getImageData(x, y, 1, 1);\n            //  RGBAの取得\n            const r = imagedata.data[0];\n            const g = imagedata.data[1];\n            const b = imagedata.data[2];\n            //青　緑、赤の輝度値を表に出力\n            document.getElementById(`${idx}_blue`).innerText = b;\n            document.getElementById(`${idx}_green`).innerText = g;\n            document.getElementById(`${idx}_red`).innerText = r;\n            // RGBから#ffffff形式へ変換する\n            //クリックイベントの解除\n            background_canvas.removeEventListener('click', getRGB);\n            //キャンバスの描画順序のリセット\n            ui_canvas.style.zIndex = 2;\n            background_canvas.style.zIndex = 1;\n            checkDivColors()\n        }\n    }\n\n    //射影変換点のinputに正の整数が入力されているか判定する関数。設定が異常の場合、inputの背景色を赤にする\n    function checkRoiInputs() {\n        const doms = [PerspectivePointX1Input, PerspectivePointX2Input, PerspectivePointX3Input, PerspectivePointX4Input, PerspectivePointY1Input, PerspectivePointY2Input, PerspectivePointY3Input, PerspectivePointY4Input];\n        const ret=checkInputAndTurnColor(doms);\n        return ret;\n    }\n\n    //inputに正の整数が入力されているかチェックし、設定が異常の場合、inputの背景色を赤にする関数\n    function checkInputAndTurnColor(doms) {\n        const validColor = 'white';\n        const invalidColor = 'red';\n        let isValid=true;\n        for (let dom of doms) {\n            if (isInteger(dom.value)) {\n                dom.style.backgroundColor = validColor;\n                continue;\n            }\n            dom.value = -1;\n            dom.style.backgroundColor = invalidColor;\n            isValid=false;\n        }\n        return isValid\n    }\n\n    //引数textが正の整数かどうか判定する関数\n    function isInteger(text) {\n        const ret = text.match(/^([1-9]\\d*|0)$/) && text.length != 0\n        return ret;\n    }\n\n    //表に格納されているinputが正の整数かどうか判定する関数。設定が異常の場合、inputの背景色を赤にする\n    function checkTableInputs(table, ids) {\n        let isValid=true\n        for (let i = 1; i < table.rows.length; i++) {\n            let doms = ids.map(id => document.getElementById(`${id}_${i - 1}`));\n            isValid=checkInputAndTurnColor(doms);\n        }\n        return isValid;\n    }\n\n\n    function checkSegmentSettingInput() {\n        const ret0=checkTableInputs(SegmentRegionsTable, SegmentRegionElementIds);\n        const ret1=checkTableInputs(DecimalPointsTable, DecimalPointsElementIds);\n        const ret2=checkTableInputs(SegmentPointsTable, SegmentPointElementIds);\n        return ret0&&ret1&&ret2;\n    }\n\n    // \n    function updateBackgroundColorBasedOnContent(dom, validValue, validColor, invalidColor) {\n        if (Number(dom.innerText) < validValue){\n            dom.style.backgroundColor=invalidColor;\n            return false\n        }\n        dom.style.backgroundColor =  validColor;\n        return true;\n    }\n\n    // Function to update colors of the divs based on their content\n    function checkDivColors() {\n        const validColor = 'white';\n        const invalidColor = 'red';\n        let isValid=true\n        const doms = [\n            SegmentOnColorBlueDiv, SegmentOnColorGreenDiv, SegmentOnColorRedDiv,\n            SegmentOffColorBlueDiv, SegmentOffColorGreenDiv, SegmentOffColorRedDiv\n        ];\n        for (let dom of doms){\n           isValid = updateBackgroundColorBasedOnContent(dom, 0, validColor, invalidColor);\n           if(!isValid){\n            isValid = false\n           }\n        }\n        return isValid;\n    }\n\n    //入力された設定を連想配列に格納する関数\n    function storeSetting() {\n        send_data = {};\n        send_data[CameraSelector.id] = getSelectorValue(CameraSelector);\n        send_data[ImageSelector.id] = getSelectorValue(ImageSelector);\n        send_data[SettingNameInput.id] = SettingNameInput.value;\n        send_data[SettingUnitInput.id] = SettingUnitInput.value;\n        send_data[pivotColorSelector.id] = getSelectorValue(pivotColorSelector);\n        send_data[pivotSizeInput.id] = pivotSizeInput.value;\n        send_data[PerspectivePointX1Input.id] = PerspectivePointX1Input.value;\n        send_data[PerspectivePointY1Input.id] = PerspectivePointY1Input.value;\n        send_data[PerspectivePointX2Input.id] = PerspectivePointX2Input.value;\n        send_data[PerspectivePointY2Input.id] = PerspectivePointY2Input.value;\n        send_data[PerspectivePointX3Input.id] = PerspectivePointX3Input.value;\n        send_data[PerspectivePointY3Input.id] = PerspectivePointY3Input.value;\n        send_data[PerspectivePointX4Input.id] = PerspectivePointX4Input.value;\n        send_data[PerspectivePointY4Input.id] = PerspectivePointY4Input.value;\n        send_data[SegmentRegionsTable.id] = storeTableSetting(SegmentRegionsTable, SegmentRegionElementIds);\n        send_data[SegmentRegionsSpaceInput.id] = SegmentRegionsSpaceInput.value;\n        send_data[DecimalPointsTable.id] = storeTableSetting(DecimalPointsTable, DecimalPointsElementIds);\n        send_data[SegmentPointsSettingEnableCheckbox.id] = SegmentPointsSettingEnableCheckbox.checked;\n        send_data[SegmentPointsTable.id] = storeTableSetting(SegmentPointsTable, SegmentPointElementIds);\n        send_data[SegmentOnColorBlueDiv.id] = SegmentOnColorBlueDiv.innerText;\n        send_data[SegmentOnColorGreenDiv.id] = SegmentOnColorGreenDiv.innerText;\n        send_data[SegmentOnColorRedDiv.id] = SegmentOnColorRedDiv.innerText;\n        send_data[SegmentOffColorBlueDiv.id] = SegmentOffColorBlueDiv.innerText;\n        send_data[SegmentOffColorGreenDiv.id] = SegmentOffColorGreenDiv.innerText;\n        send_data[SegmentOffColorRedDiv.id] = SegmentOffColorRedDiv.innerText;\n        send_data[SettingDisableCheckbox.id] = SettingDisableCheckbox.checked;\n        return send_data;\n    }\n\n    //設定をチェックする関数\n    async function checkSetting() {\n        try {\n            const checksPassed = [\n                checkRoiInputs(),\n                checkSegmentSettingInput(),\n                checkDivColors(),\n                IsSelectorChecked(ImageSelector)\n            ].every(result => result === true);\n            // Return the combined result of all checks.\n            return checksPassed;\n        } catch (error) {\n            console.error('An error occurred during setting checks:', error);\n            return false;\n        }\n    }\n\n    //登録ボタンクリックでサーバーに入力された設定を新規登録\n    SettingAddButton.onclick = postNewSetting;\n    async function postNewSetting() {\n        if (window.confirm(\"実行しますか？\")) {\n            const ret = await checkSetting()\n            if (ret) {\n                const data = storeSetting();\n                const apiUrl = `${SERVER_URL}/add_new_setting`\n                const response = await postData(apiUrl, data);\n                initialize();\n                window.alert(response)\n            } else {\n                window.alert(\"設定が不正です\")\n            }\n        }\n    }\n\n    SettingRegisterButton.onclick = updateSetting\n    //上書きボタンクリックでサーバーに入力された設定を上書き\n    async function updateSetting() {\n        if (window.confirm(\"実行しますか\")) {\n            const ret = await checkSetting()\n            if (ret && IsSelectorChecked(SettingSelector)) {\n                const data = storeSetting();\n                data.setting_id = getSelectorValue(SettingSelector);\n                const apiUrl = `${SERVER_URL}/update_ocr_setting`\n                const response = await postData(apiUrl, data);\n                //initialize();\n                window.alert(response)\n            } else {\n                window.alert(\"設定が不正です\")\n            }\n        }\n    }\n\n    SettingDeleteButton.onclick = deleteSetting\n    //上書きボタンクリックでサーバーに入力された設定を削除\n    async function deleteSetting() {\n        const id = getSelectorValue(SettingSelector);\n        if (window.confirm(\"実行しますか\")) {\n            const apiUrl = buildApiUrl('delete_ocr_setting', { id: id });\n            const data = await getJsonData(apiUrl);\n            initialize();\n            window.alert(data)\n        }\n    }\n\n    //サーバーにデータをPOSTする関数\n    async function postData(url, data) {\n        console.log(data)\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                return jsonResponse\n            } else {\n                console.error('HTTPエラー！ ステータスコード: ', response.status);\n            }\n        } catch (error) {\n            console.error('エラーが発生しました: ', error);\n        }\n    }\n\n    //セレクトタブの値が選択されているか判定する関数\n    function IsSelectorChecked(selector) {\n        return selector.value != ''\n    }\n\n    //設定表の内容を辞書にロードする関数\n    function storeTableSetting(table, keys) {\n        const array_data = getTableChildElements(table);\n        const dict_data = convertArrayToDict(keys, array_data);\n        return dict_data;\n    }\n\n    //表のデータを配列にロードする関数\n    function getTableChildElements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; i++) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; j++) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    row_data.push(getDomValue(dom));\n                }\n            }\n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //２次元配列を辞書に変換する関数\n    function convertArrayToDict(keys, data) {\n        const newData = data.map((item) => {\n            let obj = {};\n            keys.forEach((key, i) => (obj[key] = item[i]));\n            return obj;\n        });\n        return newData;\n    }\n\n    //DOMの値を取得する関数\n    function getDomValue(dom) {\n        switch (dom.tagName) {\n            case 'DIV':\n                return dom.innerText || null;\n            case 'INPUT':\n                return dom.type === 'checkbox' ? dom.checked : dom.value || null;\n            case 'SELECT':\n                return dom.value || null;\n            default:\n                return null; // Consider returning null or a default value if the element type is not supported.\n        }\n    }\n    \n    SettingTestButton.onclick=test_ocr_settingg;\n    async function test_ocr_settingg() {\n        const usbPort = getSelectorValue(CameraSelector);\n        const image=getSelectorValue(ImageSelector);\n        const setting_id = getSelectorValue(SettingSelector)\n        const apiUrl = buildApiUrl('test_ocr_setting', { usb_port: usbPort,image:image,setting_id:setting_id });\n        const data = await getJsonData(apiUrl);\n        displayOCRTestResult(data);\n        \n    \n       \n    }\n    \n    async function displayOCRTestResult(data){\n         SettingResult.innerText=data;\n   \n    }\n    \n    \n\n})(scope);    \n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 440,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e21f5ecfdcfe0d66",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "db75fd86854df70a",
        "name": "閾値設定",
        "order": 1,
        "width": "30",
        "height": "90",
        "format": "\n<table border=\"1\" id=\"th_setting\">\n    <thead>\n        <tr>\n            <th>設定ID</th>\n            <th>設定名</th>\n            <th>アラート</th>\n            <th>下側異常閾値</th>\n            <th>下側警報閾値</th>\n            <th>上側警報閾値</th>\n            <th>上側異常閾値</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n<br>\n\n<div class=\"flex_a\">\n    <button type=\"button\" id=\"register\" class=\"button\">登録</button>\n    <button type=\"button\" id=\"cancel\" class=\"button\" >元に戻す</button>\n</div>\n\n\n<script>\n   \n\n   \n(function (scope) {\n    //const SERVER_URL =`http://${location.hostname}:8000`;\n    const SERVER_URL = `http://192.168.3.204:8000`;\n    const thresholdSettingTable=document.getElementById('th_setting');\n    const thIds=[\"setting_id\",\"setting_name\",\"is_alert\",\"abnormal_low_th\",\"alert_low_th\",\"alert_high_th\",\"abnormal_high_th\"]\n    const SettingRegisterButton = document.getElementById('register');\n    const SettingResetButton = document.getElementById('cancel');\n    //サーバーから設定データを取得し、テーブルに反映\n    loadThresholdSetting();\n    \n    //サーバーから閾値設定データをロードする関数\n    async function loadThresholdSetting(){\n        const settings=await fetchThresholdSetting();\n        console.log(settings);\n        const table=thresholdSettingTable\n        const ids=thIds\n        const extractionFunction=extracThresoldtValues\n        const DOMFunction=createThresoldDoms\n        loadSettingsForTable(settings,table,ids, extractionFunction,DOMFunction);\n    }\n    \n    //元に戻すボタンクリックでサーバーから閾値設定データをロード\n    SettingResetButton.onclick=getThresholdSetting;\n    async function getThresholdSetting() {\n        if(window.confirm(\"実行しますか？\")){\n        loadThresholdSetting();\n        }\n    }\n    \n    \n    //連想配列settingからセグメント座標設定情報を配列で返す\n    function extracThresoldtValues(setting) {\n        const setting_array=[setting.setting_id,setting.setting_name,setting.is_alert,setting.abnormal_low_th,setting.alert_low_th,setting.alert_high_th,setting.abnormal_high_th]\n        return setting_array\n    }\n    \n    //サーバーから閾値設定をロードする関数\n    async function fetchThresholdSetting(){\n        const apiUrl = buildApiUrl('get_threshold_setting');\n        const data = await getJsonData(apiUrl);\n        return data;\n    }\n    \n    //サーバーからurlで指定されるエンドポイントからデータを取得し、返す\n    async function fetchResponse(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('サーバーエラー: ' + response.statusText);\n            }\n            return response;\n        } catch (error) {\n            console.error(error);\n            throw new Error('データの取得中にエラーが発生しました: ' + error.message);\n        }\n    }\n\n    \n    async function getJsonData(url) {\n        const response = await fetchResponse(url);\n        return await response.json();\n    }\n     \n    // APIのURLを生成\n    function buildApiUrl(endpoint, params = {}) {\n        const queryString = new URLSearchParams(params).toString();\n        return `${SERVER_URL}/${endpoint}${queryString ? '?' + queryString : ''}`;\n    }\n    \n    //配列settingsに格納されているデータを引数tableの表を初期化し、格納する\n    function loadSettingsForTable(settings, table, ids, extractionFunction, DOMFunction) {\n        tableInitialize(table);\n        for (let setting of settings) {\n            let values = extractionFunction(setting);\n            let doms = DOMFunction(table, values, ids);\n            addDomsToTable(table, doms);\n        }\n    }\n    \n         //設定表の初期化関数\n    function tableInitialize(table) {\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n    \n    //DOMをテーブルに追加する関数\n    function addDomsToTable(table, doms) {\n        //行の末尾に生成したDOMを追加\n        const col = String(table.rows.length - 1);\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n    \n    //引数の表の行データをヘッダーを残して削除する関数\n    function deleteRow(table) {\n        if (table.rows.length > 1) { // Ensure there is at least one row to delete\n            table.deleteRow(-1);\n        }\n    }\n    \n    \n     //小数点設定表の列のDOMを生成する関数\n    function createThresoldDoms(table, defalut_values, ids) {\n        const col = String(table.rows.length - 1);\n        const settingIdDom=divCreate(`${ids[0]}_${col}`, defalut_values[0]);\n        const settingNameDom=divCreate(`${ids[1]}_${col}`, defalut_values[1]);\n        const isAlertDom=inputCreate('checkbox', `${ids[2]}_${col}`, null, null,defalut_values[2],checkSetting);\n        const abnormalLowerThDom=inputCreate('number', `${ids[3]}_${col}`, defalut_values[3],\"number\",null,checkSetting);\n        const alertLowerThDom=inputCreate('number', `${ids[4]}_${col}`, defalut_values[4],\"number\",null,checkSetting);\n        const alertlHigherThDom=inputCreate('number', `${ids[5]}_${col}`, defalut_values[5],\"number\",null,checkSetting);\n        const abnormalHigherThDom=inputCreate('number', `${ids[6]}_${col}`,  defalut_values[6],\"number\",null,checkSetting);\n        \n        const doms = [settingIdDom,settingNameDom, isAlertDom,abnormalLowerThDom,alertLowerThDom,alertlHigherThDom,abnormalHigherThDom];\n        return doms;\n    }\n    \n    \n    \n    //divの定義関数\n    function divCreate(id, text) {\n        let div_node = document.createElement(\"div\");\n\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n    \n    \n    //入力欄の定義関数\n    function inputCreate(type, id, value, class_name, checked, func) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n        if (type == 'text' || type == 'number') {\n            input.value = value;\n        }\n        input.className = class_name;\n        if (type == 'checkbox') {\n            input.checked = checked\n        }\n        if (func) {\n            input.onchange = func\n        }\n        return input\n    }\n    \n    \n    //inputに正の整数が入力されているかチェックし、設定が異常の場合、inputの背景色を赤にする関数\n    function checkInputAndTurnColor(doms) {\n        const validColor = 'white';\n        const invalidColor = 'red';\n        let isValid=true;\n        for (let dom of doms) {\n            if (isNumber(dom.value)) {\n                dom.style.backgroundColor = validColor;\n                continue;\n            }\n            dom.value = -1;\n            dom.style.backgroundColor = invalidColor;\n            isValid=false;\n        }\n        if (!isValid){\n            return false\n        }\n      \n        if (isThSettingValid(doms)){\n            doms.forEach((dom) => {\n                dom.style.backgroundColor = validColor;\n            });\n            return true\n        }\n        doms.forEach((dom) => {\n            dom.style.backgroundColor = invalidColor;\n        });\n        return false\n    }\n\n    //引数textが正の整数かどうか判定する関数\n    function isNumber(text) {\n        const ret = text.length != 0\n        return ret;\n    }\n    \n    //閾値設定が適切か判定する関数\n    function isThSettingValid(doms){\n        const isAlert=doms[0].checked;\n        const abnormalLowerTh=Number(doms[1].value);\n        const alertLowerTh=Number(doms[2].value);\n        const alertlHigherTh=Number(doms[3].value);\n        const abnormalHigherTh=Number(doms[4].value);\n        console.log(abnormalLowerTh, alertLowerTh,alertlHigherTh,abnormalHigherTh)\n        if (isAlert){\n            const isValid=abnormalLowerTh < alertLowerTh && alertLowerTh<alertlHigherTh&&alertlHigherTh<abnormalHigherTh;\n            if (isValid){\n                return true\n            }\n            return false\n        }\n        return true\n    }\n\n    //表に格納されているinputが正の整数かどうか判定する関数。設定が異常の場合、inputの背景色を赤にする\n    function checkTableInputs(table, ids) {\n        let isValid=true\n        for (let i = 1; i < table.rows.length; i++) {\n            let doms = ids.map(id => document.getElementById(`${id}_${i - 1}`));\n            isValid=checkInputAndTurnColor(doms.slice(2));\n        }\n        return isValid;\n    }\n\n\n    //登録ボタンクリックでサーバーに入力された設定を新規登録\n    SettingRegisterButton.onclick = RegisterSetting;\n    async function RegisterSetting() {\n        if (window.confirm(\"実行しますか？\")) {\n            if (checKSetting()) {\n                const data = storeTableSetting(table,ids);\n                const apiUrl = `${SERVER_URL}/register_threshold_setting`\n                const response = await postData(apiUrl, data);\n                window.alert(response)\n            } else {\n                window.alert(\"設定が不正です\")\n            }\n        }\n    }\n    \n    function checkSetting(){\n        const table=thresholdSettingTable;\n        const ids=thIds\n        return checkTableInputs(table,ids);        \n    }\n    \n    \n    //サーバーにデータをPOSTする関数\n    async function postData(url, data) {\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                return jsonResponse\n            } else {\n                console.error('HTTPエラー！ ステータスコード: ', response.status);\n            }\n        } catch (error) {\n            console.error('エラーが発生しました: ', error);\n        }\n    }\n\n    \n     //設定表の内容を辞書にロードする関数\n    function storeTableSetting(table, keys) {\n        const array_data = getTableChildElements(table);\n        const dict_data = convertArrayToDict(keys, array_data);\n        return dict_data;\n    }\n\n    //表のデータを配列にロードする関数\n    function getTableChildElements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; i++) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; j++) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    row_data.push(getDomValue(dom));\n                }\n            }\n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //２次元配列を辞書に変換する関数\n    function convertArrayToDict(keys, data) {\n        const newData = data.map((item) => {\n            let obj = {};\n            keys.forEach((key, i) => (obj[key] = item[i]));\n            return obj;\n        });\n        return newData;\n    }\n\n    //DOMの値を取得する関数\n    function getDomValue(dom) {\n        switch (dom.tagName) {\n            case 'DIV':\n                return dom.innerText || null;\n            case 'INPUT':\n                return dom.type === 'checkbox' ? dom.checked : dom.value || null;\n            case 'SELECT':\n                return dom.value || null;\n            default:\n                return null; // Consider returning null or a default value if the element type is not supported.\n        }\n    }\n\n    \n    \n\n})(scope);\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a2f0651d12541191",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "7fcf05f70a697e61",
        "name": "システム設定",
        "order": 1,
        "width": "30",
        "height": "90",
        "format": "\n<h1>アラートメール送信設定</h1>\n\n<h2>送信者設定</h2>\n<p>\n <label for=\"smtp_server\">SMTPサーバー</label>\n<input type='text' id='smtp_server'>\n</p>\n\n<p>\n <label for=\"smtp_port\">SMTPサーバーPORT</label>\n<input type='number' id='smtp_port'>\n</p>\n\n<p>\n <label for=\"sender_address\">送信元アドレス</label>\n<input type='text' id='sender_address'>\n</p>\n\n<p>\n <label for=\"sender_password\">送信元パスワード</label>\n<input type='password' id='sender_password'>\n</p>\n\n<h2>受信者設定</h2>\n\n<p>\n <label for=\"reciever_address\">宛先アドレス</label>\n<input type='text' id='reciever_address'>\n</p>\n<button type=\"button\" id=\"add_address\" size=\"10\" class=\"button\" >宛先アドレス追加</button>\n<table border=\"1\" width=\"800\" id=\"mail_table\">\n\n    <thead>\n        <tr>\n            <th>宛先アドレス</th>\n            <th>無効</th>\n            <th>削除</th>\n\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<div class=\"button_wrapper\">\n    <button type=\"button\" id=\"register\" size=\"10\" class=\"button\">登録</button>\n    <button type=\"button\" id=\"cancel\" size=\"10\" class=\"button\"  >元に戻す</button>\n\n</div>\n<br>\n<h1>システムコマンド</h1>\n<button id=\"reboot\" class=\"button\">再起動</button><br>\n<button id=\"shutdown\" class=\"button\">シャットダウン</button><br>\n\n\n\n\n\n<script>\n\n(function (scope) {\n    //const SERVER_URL =`http://${location.hostname}:8000`;\n    const SERVER_URL = `http://192.168.3.204:8000`;\n    const mailSettingTable=document.getElementById(\"mail_table\");\n    const mailIds=[\"address\",\"is_disable\",\"is_delete\"]\n    const smtpServerInput=document.getElementById('smtp_server');\n    const smtpPortInput=document.getElementById('smtp_port');\n    const senderAddressInput=document.getElementById('sender_address');\n    const senderPasswordInput=document.getElementById('sender_password');\n    const SettingRegisterButton = document.getElementById('register');\n    const SettingResetButton = document.getElementById('cancel');\n    const mailAddressAddButton=document.getElementById('add_address');\n    initialize()\n    //サーバーから設定データを取得し、テーブルに反映\n    loadMailSetting();\n  \n    //サーバーから閾値設定データをロードする関数\n    async function loadMailSetting(){\n        const settings=await fetchMailSetting();\n        console.log(settings);\n        const reciever_settings=settings.receiver_setting;\n        console.log( reciever_settings)\n        const table=mailSettingTable\n        const ids=mailIds\n        const extractionFunction=extractMailValues\n        const DOMFunction=createMailDoms\n        loadSettingsForTable(reciever_settings,table,ids, extractionFunction,DOMFunction);\n        \n        const sender_settings=settings.sender_setting;\n         smtpServerInput.value=sender_settings.smtp_server\n        smtpPortInput.value=sender_settings.smtp_port\n        senderAddressInput.value=sender_settings.sender_address\n        senderPasswordInput.value=sender_settings.sender_password\n        \n    }\n    \n    function initialize(){\n        const doms=[smtpServerInput,smtpPortInput,senderAddressInput,senderPasswordInput]\n        doms.forEach((dom) => dom.onchange=checkSetting);\n    }\n    \n    //元に戻すボタンクリックでサーバーから閾値設定データをロード\n    SettingResetButton.onclick=getThresholdSetting;\n    async function getThresholdSetting() {\n        if(window.confirm(\"実行しますか？\")){\n        loadThresholdSetting();\n        }\n    }\n    \n    \n    //連想配列settingからセグメント座標設定情報を配列で返す\n    function extractMailValues(setting) {\n        const setting_array=[setting.address,setting.id_valid,false]\n        return setting_array\n    }\n    \n    //サーバーから閾値設定をロードする関数\n    async function fetchMailSetting(){\n        const apiUrl = buildApiUrl('get_mail_setting');\n        const data = await getJsonData(apiUrl);\n        return data;\n    }\n    \n    //サーバーからurlで指定されるエンドポイントからデータを取得し、返す\n    async function fetchResponse(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('サーバーエラー: ' + response.statusText);\n            }\n            return response;\n        } catch (error) {\n            console.error(error);\n            throw new Error('データの取得中にエラーが発生しました: ' + error.message);\n        }\n    }\n\n    \n    async function getJsonData(url) {\n        const response = await fetchResponse(url);\n        return await response.json();\n    }\n     \n    // APIのURLを生成\n    function buildApiUrl(endpoint, params = {}) {\n        const queryString = new URLSearchParams(params).toString();\n        return `${SERVER_URL}/${endpoint}${queryString ? '?' + queryString : ''}`;\n    }\n    \n    //配列settingsに格納されているデータを引数tableの表を初期化し、格納する\n    function loadSettingsForTable(settings, table, ids, extractionFunction, DOMFunction) {\n        tableInitialize(table);\n        for (let setting of settings) {\n            let values = extractionFunction(setting);\n            let doms = DOMFunction(table, values, ids);\n            addDomsToTable(table, doms);\n        }\n    }\n    \n         //設定表の初期化関数\n    function tableInitialize(table) {\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n    \n    \n    //DOMをテーブルに追加する関数\n    function addDomsToTable(table, doms) {\n        //行の末尾に生成したDOMを追加\n        const col = String(table.rows.length - 1);\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n    \n    //引数の表の行データをヘッダーを残して削除する関数\n    function deleteRow(table) {\n        if (table.rows.length > 1) { // Ensure there is at least one row to delete\n            table.deleteRow(-1);\n        }\n    }\n    \n    \n     //小数点設定表の列のDOMを生成する関数\n    function createMailDoms(table, defalut_values, ids) {\n        const col = String(table.rows.length - 1);\n        const mailDom=divCreate(`${ids[0]}_${col}`,defalut_values[0]);\n        const isValidDom=inputCreate('checkbox', `${ids[1]}_${col}`, null, null,defalut_values[1],checkSetting);\n        const isDeleteDom=inputCreate('checkbox', `${ids[2]}_${col}`, null, null,defalut_values[2],checkSetting);\n        const doms = [mailDom,isValidDom,isDeleteDom];\n        return doms;\n    }\n    \n    //入力欄の定義関数\n    function inputCreate(type, id, value, class_name, checked, func) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n        if (type == 'text' || type == 'number') {\n            input.value = value;\n        }\n        input.className = class_name;\n        if (type == 'checkbox') {\n            input.checked = checked\n        }\n        if (func) {\n            input.onchange = func\n        }\n        return input\n    }\n    \n    function divCreate(id, text) {\n        let div_node = document.createElement(\"div\");\n\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n    \n    //inputに正の整数が入力されているかチェックし、設定が異常の場合、inputの背景色を赤にする関数\n    function checkInputAndTurnColor(doms) {\n        const validColor = 'white';\n        const invalidColor = 'red';\n        let isValid=true;\n        for (let dom of doms) {\n            if (isNotNull(dom.value)) {\n                dom.style.backgroundColor = validColor;\n                continue;\n            }\n            //dom.value = -1;\n            dom.style.backgroundColor = invalidColor;\n            isValid=false;\n        }\n        if (!isValid){\n            return false\n        }\n        return true\n    }\n\n    //引数textが正の整数かどうか判定する関数\n    function isNotNull(text) {\n        const ret = text!= \"\";\n        return ret;\n    }\n    \n    function checkSetting(){\n        const doms=[smtpServerInput,smtpPortInput,senderAddressInput,senderPasswordInput]\n        return checkInputAndTurnColor(doms) \n    }\n\n    //登録ボタンクリックでサーバーに入力された設定を新規登録\n    SettingRegisterButton.onclick = RegisterSetting;\n    async function RegisterSetting() {\n        if (window.confirm(\"実行しますか？\")) {\n            if(checkSetting()){\n                const table=mailSettingTable;\n                const ids=mailIds\n                const data = storeData();\n                console.log(data)\n                const apiUrl = `${SERVER_URL}/register_mail_settings`\n                const response = await postData(apiUrl, data);\n                window.alert(response)\n                return\n            }\n            window.alert(\"設定が不正です\")\n        }\n    }\n    \n    //サーバーにデータをPOSTする関数\n    async function postData(url, data) {\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                return jsonResponse\n            } else {\n                console.error('HTTPエラー！ ステータスコード: ', response.status);\n            }\n        } catch (error) {\n            console.error('エラーが発生しました: ', error);\n        }\n    }\n    \n    function storeData(){\n        let setting={};\n        let senderSetting={};\n        senderSetting[smtpServerInput.id]=smtpServerInput.value;\n        senderSetting[smtpPortInput.id]=smtpPortInput.value;\n        senderSetting[senderAddressInput.id]=senderAddressInput.value;\n        senderSetting[senderPasswordInput.id]=senderPasswordInput.value;\n        setting.sender_setting= senderSetting\n        \n        const table=mailSettingTable;\n        const ids=mailIds\n        let receiverSetting=storeTableSetting(table, ids);\n        setting.receiver_setting= receiverSetting;\n        return setting\n    }\n\n    \n     //設定表の内容を辞書にロードする関数\n    function storeTableSetting(table, keys) {\n        const array_data = getTableChildElements(table);\n        const dict_data = convertArrayToDict(keys, array_data);\n        return dict_data;\n    }\n\n    //表のデータを配列にロードする関数\n    function getTableChildElements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; i++) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; j++) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    row_data.push(getDomValue(dom));\n                }\n            }\n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //２次元配列を辞書に変換する関数\n    function convertArrayToDict(keys, data) {\n        const newData = data.map((item) => {\n            let obj = {};\n            keys.forEach((key, i) => (obj[key] = item[i]));\n            return obj;\n        });\n        return newData;\n    }\n\n    //DOMの値を取得する関数\n    function getDomValue(dom) {\n        switch (dom.tagName) {\n            case 'DIV':\n                return dom.innerText || null;\n            case 'INPUT':\n                return dom.type === 'checkbox' ? dom.checked : dom.value || null;\n            case 'SELECT':\n                return dom.value || null;\n            default:\n                return null; // Consider returning null or a default value if the element type is not supported.\n        }\n    }\n    \n    mailAddressAddButton.onclick=add_address;\n     function add_address() {\n        let address = document.getElementById(\"reciever_address\").value;\n        const table=mailSettingTable;\n        const ids=mailIds\n        const default_values=[address,false,false]\n        const doms = createMailDoms(table, default_values, ids)\n        \n        if (!isNotNull(address)) {\n            window.alert(\"アドレスが入力されていません\");\n            return \n        }\n       const addresses= get_addresses(table);\n       console.log(addresses)\n        if (addresses.includes(address)) {\n            window.alert(\"アドレスが既に登録されています\");\n        return\n        }\n        addDomsToTable(table, doms)\n        \n    }\n    \n    //メール設定データをテーブルに反映させる関数\n    function get_addresses(table) {\n        let addresses = [];\n        for (let i = 1; i < table.rows.length; ++i) {\n            console.log(table.rows[i].cells[0].children[0].innerText);\n            let address = table.rows[i].cells[0].children[0].innerText;\n            addresses.push(address);\n        }\n        return addresses;\n    }\n\n})(scope);\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 480,
        "wires": [
            [
                "f412ef0a4fea050b"
            ]
        ]
    },
    {
        "id": "f412ef0a4fea050b",
        "type": "switch",
        "z": "6e2a86939db2feb2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shutdown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 500,
        "wires": [
            [
                "14c9ac84d6a981cb"
            ],
            [
                "6cd1a0ff755ae8cd"
            ]
        ]
    },
    {
        "id": "6cd1a0ff755ae8cd",
        "type": "exec",
        "z": "6e2a86939db2feb2",
        "command": "sudo shutdown -h now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1000,
        "y": 560,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "14c9ac84d6a981cb",
        "type": "exec",
        "z": "6e2a86939db2feb2",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 970,
        "y": 500,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "08e08ebf58b3f389",
        "type": "exec",
        "z": "6e2a86939db2feb2",
        "command": "sudo python3 /home/pi/7seg/fast-api/app.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "de180cee84438824"
            ],
            [
                "de180cee84438824"
            ],
            [
                "de180cee84438824"
            ]
        ]
    },
    {
        "id": "5655d8bfaf55eea2",
        "type": "inject",
        "z": "6e2a86939db2feb2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 360,
        "wires": [
            [
                "08e08ebf58b3f389"
            ]
        ]
    },
    {
        "id": "de180cee84438824",
        "type": "debug",
        "z": "6e2a86939db2feb2",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 360,
        "wires": []
    },
    {
        "id": "70c3fd6be02e780d",
        "type": "mqtt in",
        "z": "6e2a86939db2feb2",
        "name": "",
        "topic": "network_status",
        "qos": "2",
        "datatype": "auto",
        "broker": "86fbcd55.ef339",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 440,
        "y": 640,
        "wires": [
            [
                "d9a1121d148e502a"
            ]
        ]
    },
    {
        "id": "d9a1121d148e502a",
        "type": "debug",
        "z": "6e2a86939db2feb2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "927f1e4850d3aaf0",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "d77f5ceffab61fb7",
        "name": "データ表示",
        "order": 2,
        "width": "27",
        "height": "27",
        "format": "\n<select name=\"クライアント名\" id=\"client_select\" ></select>\n\n<p id=\"a_title\">アナログ値</p>\n\n<div class=\"a_body\">\n<div class=\"a_wrapper\" id=\"a_wrapper\"></div>\n</div>\n\n<p id=\"d_title\">デジタル値</p>\n\n<div class=\"d_body\">\n<div class=\"d_wrapper\" id=\"d_wrapper\"></div>\n</div>\n\n<script>\n\n\n(function(scope) {\n    \n    \n     //const SERVER_URL =`http://${location.hostname}:8000`;\n    const SERVER_URL = `http://192.168.3.204`;\n    const MQTT_SERVER_URL=\"http://192.168.3.35\";\n    const FAST_API_PORT=\"8000\"\n    const MQTT_PORT=\"9001\"\n    \n    loadDashboardSetting()\n    //サーバーから閾値設定データをロードする関数\n    async function loadDashboardSetting(){\n        const settings=await fetchDashboardSetting();\n        console.log(settings);\n    }\n    \n    \n    //サーバーから閾値設定をロードする関数\n    async function fetchDashboardSetting(){\n        const apiUrl = buildApiUrl('get_dashboard_setting');\n        const data = await getJsonData(apiUrl);\n        return data;\n    }\n    \n    //サーバーからurlで指定されるエンドポイントからデータを取得し、返す\n    async function fetchResponse(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error('サーバーエラー: ' + response.statusText);\n            }\n            return response;\n        } catch (error) {\n            console.error(error);\n            throw new Error('データの取得中にエラーが発生しました: ' + error.message);\n        }\n    }\n\n    \n    async function getJsonData(url) {\n        const response = await fetchResponse(url);\n        return await response.json();\n    }\n     \n    // APIのURLを生成\n    function buildApiUrl(endpoint, params = {}) {\n        const queryString = new URLSearchParams(params).toString();\n        return `${SERVER_URL}:${FAST_API_PORT}/${endpoint}${queryString ? '?' + queryString : ''}`;\n    }\n    \n    \n    \n    /*\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n        var client = mqtt.connect(`${SERVER_URL}:${MQTT_PORT}` );\n\n        client.on('connect', () => {\n            console.log('connected');\n            client.subscribe('mqtt_test');\n        });\n\n        client.on('message', (topic, message) => {\n            console.log(topic + ' : ' + message);\n        });\n\n        function OnButtonClick() {\n            console.log('onClick');\n            client.publish('mqtt/demo', 'hello world!');\n        }\n        \n        \n       \n        socket.onmessage = function (event) {\n            console.log(JSON.parse(event.data));\n            const all_data = JSON.parse(event.data);\n            const timestamp = all_data[1];\n            const all_sensor_data = all_data[0];\n            for (let i = 0; i < all_sensor_data.length; ++i) {\n                let sensor_data = all_sensor_data[i];\n                let sensor_id = sensor_data[0];\n                let timestamp_div = document.getElementById(`${sensor_id}_timestamp`);\n                if (timestamp_div != null) {\n                    timestamp_div.innerText = timestamp;\n                }\n\n                let attributes = sensor_data[1];\n                for (let j = 0; j < attributes.length; ++j) {\n                    let value = attributes[j][0];\n                    let attribute_id = attributes[j][1];\n                    let status = attributes[j][2];\n\n                    let element = document.getElementById(attribute_id);\n                    if (element != null) {\n                        if (value == null) {\n                            element.innerText = \"--\";\n                        } else {\n                            element.innerText = value;\n                        }\n                        if (status == 2) {\n                            element.style.color = \"red\";\n                        }\n                        if (status == 1 || status == 4) {\n                            element.style.color = \"#FFCC00\";\n                        }\n                    }\n                }\n            }\n        };\n\n        \n\n\n\n    }\n   \n\n    //タイムスタンプとセンサの状態（検知、未検知）をダッシュボードに反映する関数\n    function display_sensor_status(values) {\n        for (let i = 0; i < values.length; ++i) {\n            let sensor_id = values[i][0];\n            let sensor_status = values[i][1];\n            let timestamp = values[i][2];\n            let timestamp_div = document.getElementById(`${sensor_id}_timestamp`);\n            if (timestamp_div != null) {\n                timestamp_div.innerText = timestamp;\n            }\n            console.log(sensor_status);\n            let element = document.getElementById(`${sensor_id}_border`);\n            if (element != null) {\n                if (sensor_status == 0) {\n                    element.style.borderColor = \"silver\";\n                }\n                if (sensor_status == 4) {\n                    element.style.borderColor = \"#FFCC00\";\n                }\n\n                if (sensor_status == 5) {\n                    element.style.borderColor = \"#0094CE\";\n                }\n            }\n        }\n    }\n\n    //属性の値と状態（正常、異常、警報）をダッシュボードに反映する関数\n    function display_sensor_values(values) {\n        for (let i = 0; i < values.length; ++i) {\n            let attribute_id = values[i][0];\n            let attribute_value = values[i][1];\n            let attribute_status = values[i][2];\n\n            let element = document.getElementById(attribute_id);\n            if (element != null) {\n                if (attribute_value == null) {\n                    element.innerText = \"--\";\n                } else {\n                    element.innerText = attribute_value;\n                }\n                if (attribute_status == 2) {\n                    element.style.color = \"red\";\n                }\n                if (attribute_status == 1 || attribute_status == 4) {\n                    element.style.color = \"#FFCC00\";\n                }\n            }\n        }\n    }\n\n    //ダッシュボードに表示するボックスの設定をサーバーからロードする関数\n    $.get(`${api_server}/dashboard_setting/`,\n        function (data) {\n            console.log(data);\n            const sensor_settings = data[0];\n            const attribute_settings = data[1];\n            create_sensor_box(\"a_wrapper\", sensor_settings);\n            add_attributes(attribute_settings);\n        });\n\n    //サーバーからロードしたセンサの設定からセンサの表示ボックスを生成する関数\n    function create_sensor_box(parent_id, settings) {\n        initialize(\"a_wrapper\");\n        let element = document.getElementById(parent_id);\n        for (let i = 0; i < settings.length; ++i) {\n            let sensor_id = settings[i][0];\n            let sensor_name = settings[i][1];\n            let child = document.createElement(\"div\");\n            child.className = \"item\";\n            child.id = `${sensor_id}_border`;\n            child.innerHTML = ` \n                            <div id=${sensor_id} class=\"sensor-name\">${sensor_name} </div>\n                            <div class=\"timestamp\">更新時刻:&nbsp;<span id=${sensor_id}_timestamp class=\"sensor-timestamp\">--</span></div>\n                            `;\n            element.appendChild(child);\n        }\n    }\n\n    //DOMの要素を初期化する関数\n    function initialize(id) {\n        let element = document.getElementById(id);\n        element.innerHTML = \"\";\n    }\n\n    //センサ表示窓に属性を追加する関数\n    function add_attributes(attribute_settings) {\n        for (let i = 0; i < attribute_settings.length; ++i) {\n            let attribute_id = attribute_settings[i][0];\n            let sensor_id = attribute_settings[i][1];\n            let attribute_name = attribute_settings[i][3];\n            let attribute_unit = attribute_settings[i][9]\n            let element = document.getElementById(sensor_id);\n            let child = document.createElement(\"div\");\n            child.innerHTML = ` \n                            <p class=\"data-name\">${attribute_name}:&nbsp;\n                                <span class=\"data-value\" id=${attribute_id} >--</span><span class=\"data-unit\">&nbsp;${attribute_unit}</span>\n                            </p>\n                           `;\n            element.appendChild(child);\n        }\n    }\n\n    */\n    \n  \n})(scope);\n\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "58ea2f11559e6e59",
        "type": "ui_template",
        "z": "6e2a86939db2feb2",
        "group": "",
        "name": "ヘッダー部",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"/css/epoch.css\">\n<style type=\"text/css\">\n    .spectrogram {\n        height: 200px; \n        width: 780px; \n        margin: auto;\n        background-color: #fff;\n        position: absolute; \n        z-index: 45;\n        top: 40px;\n    }\n    \n    .unit {\n        position: absolute; \n        z-index: 55;\n    }\n    \n    .masonry-container {\n        width: 1400px;\n    }\n    \n    .chart {\n        height: 300px;\n        width: 900px;\n        margin: auto;\n        background-color: #fff;\n    }\n    \n    .nr-dashboard-theme .nr-dashboard-textinput input {\n        border-color: #006fff;\n        border-bottom-width: 1px;\n        height: 38px;\n        font-size: 14px;\n        padding-top: 10px;\n        \n    }\n    \n    md-toast {\n        border: none !important;\n    }\n    \n    .my-text {\n        margin: 0 !important;\n        font-weight: bold; \n        text-align: right;   \n        line-height: 30px;\n    }\n    .my-text-title {\n        font-weight: normal; \n        float:left;\n        padding-left:12px;\n    }\n    .data-value {\n        vertical-align: bottom;\n        top: 10px;\n        font-size: 30px;\n    }\n    .my-text-header{\n        font-size : 30px;\n    }\n    .data-unit{\n        font-size: 15px;\n        vertical-align: bottom;\n        \n    }\n    \n    .data-name{\n        font-size : 20px;\n  \n    }\n    \n    .text_input{\n        width: 250px;\n    }\n        \n    }\n    \n    .a_wrapper {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  grid-auto-rows: 100px;\n  margin: 10px;\n  line-height:30px;\n  text-align:center;\n    }\n    \n  .button{\n    width: 250px;\n    padding: 5px;\n    /*box-sizing: border-box;\n    border: 1px solid #68779a;\n    cursor: pointer;*/\n    }\n  \n\n  .d_wrapper {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  grid-auto-rows: 100px;\n  margin: 10px;\n  line-height:30px;\n  text-align:center;\n  \n  }\n   .camera_wrapper {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 10px;\n  grid-auto-rows: 400px;\n  margin: 10px;\n  line-height:30px;\n    }\n    \n  \n   .log_wrapper {\n  display: grid;\n  background-color: #f5f5f5;\n  grid-template-columns: repeat(1, 1fr);\n  gap: 10px;\n  grid-auto-rows: 400px;\n  line-height:30;\n\n  \n  }\n  .test{\n      background-color: #fff;\n      \n  }\n  .number{\n      width: 5em;\n  }\n  \n  .input_unit{\n    width: 10px;\n  }\n  .color_select{\n      width: 100px;\n      \n      \n  }\n  .pivot_input{\n       width: 50px;\n  }\n  \n\n  \n\n    .item{\n        /*background:#fff;*/\n        background-color: #fff;\n  \n    }\n    \n    .circle{\n        display: inline-block;\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        background: silver;\n        text-align:center;\n        border: solid 3px black;\n        \n        \n        \n    }\n    .flexb{\n         display: flex;\n         flex-wrap: nowrap;\n         align-items: flex-start;\n         width: 850px;\n         height: 100px;\n        justify-content: center;\n    \n         \n         \n        \n        \n    }\n      .flexc{\n         display: flex;\n         flex-wrap: nowrap;\n         align-items: flex-start;\n         width: 1425px;\n         height: 100px;\n         justify-content: center;\n    \n         \n         \n        \n        \n    }\n    .wrapper1{\n        display: flex;\n        justify-content:flex-start;\n        gap:10px;\n  　    \n    }\n        \n    }\n    \n    .a_body{\n        background-color: #f5f5f5;\n        \n    }\n    \n     .d_body{\n        background-color: #f5f5f5;\n        \n    }\n    .mail{\n        width:400px;\n    }\n\n\ntd {\n    text-align:center;        /* 文字の揃え位置指定 */\n}\n \n.center1{\n    margin:0 auto;\n}\n   .title{\n       font-size: 30px;\n       \n       \n   } \n   \n     .a_wrapper1 {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  grid-auto-rows: 200px;\n  margin: 10px;\n  line-height:30px;\n  text-align:center;\n    }\n    \n    .d_wrapper1 {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  grid-auto-rows: 200px;\n  margin: 10px;\n  line-height:30px;\n  text-align:center;\n  \n  \n  }\n \n</style>\n<script type=\"text/javascript\" src=\"/js/epoch.js\"></script>\n<script type=\"text/javascript\" src=\"/js/opencv.js\" onload=\"onOpenCvReady();\"></script>\n<script type=\"text/javascript\" src=\"/js/plotly.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/mqtt.min.js\"></script>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 590,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "351c31681da38f15",
        "type": "mqtt out",
        "z": "6e2a86939db2feb2",
        "name": "",
        "topic": "mqtt_test",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "86fbcd55.ef339",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "5d8cd4d75b12f9e4",
        "type": "inject",
        "z": "6e2a86939db2feb2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "351c31681da38f15"
            ]
        ]
    },
    {
        "id": "5b179211.4ee01c",
        "type": "mqtt in",
        "z": "16474d16.e8b2f3",
        "name": "",
        "topic": "/+/data",
        "qos": "2",
        "datatype": "auto",
        "broker": "86fbcd55.ef339",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 180,
        "wires": [
            [
                "d5f2dcb2c61a3dfb",
                "f0dc33e3.78a4d"
            ]
        ]
    },
    {
        "id": "f0dc33e3.78a4d",
        "type": "json",
        "z": "16474d16.e8b2f3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "6bcf7cf8.e70ab4"
            ]
        ]
    },
    {
        "id": "1c6c1841.a8d1a8",
        "type": "change",
        "z": "16474d16.e8b2f3",
        "name": "小数点切り捨て",
        "rules": [
            {
                "t": "set",
                "p": "payload.ch0",
                "pt": "msg",
                "to": "$round(payload.ch0, 2)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.ch1",
                "pt": "msg",
                "to": "$round(payload.ch1, 2)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 80,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "f0c1d563.ec3c98",
        "type": "e-mail",
        "z": "16474d16.e8b2f3",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "serikawa@rix.co.jp",
        "dname": "",
        "x": 450,
        "y": 1740,
        "wires": []
    },
    {
        "id": "f61790b7.34ebd",
        "type": "e-mail",
        "z": "16474d16.e8b2f3",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "iwamurakazuya0106@gmail.com",
        "dname": "",
        "x": 420,
        "y": 1940,
        "wires": []
    },
    {
        "id": "438eea8b.6dc924",
        "type": "e-mail",
        "z": "16474d16.e8b2f3",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "oshima@rix.co.jp ",
        "dname": "",
        "x": 430,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8cd8a872.f63878",
        "type": "e-mail",
        "z": "16474d16.e8b2f3",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "fujino@rix.co.jp ",
        "dname": "",
        "x": 420,
        "y": 1860,
        "wires": []
    },
    {
        "id": "bf6b48e0.bb6fd8",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "",
        "func": "A=global.get(\"waterthenable\")\nB=global.get(\"waterlowth\")\nC=global.get(\"waterhighth\")\n   if(A==true&&(global.get(\"emailsendflag\")==1)&&(msg.payload.ch0<B||msg.payload.ch0>C)){\n         msg.payload='現在の水温は'+Number(msg.payload.ch0)+'℃です'\n         msg.topic = \"水温の異常を検知しました\"\n        global.set(\"emailsendflag\",0)\n        return msg;}\n           \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 1960,
        "wires": [
            [
                "f61790b7.34ebd"
            ]
        ]
    },
    {
        "id": "1f59b927.47e077",
        "type": "ui_toast",
        "z": "16474d16.e8b2f3",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "温度センサーで通信エラーが発生しました。",
        "name": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "29dcd24b.7381fe",
        "type": "change",
        "z": "16474d16.e8b2f3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "3f9f435d.e431fc",
        "type": "influxdb out",
        "z": "16474d16.e8b2f3",
        "influxdb": "3a38c40f.b7ce4c",
        "name": "",
        "measurement": "",
        "precision": "s",
        "retentionPolicy": "",
        "database": "furnace",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1250,
        "y": 180,
        "wires": []
    },
    {
        "id": "671a1b46.552044",
        "type": "delay",
        "z": "16474d16.e8b2f3",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 80,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "1c239491.cde2ab",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "センサデータ保存前処理",
        "func": "let time=msg.time;\nlet id=msg.key;\nlet client_data=msg.payload;\n\nif(client_data!=undefined){\n    msg.payload={\"time\":time,[id]:client_data};\n}\nmsg.measurement=id;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6bcf7cf8.e70ab4",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "データ加工",
        "func": "let date = new Date() ;\nlet a = date.getTime() ;\nlet b = Math.floor( a / 1000 ) ;\nmsg.time=b;\nlet client=msg.topic.split('/')[1];\nmsg.client=client;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "59fa77e3.56f538",
                "2a166e14.6eb512"
            ]
        ]
    },
    {
        "id": "1ec1277a.9fa229",
        "type": "change",
        "z": "16474d16.e8b2f3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "key",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 220,
        "wires": [
            [
                "8ec4878.585c178",
                "14526b78.814b05"
            ]
        ]
    },
    {
        "id": "14526b78.814b05",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "異常フィルター",
        "func": "key=msg.key;\nsetting=global.get(\"setting_data\");\nlet client=msg.client;\n\nlet client_data=setting[client][\"data\"][key];\n\nlet is_mail=client_data[\"is_mail\"];\nlet low_th=client_data[\"th_low\"];\nlet high_th=client_data[\"th_high\"];\nlet type=client_data[\"type\"];\nlet val=msg.payload;\nmsg.count=global.get(\"count\",)\nif (is_mail==1){\n    if((type==\"AIN\"||type==\"AOUT\")&&(val<low_th||val>high_th)){\n        let count=global.get(`count_${msg.topic}`);\n        msg.count=count;\n        return msg;\n            \n    }\n    if((type==0||type==\"DIN\"||type==\"DOUT\")&&(val==low_th)){\n        let count=global.get(`count_${msg.topic}`);\n        msg.count=count;\n        return msg;\n    }\n}\n\n\n\n\n    \n\n\n\n    \n    \n    \n    \n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// ここに記述したコードは、ノードをデプロイした時に\n// 一度だけ実行されます。\nlet setting=global.get(\"setting_data\");\nlet client_list=Object.keys(setting).sort();\nfor(let i=0;i<client_list.length;++i){\n    let id_list=Object.keys(setting[client_list[i]][\"data\"]).sort();\n    for(let i=0;i<id_list.length;++i){\n        global.set(`count_${id_list[i]}`,0);\n    }\n}\n\n\n\n",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "70b7718c.d1603",
                "8f55c68a.4162a8"
            ]
        ]
    },
    {
        "id": "61b948a9.f18968",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "gmail送信処理",
        "func": "const setting=global.get(\"setting_data\");\nconst key=msg.key;\nconst client=msg.client;\nconst client_data=setting[client][\"data\"][key];\nconst client_name=setting[client][\"name\"];\nconst type=client_data[\"type\"];\nlet unit=client_data[\"unit\"];\nconst name=client_data[\"name\"];\nlet value=msg.payload;\nlet date=new Date();\nlet time=getStringFromDate(date);\nlet count=global.get(`count_${msg.topic}`);\ncount++;\nglobal.set(`count_${msg.topic}`,count);\n\nif (type===\"DIN\"||type===\"DOUT\"){\n    unit=\"\";\n    if (value==0){\n        value=\"OFF\";\n    }else{\n        value=\"ON\";\n    }\n    \n}else{\n    value=value.toFixed(2);\n}\nconst mail_setting=global.get(\"mail_setting\");\nconst send_list=[];\nfor(let i = 0; i < mail_setting[1].length; ++i){\n    let address=mail_setting[1][i][0];\n    let is_valid=mail_setting[1][i][1];\n    if (is_valid==\"0\"){\n        send_list.push(address);\n    }\n}\n\nmsg.topic=\"モニタリング値異常\"\nmsg.to=send_list;\nmsg.payload=`${time}に${client_name}の${name}が${value}${unit}になりました。`\nif (send_list.length!==0){\n    return msg;\n}\n\nfunction getStringFromDate(date) {\n \n var year_str = date.getFullYear();\n //月だけ+1すること\n var month_str = 1 + date.getMonth();\n var day_str = date.getDate();\n var hour_str = date.getHours();\n var minute_str = date.getMinutes();\n var second_str = date.getSeconds();\n \n month_str = ('0' + month_str).slice(-2);\n day_str = ('0' + day_str).slice(-2);\n hour_str = ('0' + hour_str).slice(-2);\n minute_str = ('0' + minute_str).slice(-2);\n second_str = ('0' + second_str).slice(-2);\n \n format_str = 'hh:mm:ss';\n format_str = format_str.replace(/hh/g, hour_str);\n format_str = format_str.replace(/mm/g, minute_str);\n format_str = format_str.replace(/ss/g, second_str);\n \n return format_str;\n}\n\n\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 220,
        "wires": [
            [
                "fe6d047c.34d828"
            ]
        ]
    },
    {
        "id": "fe6d047c.34d828",
        "type": "e-mail",
        "z": "16474d16.e8b2f3",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1750,
        "y": 220,
        "wires": []
    },
    {
        "id": "f3cccdb4.d22db",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "設定読出",
        "func": "let setting=global.get(\"setting_data\");\nmsg.setting=setting;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9c2f16cf.d6f088",
        "type": "ui_ui_control",
        "z": "16474d16.e8b2f3",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 260,
        "wires": [
            [
                "9769bfe1.0860e",
                "28c56eda.f6b2f2"
            ]
        ]
    },
    {
        "id": "9769bfe1.0860e",
        "type": "switch",
        "z": "16474d16.e8b2f3",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ダッシュボード",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "f3cccdb4.d22db"
            ]
        ]
    },
    {
        "id": "28c56eda.f6b2f2",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "d5f2dcb2c61a3dfb",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "df40e4d50cf9adb4",
        "type": "exec",
        "z": "16474d16.e8b2f3",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "自動再起動",
        "x": 370,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "806e0199b83a3780",
        "type": "inject",
        "z": "16474d16.e8b2f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "df40e4d50cf9adb4"
            ]
        ]
    },
    {
        "id": "65603303b49244bf",
        "type": "exec",
        "z": "16474d16.e8b2f3",
        "command": "sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get -y autoremove && sudo apt-get autoclean",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "自動更新",
        "x": 360,
        "y": 540,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a830fce92d6eecce",
        "type": "inject",
        "z": "16474d16.e8b2f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "65603303b49244bf"
            ]
        ]
    },
    {
        "id": "a91fbe18.8fe04",
        "type": "exec",
        "z": "16474d16.e8b2f3",
        "command": "python3 ./drive_recorder/send_folder_data.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "send_folder_data.py",
        "x": 360,
        "y": 380,
        "wires": [
            [
                "1878166.1a12fea"
            ],
            [],
            []
        ]
    },
    {
        "id": "bebbbf98.9ceaa",
        "type": "inject",
        "z": "16474d16.e8b2f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "14d6962d.ba70da",
        "type": "exec",
        "z": "16474d16.e8b2f3",
        "command": "python3 ./drive_recorder/drive_recorder.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "drive_recorder.py",
        "x": 350,
        "y": 440,
        "wires": [
            [
                "ba5e0f52bb0efdd4"
            ],
            [
                "b0e6424cc493f555"
            ],
            [
                "b0e6424cc493f555"
            ]
        ]
    },
    {
        "id": "30a3a22a.58616e",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "1878166.1a12fea",
        "type": "json",
        "z": "16474d16.e8b2f3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 570,
        "y": 380,
        "wires": [
            [
                "30a3a22a.58616e",
                "6fefa049.d8cf7"
            ]
        ]
    },
    {
        "id": "6fefa049.d8cf7",
        "type": "function",
        "z": "16474d16.e8b2f3",
        "name": "",
        "func": "let usb_port=Object.keys(msg.payload)\nglobal.set(\"movie_info\",msg.payload);\nglobal.set(\"usb_port\",usb_port)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "5c4ca801.5c4208",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "8fb3f420.dfd658",
        "type": "split",
        "z": "16474d16.e8b2f3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "key",
        "x": 690,
        "y": 180,
        "wires": [
            [
                "1f296337.265fad",
                "1c239491.cde2ab",
                "1ec1277a.9fa229"
            ]
        ]
    },
    {
        "id": "1f296337.265fad",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "8ec4878.585c178",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "24d3f521.8cfd1a",
        "type": "delay",
        "z": "16474d16.e8b2f3",
        "name": "",
        "pauseType": "timed",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 1410,
        "y": 300,
        "wires": [
            [
                "61b948a9.f18968"
            ]
        ]
    },
    {
        "id": "70b7718c.d1603",
        "type": "switch",
        "z": "16474d16.e8b2f3",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "61b948a9.f18968"
            ],
            [
                "24d3f521.8cfd1a"
            ]
        ]
    },
    {
        "id": "59fa77e3.56f538",
        "type": "link out",
        "z": "16474d16.e8b2f3",
        "name": "",
        "links": [
            "6dc3eb1b.e4ca74"
        ],
        "x": 515,
        "y": 120,
        "wires": []
    },
    {
        "id": "2a166e14.6eb512",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 80,
        "wires": []
    },
    {
        "id": "a70329b4.aaa648",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 140,
        "wires": []
    },
    {
        "id": "8f55c68a.4162a8",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "710103d20c5561dd",
        "type": "mqtt in",
        "z": "16474d16.e8b2f3",
        "name": "",
        "topic": "gauge_2",
        "qos": "0",
        "datatype": "auto",
        "broker": "86fbcd55.ef339",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 940,
        "y": 780,
        "wires": [
            [
                "377f30f86a7dd241"
            ]
        ]
    },
    {
        "id": "377f30f86a7dd241",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 780,
        "wires": []
    },
    {
        "id": "b4a1f09f2938cfe6",
        "type": "mqtt in",
        "z": "16474d16.e8b2f3",
        "name": "",
        "topic": "gauge/1",
        "qos": "0",
        "datatype": "auto",
        "broker": "86fbcd55.ef339",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 940,
        "y": 880,
        "wires": [
            [
                "1ee23f777c086735"
            ]
        ]
    },
    {
        "id": "c28f6f99e455c645",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 880,
        "wires": []
    },
    {
        "id": "1ee23f777c086735",
        "type": "json",
        "z": "16474d16.e8b2f3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1090,
        "y": 880,
        "wires": [
            [
                "c28f6f99e455c645"
            ]
        ]
    },
    {
        "id": "ba5e0f52bb0efdd4",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "435305ac517ac7d9",
        "type": "exec",
        "z": "16474d16.e8b2f3",
        "command": "python3 ./certificate/certification.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "send_folder_data.py",
        "x": 980,
        "y": 560,
        "wires": [
            [
                "9cd292874782cf7e"
            ],
            [
                "9cd292874782cf7e"
            ],
            [
                "9cd292874782cf7e"
            ]
        ]
    },
    {
        "id": "1d0afa614b9fbf00",
        "type": "inject",
        "z": "16474d16.e8b2f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 560,
        "wires": [
            [
                "435305ac517ac7d9"
            ]
        ]
    },
    {
        "id": "9cd292874782cf7e",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 540,
        "wires": []
    },
    {
        "id": "b0e6424cc493f555",
        "type": "debug",
        "z": "16474d16.e8b2f3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 460,
        "wires": []
    },
    {
        "id": "1ca44a2c.a9fa06",
        "type": "http in",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "url": "api/log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "a0005c53.9043"
            ]
        ]
    },
    {
        "id": "f8362a1c.728028",
        "type": "http response",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 380,
        "wires": []
    },
    {
        "id": "a0005c53.9043",
        "type": "template",
        "z": "c23fd6fe.8e28c8",
        "name": "SQL",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SELECT\n    *\nFROM\n    \"{{payload.measurement}}\"\nWHERE\n    '{{payload.date_start}}' <= time AND time < '{{payload.date_end}}'+1d \ntz('Asia/Tokyo')",
        "output": "str",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "7311ed46.0c8394"
            ]
        ]
    },
    {
        "id": "7311ed46.0c8394",
        "type": "influxdb in",
        "z": "c23fd6fe.8e28c8",
        "influxdb": "3a38c40f.b7ce4c",
        "name": "",
        "query": "",
        "rawOutput": true,
        "precision": "ms",
        "retentionPolicy": "",
        "org": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "b1a1aec5.af4ad",
                "23421c05.2941b4"
            ]
        ]
    },
    {
        "id": "b1a1aec5.af4ad",
        "type": "switch",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "property": "payload.results.0.series",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 400,
        "wires": [
            [
                "e26d0255.07ab1"
            ],
            [
                "9a0996b1.d95ee8"
            ]
        ]
    },
    {
        "id": "9a0996b1.d95ee8",
        "type": "change",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "f8362a1c.728028"
            ]
        ]
    },
    {
        "id": "e26d0255.07ab1",
        "type": "function",
        "z": "c23fd6fe.8e28c8",
        "name": "データ整形",
        "func": "const series = msg.payload.results[0].series[0];\nconst columns = series.columns;\nconst range = Array.from({length: columns.length}, (v, k) => k);\nconst records = series.values.map(v => range.reduce((seed, index) => Object.assign(seed, { [columns[index]]: v[index] }), {}));\nmsg.payload = records;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 380,
        "wires": [
            [
                "f8362a1c.728028",
                "6fed50ee.46555"
            ]
        ]
    },
    {
        "id": "526133c4.e8c98c",
        "type": "comment",
        "z": "c23fd6fe.8e28c8",
        "name": "ログ取得API",
        "info": "",
        "x": 130,
        "y": 340,
        "wires": []
    },
    {
        "id": "f2d5d35a.a6101",
        "type": "comment",
        "z": "c23fd6fe.8e28c8",
        "name": "ロググラフ",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "ba9dcc6d.e4e49",
        "type": "switch",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "property": "tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "3223219d.70b85e"
            ],
            [
                "886e53f9.bcfdd"
            ],
            [
                "f3406692.275378"
            ]
        ]
    },
    {
        "id": "46effe1e.089a4",
        "type": "ui_toast",
        "z": "c23fd6fe.8e28c8",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1210,
        "y": 220,
        "wires": []
    },
    {
        "id": "3223219d.70b85e",
        "type": "change",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ログの表示を行います。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 180,
        "wires": [
            [
                "46effe1e.089a4"
            ]
        ]
    },
    {
        "id": "886e53f9.bcfdd",
        "type": "change",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ログの表示が完了しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 220,
        "wires": [
            [
                "46effe1e.089a4"
            ]
        ]
    },
    {
        "id": "f3406692.275378",
        "type": "change",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ログの取得に失敗しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 260,
        "wires": [
            [
                "46effe1e.089a4"
            ]
        ]
    },
    {
        "id": "1e136325.df740d",
        "type": "function",
        "z": "c23fd6fe.8e28c8",
        "name": "データ名読出",
        "func": "let setting=global.get(\"setting_data\");\nmsg.setting=setting;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "9b47d287.6cd77",
                "a1ebc781.334d68"
            ]
        ]
    },
    {
        "id": "17412c1a.ba4ce4",
        "type": "ui_ui_control",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "e05e566a.f08aa8"
            ]
        ]
    },
    {
        "id": "e05e566a.f08aa8",
        "type": "switch",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ログ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "1e136325.df740d"
            ]
        ]
    },
    {
        "id": "9b47d287.6cd77",
        "type": "debug",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "6fed50ee.46555",
        "type": "debug",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "23421c05.2941b4",
        "type": "debug",
        "z": "c23fd6fe.8e28c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "a1ebc781.334d68",
        "type": "ui_template",
        "z": "c23fd6fe.8e28c8",
        "group": "8bb53a60.3e73e8",
        "name": "ログ",
        "order": 2,
        "width": "30",
        "height": "30",
        "format": "<label>\n    開始日\n    <input type=\"date\" id=\"date_start\" name=\"date_start\">\n</label>\n\n<label>\n    終了日\n    <input type=\"date\" id=\"date_end\" name=\"date_end\">\n</label>\n\n<label>\n    子機名\n    <select name=\"子機名\" id=\"client_select\" ></select>\n</label>\n\n<label>\n    データ名\n    <select name=\"データ名\" id=\"data_select\" ></select>\n</label>\n\n<button type=\"button\" id=\"button\" class=\"button\">データ取得</button>\n\n<div id=\"plot\" style=\"height: 700px\"></div>\n\n<md-button download=\"{{data_name}}.csv\" ng-init=\"href = '#';\" ng-href=\"{{href}}\" style=\"height: 48px; line-height: 36px;\">ダウンロード</md-button>\n<script>\n\n    (function(scope) {\n        scope.$watch('msg.setting', (current, previous) => {\n            if(current!=null){\n                g_setting=current;\n                initialize(\"client_select\");\n                let client_option_list=create_client_options(g_setting);\n                pulldown_create(client_option_list,\"client_select\");\n            }\n        });\n        \n    function create_data_options(client,setting){\n        let option_list=[];\n        let id_list=Object.keys(setting[client][\"data\"]).sort();\n        for (let i=0;i<id_list.length;++i){\n            let option=[]\n            let data_setting=setting[client][\"data\"][id_list[i]];\n            option.push(id_list[i])\n            option.push(data_setting[\"name\"]);\n            option_list.push(option);\n            \n        }\n        \n        option_list.unshift([\"not_selected\",\"選択してください\"]);\n        return option_list;\n    }\n        \n    function create_client_options(setting){\n        clients=Object.keys(setting).sort();\n        console.log(clients);\n        let option_list=[];\n        for(let i=0;i<clients.length;++i){\n            let option=[]\n            option.push(clients[i])\n            option.push(setting[clients[i]][\"name\"]);\n            option_list.push(option);\n        }\n        option_list.unshift([\"not_selected\",\"選択してください\"]);\n        return option_list;\n    }\n    \n        function get_data(){\n            let date_start=document.getElementById(\"date_start\");\n            let date_end=document.getElementById(\"date_end\");\n            let data_selector=document.getElementById(\"data_select\");\n            let data_index=data_selector.selectedIndex;\n            let data_name=data_selector.options[data_index].text;\n            let start=date_start.value;\n            let end=date_end.value;\n            let measurement=data_selector.value;\n            \n            if (data_index == null || start==null || end ==null) {\n                return;\n            }\n            \n            //console.log(previous + ' -> ' + current);\n            //const pattern = /^\\d{4}-\\d{2}-\\d{2}$/g;\n            //const result = date.match(pattern);\n            scope.href = '#';\n            if (start !== null && end!==null) {\n                scope.send({payload:scope.msg.payload, tag: 0});\n                $.get(`/api/log?date_start=${start}&date_end=${end}&measurement=${measurement}`)\n                    .done(function(data) {\n                        console.log(data,start,data_name,data_index)\n                        update(data,start,end,data_name,measurement);\n                        scope.send({payload:scope.msg.payload, tag: 1});\n                    })\n                    .fail(function(err) {\n                        console.error(err);\n                        update();\n                        scope.send({payload:scope.msg.payload, tag: 2});\n                    });\n            }\n        }\n        \n        \n        // 画面を更新する\n        function update(arr, start,end,name,measurement) {\n            if (arr && arr.length !== 0) {\n                href(arr,name);\n                plot(arr, start,end,name,measurement);\n            } else {\n                scope.href = '#';\n                Plotly.purge('plot');\n            }\n        }\n        \n        // グラフを描画する\n        function plot(arr, start,end,name,measurement) {\n            console.log(arr);\n            const chs = [measurement];\n            for (let i = arr.length - 1; i >= 0; i--) {\n                if (i !== 0) {\n                    const prev = arr[i - 1].time;\n                    const current = arr[i].time;\n                    if (current - prev > 10000) {\n                        const avg = (current + prev) / 2.0;\n                        const insert = { tick: avg };\n                        for (let ch of chs) {\n                            insert[ch] = null;\n                        }\n                        arr.splice(i, 0, insert);\n                    }\n                }\n            }\n            const ticks = arr.map(d => new Date(d.time));\n            const data = [];\n            for (let ch of chs) {\n                console.log(ch);\n                console.log(arr);\n                const temps = arr.map(d => d[ch]);\n                console.log(temps);\n                if (temps.length !== 0) {\n                    data.push({\n                        x: ticks,\n                        y: temps,\n                        name: name,\n                        mode: 'lines',\n                        type: 'scattergl',\n                        line: {\n                            width: 2\n                        }\n                    });\n                }\n            }\n            const layout = {\n                title: `${start.replace(/-/g, '/')}-${end.replace(/-/g, '/')}`,\n                xaxis: {\n                    title: '時間',\n                },\n                yaxis: {\n                    title: name,\n                },\n            };\n            console.log(data);\n            Plotly.newPlot('plot', data, layout);\n        }\n        \n        // ダウンロードリンクを更新する\n        function href(arr,name) {\n            console.log(arr,name);\n            const keys = Object.keys(arr[0]);\n            console.log(keys);\n            const chs = keys.filter(k => k !== 'time');\n            console.log(chs);\n            const header = keys.join(',') + '\\n';\n            console.log(header);\n            const csv = [header].concat(arr.map(d => moment(d.time).format('YYYY-MM-DD HH:mm:ss') + ',' + chs.map(ch => d[ch]).join(',') + '\\n'));\n            const blob = new Blob(csv, {type:'text/csv'});\n            scope.href = URL.createObjectURL(blob);\n            scope.data_name=name;\n            \n        }\n        \n        function pulldown_create(option_list,id){\n            let selector=document.getElementById(id);\n            for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n                let option = document.createElement('option');\n                //option要素にvalueと表示名を設定\n                option.value = option_list[i][0];\n                option.textContent = option_list[i][1];\n                //select要素にoption要素を追加する\n                selector.appendChild(option);\n            }\n        }\n        \n        function initialize(id){\n            let dom=document.getElementById(id);\n            dom.innerHTML=\"\";\n         \n        }\n        \n        function create_data_selector(){\n            let client=document.getElementById(\"client_select\").value;\n            let setting=g_setting\n            if (client!=\"not_selected\"){\n                initialize(\"data_select\");\n                let data_option_list=create_data_options(client,setting);\n                pulldown_create(data_option_list,\"data_select\");\n            }\n            \n        }\n        let client_selector=document.getElementById(\"client_select\");\n        client_selector.onchange=create_data_selector;\n        let button = document.getElementById('button');\n        button.onclick = get_data;\n    })(scope);\n    \n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 570,
        "y": 220,
        "wires": [
            [
                "ba9dcc6d.e4e49"
            ]
        ]
    },
    {
        "id": "78c36d28.33e244",
        "type": "ui_template",
        "z": "ca4ee912.7831c8",
        "group": "59803964.6a9cb8",
        "name": "データ設定",
        "order": 11,
        "width": 30,
        "height": 30,
        "format": "<p class=\"title\">設定初期化</p>\n<p>\n<label for=\"clietn_num\">接続ユニット数</label>\n<input type=\"Number\" id=\"client_num\">\n</p>\n<p><button type=\"button\" id=\"initialize_data\" size=\"10\" class=\"button\"  >設定初期化</button></p>\n<p></p>\n<p class=\"title\">子機名編集</p>\n<table border=\"1\" id=\"client_table\">\n    <thead>\n        <tr>\n            <th>No.</th>\n            <th>子機ID</th>\n            <th>子機名</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<p class=\"title\">設定編集</p>\n<label>\n    子機名\n    <select name=\"子機名\" id=\"client_select\" ></select>\n</label>\n\n<table border=\"1\" id=\"setting_table\">\n    \n    <thead>\n        <tr>\n            <th>No.</th>\n            <th>ﾕﾆｯﾄ名</th>\n            <th>ch_No.</th>\n            <th>ﾃﾞｰﾀ表示</th>\n            <th>ﾃﾞｰﾀ名</th>\n            <th>単位</th>\n            <th>ｽｹｰﾘﾝｸﾞ下限</th>\n            <th>ｽｹｰﾘﾝｸﾞ上限</th>\n            <th>ﾒｰﾙ配信</th>\n            <th>閾値設定1</th>\n            <th>閾値設定2</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<div class=\"flexc\">\n<button type=\"button\" id=\"register_button\" class=\"button\">登録</button>\n<button type=\"button\" id=\"cancel_button\" class=\"button\" >キャンセル</button>\n\n</div>\n<script>\n\n(function(scope) {\n    let register_button = document.getElementById('register_button');\n    let table_data=document.getElementById(\"setting_table\");\n    let cancel_button=document.getElementById('cancel_button');\n    let initialize_button=document.getElementById('initialize_data');\n    let client_num_button=document.getElementById('client_num');\n    \n    scope.$watch('msg.setting', (current, previous) => {\n        if (current!=undefined){\n            g_setting=current;\n            table_delete(\"setting_table\");\n            table_delete(\"client_table\");\n            initialize(\"client_select\");\n            let client_option_list=create_client_options(g_setting);\n            client_pulldown_create(client_option_list,\"client_select\");\n            client_table_create(g_setting,\"client_table\");\n        }\n    });\n    \n    function initialize(id){\n        let element=document.getElementById(id);\n        element.innerHTML=\"\";\n    }\n    \n    function client_pulldown_create(option_list,id){\n        let selector=document.getElementById(id);\n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = option_list[i][0];\n            option.textContent = option_list[i][1];\n            //select要素にoption要素を追加する\n            selector.appendChild(option);\n        }\n    }\n    \n    function create_client_options(setting){\n        clients=Object.keys(setting).sort();\n        console.log(clients);\n        let option_list=[];\n        for(let i=0;i<clients.length;++i){\n            let option=[]\n            option.push(clients[i])\n            option.push(setting[clients[i]][\"name\"]);\n            option_list.push(option);\n        }\n        option_list.unshift([\"not_selected\",\"選択してください\"]);\n        return option_list;\n    }\n    \n    function table_delete(id){\n        let table=document.getElementById(id);\n        const table_length=table.rows.length-1;\n        for(let i = 0; i < table_length; ++i){\n            // tbody要素にある最後の行（tr要素）を削除\n            table.deleteRow(-1);\n        }\n    }\n \n    function pulldown_create(option_list,id,value){\n        let select = document.createElement(\"select\");\n        select.id=id;\n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = String(i);\n            option.textContent = option_list[i] ;\n            if (option.value==value){\n                option.selected=true;\n            }\n            //select要素にoption要素を追加する\n            select.appendChild(option);    \n        }\n        return select;\n    }\n   \n    function input_create(type,id,value){\n        let input = document.createElement('input');\n        input.type=type;\n        input.id=id;\n        input.value=value;\n        if(type==\"number\"){\n            input.className=type\n        }\n        return input;\n    } \n\n    function input_create2(id,value,id2,text){\n        let div_node=document.createElement(\"div\")\n        div_node.id=id2;\n        \n        let label = document.createElement(\"label\");\n\t\t//label.id = \"ID\";\n\t\tlabel.htmlFor = id;\n\t\t//label.title = \"TITLE\";\n\t\tlabel.innerHTML=text\n\t\t\n        let input = document.createElement('input');\n        input.className=\"number\";\n        input.type=\"number\";\n        input.id=id;\n        input.value=value;\n      \n        div_node.appendChild(label);\n\t\tdiv_node.appendChild(input);\n  \n        return div_node;\n    }   \n    \n    function create_text(id,text){\n        let div_node=document.createElement(\"div\")\n        div_node.innerHTML=text;\n        div_node.id=id;\n        \n        return div_node;\n    }\n    \n    function client_table_create(data,id){\n        let table=document.getElementById(id);\n        let clients=Object.keys(data).sort()\n        for (let i =0;i<clients.length;++i){\n            let client=clients[i]\n            let client_name=data[clients[i]][\"name\"];\n            \n            let cell=[]\n            cell[0]=document.createTextNode(String(i));\n            cell[1]=document.createTextNode(client);\n            cell[2]=input_create(\"text\",`client_name_${i}`,client_name);\n            \n             let new_row = table.insertRow(-1);\n            let new_cell=[];\n            for(let j = 0; j < cell.length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n        }\n    }\n         \n    function setting_table_create(){\n        table_delete(\"setting_table\");\n        let client=document.getElementById(\"client_select\").value;\n        let data=g_setting;\n        if(client!=\"not_selected\"){\n            let id_list=Object.keys(data[client][\"data\"]).sort();\n            console.log(id_list);\n            //let table = document.getElementById('setting_table');\n            for(let i = 0; i < id_list.length; ++i){\n                let setting_data=data[client][\"data\"][id_list[i]];\n                let id=id_list[i];\n                let device=setting_data[\"device\"];\n                let ch=setting_data[\"ch\"];\n                let is_mail=setting_data[\"is_mail\"];\n                let th_low=setting_data[\"th_low\"];\n                let th_high=setting_data[\"th_high\"];\n                let type=setting_data[\"type\"];\n                let is_display=setting_data[\"disp\"];\n                let unit=setting_data[\"unit\"];\n                let name=setting_data[\"name\"];\n                let out_low=setting_data[\"out_l\"];\n                let out_high=setting_data[\"out_h\"];\n                \n                \n                let cell=[]\n                cell[0]=document.createTextNode(String(i));\n                cell[1]=document.createTextNode(device);\n                cell[2]=document.createTextNode(ch);\n                cell[3]=pulldown_create([\"非表示\",\"表示\"],`is_display_${i}`,is_display);\n                cell[4]=input_create(\"text\",`name_${i}`,name);\n                cell[6]=document.createTextNode(out_low);\n                cell[7]=document.createTextNode(out_high);\n                cell[8]=pulldown_create([\"しない\",\"する\"],`is_mail_${i}`,is_mail);\n                \n                if (type===\"DIN\" ||type===\"DOUT\" ){\n                    cell[5]=document.createTextNode(\"\");\n                    cell[9]=pulldown_create([\"OFF時を異常\",\"ON時を異常\"],`th_low_${i}`,th_low);\n                    cell[10]=document.createTextNode(\"\");\n                }\n                if(type==\"AIN\"||type==\"AOUT\"){\n                    cell[5]=input_create(\"text\",`unit_${i}`,unit);\n                    cell[9]=input_create2(`th_low_${i}`,th_low,`div_th_low_${i}`,\"下限値\");\n                    cell[10]=input_create2(`th_high_${i}`,th_high,`div_th_high_${i}`,\"上限値\");\n                }\n                let new_row = table_data.insertRow(-1);\n                let new_cell=[];\n                for(let j = 0; j < cell.length; ++j){\n                    new_cell[j]=new_row.insertCell(j);\n                    new_cell[j].appendChild(cell[j]);\n                }\n            }\n        }\n    }\n    \n    function send_data(){\n       \n        let data={};\n        let client=document.getElementById(\"client_select\").value;\n        console.log(table_data);\n        for(let i = 0; i < table_data.rows.length-1; ++i){\n            data_element={}\n            let id=Object.keys(g_setting[client][\"data\"]).sort()[i];\n\n            let is_display=document.getElementById(`is_display_${i}`).value;\n            data_element[\"disp\"]=is_display;\n            \n            let name=document.getElementById(`name_${i}`).value;\n            data_element[\"name\"]=name;\n            \n            let is_mail=document.getElementById(`is_mail_${i}`).value;\n            data_element[\"is_mail\"]=is_mail;\n            \n            let th_low=document.getElementById(`th_low_${i}`).value;\n            data_element[\"th_low\"]=th_low;\n            \n            let th_high=document.getElementById(`th_high_${i}`);\n            if (th_high==null){\n                th_high=\"\";\n            }\n            else{\n                th_high=th_high.value\n            }\n            \n            data_element[\"th_high\"]=th_high;\n            let unit=document.getElementById(`unit_${i}`);\n            if (unit==null){\n                unit=\"\";\n            }\n            else{\n                unit=unit.value\n            }\n            data_element[\"unit\"]=unit;\n            data[id]=data_element;\n        }\n        \n        let clients=Object.keys(g_setting).sort()\n        let client_data={};\n        let table=document.getElementById(\"client_table\");\n        for (let i =0;i<table.rows.length-1;++i){\n            let client_name=document.getElementById(`client_name_${i}`).value;\n            client_data[clients[i]]=client_name;\n        }\n        \n        \n        console.log(data);\n        scope.send({payload:{\"save_setting\":{\"client_names\":client_data,\"client_data\":{\"client\":client,\"data\":data}}}});\n        \n    }\n    \n    function initialize_data(){\n        scope.send({payload:{\"initialize\":Number(client_num_button.value)}});\n        table_delete(\"setting_table\");\n        table_delete(\"client_table\");\n        initialize(\"client_select\");\n        \n    }\n    \n    function get_data(){\n        scope.send({payload:{\"get_data\":1}});\n    }\n\n    let client_selector=document.getElementById(\"client_select\");\n    client_selector.onchange=setting_table_create;\n    cancel_button.onclick=get_data;\n    initialize_button.onclick=initialize_data;\n    register_button.onclick = send_data;\n   \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 520,
        "wires": [
            [
                "22ba6045.79cf7"
            ]
        ]
    },
    {
        "id": "b926438d.0418d",
        "type": "function",
        "z": "ca4ee912.7831c8",
        "name": "設定データ変更保存",
        "func": "let setting_data=global.get(\"setting_data\");\nconst data=msg.payload[\"save_setting\"][\"client_data\"][\"data\"];\nconst client=msg.payload[\"save_setting\"][\"client_data\"][\"client\"];\nconst names=msg.payload[\"save_setting\"][\"client_names\"];\n\nid_list=Object.keys(data).sort();\n\nfor (let i = 0; i < id_list.length; ++i) {\n    let setting=setting_data[client][\"data\"][id_list[i]];\n    \n    setting[\"is_display\"]=data[id_list[i]][\"is_display\"];\n    setting[\"name\"]=data[id_list[i]][\"name\"];\n    setting[\"is_mail\"]=data[id_list[i]][\"is_mail\"];\n    setting[\"th_low\"]=Number(data[id_list[i]][\"th_low\"]);\n    setting[\"th_high\"]=Number(data[id_list[i]][\"th_high\"]);\n    setting[\"unit\"]=data[id_list[i]][\"unit\"];\n}\n\nclients=Object.keys(names).sort();\n\nfor (let i = 0; i < clients.length; ++i) {\n    setting_data[clients[i]][\"name\"]=names[clients[i]];\n}\nglobal.set(\"setting_data\",setting_data);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": [
            [
                "49b385df.4976cc"
            ]
        ]
    },
    {
        "id": "22ba6045.79cf7",
        "type": "switch",
        "z": "ca4ee912.7831c8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "get_data",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "initialize",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "save_setting",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 520,
        "wires": [
            [
                "c0ae17b2.1a5fc8"
            ],
            [
                "37e8b285.a659de",
                "2c549e19.9a82b2"
            ],
            [
                "b926438d.0418d",
                "fdda540f.02f6c8"
            ]
        ]
    },
    {
        "id": "9dcf21f2.74a2c",
        "type": "mqtt out",
        "z": "ca4ee912.7831c8",
        "name": "",
        "topic": "/unit_info",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "86fbcd55.ef339",
        "x": 1040,
        "y": 520,
        "wires": []
    },
    {
        "id": "605893d3.3d5f5c",
        "type": "json",
        "z": "ca4ee912.7831c8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 450,
        "y": 740,
        "wires": [
            [
                "3495e5fe.dd9d8a",
                "891883ea.8425e"
            ]
        ]
    },
    {
        "id": "406f766a.9d75e8",
        "type": "mqtt in",
        "z": "ca4ee912.7831c8",
        "name": "",
        "topic": "/+/unit_info",
        "qos": "1",
        "datatype": "auto",
        "broker": "86fbcd55.ef339",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 740,
        "wires": [
            [
                "605893d3.3d5f5c"
            ]
        ]
    },
    {
        "id": "2c549e19.9a82b2",
        "type": "function",
        "z": "ca4ee912.7831c8",
        "name": "設定データ初期化",
        "func": "global.set(\"setting_data\",{});\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "9dcf21f2.74a2c"
            ]
        ]
    },
    {
        "id": "ce188d44.788db",
        "type": "switch",
        "z": "ca4ee912.7831c8",
        "name": "",
        "property": "client_list_length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "client_num",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "client_num",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1590,
        "y": 480,
        "wires": [
            [
                "719d5928.30d978"
            ],
            [
                "20d80e59.769542"
            ]
        ]
    },
    {
        "id": "719d5928.30d978",
        "type": "change",
        "z": "ca4ee912.7831c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "ユニットの認識に成功しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 400,
        "wires": [
            [
                "7d0ee785.99c988"
            ]
        ]
    },
    {
        "id": "7d0ee785.99c988",
        "type": "ui_toast",
        "z": "ca4ee912.7831c8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1990,
        "y": 400,
        "wires": []
    },
    {
        "id": "20d80e59.769542",
        "type": "change",
        "z": "ca4ee912.7831c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "一部ユニットの認識に失敗しました。",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 480,
        "wires": [
            [
                "b7c6d3d4.6863"
            ]
        ]
    },
    {
        "id": "b7c6d3d4.6863",
        "type": "ui_toast",
        "z": "ca4ee912.7831c8",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1970,
        "y": 480,
        "wires": []
    },
    {
        "id": "5fc2a592.58a4cc",
        "type": "delay",
        "z": "ca4ee912.7831c8",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1020,
        "y": 480,
        "wires": [
            [
                "3eb265ae.2e1d8a",
                "49b385df.4976cc"
            ]
        ]
    },
    {
        "id": "3eb265ae.2e1d8a",
        "type": "function",
        "z": "ca4ee912.7831c8",
        "name": "クライアント数取得",
        "func": "const setting=global.get(\"setting_data\");\nmsg.client_list_length=Object.keys(setting).length;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "3f70cabc.c10396"
            ]
        ]
    },
    {
        "id": "3f70cabc.c10396",
        "type": "change",
        "z": "ca4ee912.7831c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 480,
        "wires": [
            [
                "ce188d44.788db"
            ]
        ]
    },
    {
        "id": "b394248f.b9d798",
        "type": "ui_ui_control",
        "z": "ca4ee912.7831c8",
        "name": "",
        "events": "all",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "1996cc6.d253034"
            ]
        ]
    },
    {
        "id": "1996cc6.d253034",
        "type": "switch",
        "z": "ca4ee912.7831c8",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "データ設定",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 460,
        "wires": [
            [
                "c0ae17b2.1a5fc8"
            ]
        ]
    },
    {
        "id": "37e8b285.a659de",
        "type": "change",
        "z": "ca4ee912.7831c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "client_num",
                "pt": "msg",
                "to": "payload.initialize",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 480,
        "wires": [
            [
                "5fc2a592.58a4cc"
            ]
        ]
    },
    {
        "id": "3495e5fe.dd9d8a",
        "type": "debug",
        "z": "ca4ee912.7831c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 700,
        "wires": []
    },
    {
        "id": "c0ae17b2.1a5fc8",
        "type": "function",
        "z": "ca4ee912.7831c8",
        "name": "設定データ読出",
        "func": "const setting=global.get(\"setting_data\");\nmsg.setting=setting;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "78c36d28.33e244"
            ]
        ]
    },
    {
        "id": "891883ea.8425e",
        "type": "function",
        "z": "ca4ee912.7831c8",
        "name": "設定データ保存",
        "func": "let setting=global.get(\"setting_data\");\nconst client_setting=msg.payload;\n\nclient=Object.keys(client_setting)[0];\nsetting[client]=client_setting[client]\n\nglobal.set(\"setting_data\",setting);\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "49b385df.4976cc",
        "type": "change",
        "z": "ca4ee912.7831c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 540,
        "wires": [
            [
                "b489b48e.f6eb98"
            ]
        ]
    },
    {
        "id": "b489b48e.f6eb98",
        "type": "link out",
        "z": "ca4ee912.7831c8",
        "name": "",
        "links": [
            "2dca67d2.3472e8"
        ],
        "x": 1395,
        "y": 540,
        "wires": []
    },
    {
        "id": "2dca67d2.3472e8",
        "type": "link in",
        "z": "ca4ee912.7831c8",
        "name": "",
        "links": [
            "b489b48e.f6eb98"
        ],
        "x": 725,
        "y": 340,
        "wires": [
            [
                "c0ae17b2.1a5fc8"
            ]
        ]
    },
    {
        "id": "fdda540f.02f6c8",
        "type": "debug",
        "z": "ca4ee912.7831c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 600,
        "wires": []
    },
    {
        "id": "601b7b66f668af42",
        "type": "inject",
        "z": "e590b9a9444db32c",
        "name": "DB削除",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "4d2ab9664f1fd7f9"
            ]
        ]
    },
    {
        "id": "4d2ab9664f1fd7f9",
        "type": "influxdb in",
        "z": "e590b9a9444db32c",
        "influxdb": "3a38c40f.b7ce4c",
        "name": "DB削除",
        "query": "DROP DATABASE \"furnace\"",
        "rawOutput": false,
        "precision": "s",
        "retentionPolicy": "",
        "org": "",
        "x": 660,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3d1f591.8be9da6",
        "type": "exec",
        "z": "e590b9a9444db32c",
        "command": "sudo poweroff #",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 700,
        "y": 280,
        "wires": [
            [],
            [
                "d5cdaec.9e99a5"
            ],
            []
        ]
    },
    {
        "id": "d5cdaec.9e99a5",
        "type": "debug",
        "z": "e590b9a9444db32c",
        "name": "エラー",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "e7e9d10d.d22be",
        "type": "inject",
        "z": "e590b9a9444db32c",
        "name": "シャットダウン",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 500,
        "y": 280,
        "wires": [
            [
                "3d1f591.8be9da6"
            ]
        ]
    },
    {
        "id": "fb1779bb.2fc8a8",
        "type": "inject",
        "z": "e590b9a9444db32c",
        "name": "DB作成",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "4f738e9f.3e186"
            ]
        ]
    },
    {
        "id": "4f738e9f.3e186",
        "type": "influxdb in",
        "z": "e590b9a9444db32c",
        "influxdb": "3a38c40f.b7ce4c",
        "name": "DB作成",
        "query": "CREATE DATABASE \"furnace\"",
        "rawOutput": false,
        "precision": "s",
        "retentionPolicy": "",
        "org": "",
        "x": 660,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "305625f8.55216a",
        "type": "ui_template",
        "z": "f404d7ae.5de898",
        "group": "d9ffe36e.2f2d7",
        "name": "メール送信設定",
        "order": 1,
        "width": "30",
        "height": "30",
        "format": "<!--<label for=\"name\">送信間隔</label>-->\n\n<!--<input type=\"number\" id=\"interval\" class=\"number\">-->\n<button type=\"button\" id=\"add_address\" size=\"10\" class=\"button\" >メールアドレス追加</button>\n<table border=\"1\" width=\"800\" id=\"table\" >\n    \n    <thead>\n        <tr>\n            <th>No.</th>\n            <th>メールアドレス</th>\n            <th>有効/無効</th>\n            <th>操作</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<div class=\"flexb\">\n<button type=\"button\" id=\"button\" 　size=\"10\" class=\"button\">登録</button>\n<button type=\"button\" id=\"get_data\" size=\"10\" class=\"button\"  >キャンセル</button>\n\n</div>\n\n\n<script>\n(function(scope) {\n    let button = document.getElementById('button');\n    let add_address=document.getElementById(\"add_address\");\n    let button1=document.getElementById('get_data');\n    \n    let table_data=document.getElementById(\"table\");\n    \n    scope.$watch('msg.payload', (current, previous) => {\n        console.log(current,previous);\n        table_initialize();\n        table_create(current,\"table\");\n        \n    });\n    \n    \n    function table_initialize(){\n        const table_length=table_data.rows.length-1;\n        console.log(table_data);\n        for(let i = 0; i < table_length; ++i){\n            // tbody要素にある最後の行（tr要素）を削除\n            table_data.deleteRow(-1);\n        }\n        \n    }\n \n     function input_create(type,id,value){\n        let input = document.createElement('input');\n        input.type=type;\n        input.id=id;\n        input.value=value;\n        input.className=\"mail\"\n        return input;\n    } \n    \n    function pulldown_create(option_list,id,value){\n        \n        let select = document.createElement(\"select\");\n        select.id=id;\n        \n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n        \n            //option要素にvalueと表示名を設定\n            option.value = String(i);\n            option.textContent = option_list[i] ;\n            if (option.value==value){\n                option.selected=true;\n            }\n            //select要素にoption要素を追加する\n            \n            select.appendChild(option);    \n        }\n        return select;\n    }\n    \n    \n    \n         \n    function table_create(data){\n       // document.getElementById(\"interval\").value=data[0]\n         const data2=data[1];\n        \n        \n        for(let i = 0; i < data2.length; ++i){\n            \n            let mail_address=data2[i][0];\n            let is_valid=data2[i][1];\n        \n            let cell=[];\n            cell[0]=document.createTextNode(String(i));\n            cell[1]=input_create(\"text\",`mail_address_${i}`,mail_address);\n            cell[2]=pulldown_create([\"有効\",\"無効\"],`is_valid_${i}`,is_valid);\n            cell[3]=button_create(`delete_${i}`);\n            \n            let new_row = table_data.insertRow(-1);\n            let new_cell=[];\n            for(let j = 0; j < cell.length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n        }\n    }\n    \n    function button_create(idx){\n       let button1 = document.createElement(\"button\");\n       button1.id=idx;\n       button1.innerText=\"削除\";\n       button1.onclick=delete_row;\n   \n       return button1;\n    }\n    \n    function insert_table_data(){\n        const rows_length=table_data.rows.length;\n        const cells_length=table_data.rows[0].cells.length;\n        \n        let cell=[];\n        cell[0]=document.createTextNode(String(rows_length-1));\n        cell[1]=input_create(\"text\",`mail_address_${rows_length-1}`,\"\");\n        cell[2]=pulldown_create([\"無効\",\"有効\"],`is_valid_${rows_length-1}`,1);\n        cell[3]=button_create(`delete_${rows_length-1}`);\n        let new_row = table_data.insertRow(-1);\n        let new_cell=[];\n        \n        for(let j = 0; j < cells_length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n            \n    }\n    \n   function is_duplicated(elements) {\n        // Setを使って、配列の要素を一意にする\n        console.log(elements);\n        const setElements = new Set(elements);\n        console.log(setElements.size !== elements.length);\n        return setElements.size !== elements.length;\n    }\n    \n    function send_data(){\n        const send_data=[];\n        const table_data1=load_table_data()[0];\n        console.log(table_data1);\n        const address_data=load_table_data()[1];\n        console.log(address_data);\n        //const interval_value=document.getElementById(\"interval\").value;\n        const interval_value=\"1\";\n        console.log(interval_value);\n        send_data.push(interval_value);\n        send_data.push(table_data1);\n        \n        if (is_duplicated(address_data)==0){\n            console.log(send_data);\n            scope.send({payload:send_data});\n            \n        }\n        \n        if (is_duplicated(address_data)==1){\n            window.alert(\"アドレスが重複しています\");\n        }\n    }\n    \n    function load_table_data(){\n        data=[];\n        address_data=[];\n        for(let i = 0; i < table_data.rows.length-1; ++i){\n            let address_value=document.getElementById(`mail_address_${i}`).value;\n            let is_valid_value=document.getElementById(`is_valid_${i}`).value;\n            console.log(address_value,is_valid_value);\n            data.push([address_value,is_valid_value]);\n            address_data.push(address_value);\n           \n        }\n        return [data,address_data];\n        \n    }\n    \n    function delete_row(){\n        console.log(table_data);\n        //console.log($e.currentTarget);\n        console.log(this);\n        const index1=this.id.split('_')[1];\n        console.log(index1);\n        const row_index=Number(index1)+1;\n        table_data.deleteRow(row_index);\n        \n       // if (table_data.rows.length!==row_index){\n            update_table(row_index);\n        //}\n            \n    }\n    \n    function update_table(table_index){\n        //console.log(table_index);\n        \n        for(let i = table_index; i < table_data.rows.length; ++i){\n           \n            console.log(table_data.rows.length);\n            table_data.rows[i].cells[0].innerText=String(i-1);\n            //console.log(table_data.rows[i].cells[0].innerText);\n            let address=document.getElementById(`mail_address_${i}`);\n            let is_valid=document.getElementById(`is_valid_${i}`);\n            let delete_button=document.getElementById(`delete_${i}`);\n            address.id=`mail_address_${i-1}`;\n            is_valid.id=`is_valid_${i-1}`\n            delete_button.id=`delete_${i-1}`\n            console.log(address.id,is_valid.id,delete_button.id);\n            \n    \n        }\n        \n         console.log(table_data);\n    }\n    \n    function get_data(){\n        \n        scope.send({payload:\"get_data\"});\n    }\n        \n        \n        \n    \n    button.onclick = send_data;\n    add_address.onclick = insert_table_data;\n    button1.onclick=get_data;\n  \n  \n\n   \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 240,
        "wires": [
            [
                "9b53b20f.a8d46"
            ]
        ]
    },
    {
        "id": "4f222d17.719a84",
        "type": "function",
        "z": "f404d7ae.5de898",
        "name": "メール設定保存",
        "func": "mail_setting=msg.payload;\nglobal.set(\"mail_setting\",mail_setting)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d3d3c559.7c1058",
        "type": "function",
        "z": "f404d7ae.5de898",
        "name": "メール設定データ読出",
        "func": "msg.payload=global.get(\"mail_setting\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "305625f8.55216a"
            ]
        ]
    },
    {
        "id": "9b53b20f.a8d46",
        "type": "switch",
        "z": "f404d7ae.5de898",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "get_data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 240,
        "wires": [
            [
                "4f222d17.719a84"
            ],
            [
                "f6bfcca0.cdd7b"
            ]
        ]
    },
    {
        "id": "f6bfcca0.cdd7b",
        "type": "link out",
        "z": "f404d7ae.5de898",
        "name": "",
        "links": [
            "cbe98677.f09d98"
        ],
        "x": 975,
        "y": 260,
        "wires": []
    },
    {
        "id": "cbe98677.f09d98",
        "type": "link in",
        "z": "f404d7ae.5de898",
        "name": "",
        "links": [
            "f6bfcca0.cdd7b"
        ],
        "x": 335,
        "y": 280,
        "wires": [
            [
                "d3d3c559.7c1058"
            ]
        ]
    },
    {
        "id": "57f9d05f.ff248",
        "type": "ui_ui_control",
        "z": "f404d7ae.5de898",
        "name": "",
        "events": "all",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "70f8559d.3c322c"
            ]
        ]
    },
    {
        "id": "70f8559d.3c322c",
        "type": "switch",
        "z": "f404d7ae.5de898",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "メール送信設定",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "d3d3c559.7c1058"
            ]
        ]
    },
    {
        "id": "58d339a5.21a3d8",
        "type": "exec",
        "z": "78343655.9fb1a8",
        "command": "sudo date",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 580,
        "y": 200,
        "wires": [
            [],
            [
                "f27b6593.373378",
                "bcf583bd.e964e"
            ],
            [
                "31418300.6d45ce"
            ]
        ]
    },
    {
        "id": "23344f68.e35b",
        "type": "change",
        "z": "78343655.9fb1a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"--set='\"&payload.datetime&\"'\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 200,
        "wires": [
            [
                "58d339a5.21a3d8"
            ]
        ]
    },
    {
        "id": "e53cb33d.d2b36",
        "type": "ui_form",
        "z": "78343655.9fb1a8",
        "name": "時刻設定",
        "label": " ",
        "group": "31787600.224eaa",
        "order": 1,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "時刻",
                "value": "datetime",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "datetime": ""
        },
        "payload": "",
        "submit": "設定",
        "cancel": "クリア",
        "topic": " ",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "49c75d16.b1f074"
            ]
        ]
    },
    {
        "id": "871a2c82.9e4da",
        "type": "ui_toast",
        "z": "78343655.9fb1a8",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "時刻設定に成功しました。",
        "name": "",
        "x": 970,
        "y": 240,
        "wires": []
    },
    {
        "id": "bcf583bd.e964e",
        "type": "ui_toast",
        "z": "78343655.9fb1a8",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "時刻設定に失敗しました。",
        "name": "",
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "f27b6593.373378",
        "type": "debug",
        "z": "78343655.9fb1a8",
        "name": "エラー",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "31418300.6d45ce",
        "type": "switch",
        "z": "78343655.9fb1a8",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "871a2c82.9e4da"
            ]
        ]
    },
    {
        "id": "49c75d16.b1f074",
        "type": "switch",
        "z": "78343655.9fb1a8",
        "name": "",
        "property": "payload.datetime",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}:\\d{2}$",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "23344f68.e35b"
            ],
            [
                "3994fe82.eaa572"
            ]
        ]
    },
    {
        "id": "3994fe82.eaa572",
        "type": "ui_toast",
        "z": "78343655.9fb1a8",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "yyyy/MM/dd hh:mm:ss 形式で入力してください。",
        "name": "",
        "x": 390,
        "y": 240,
        "wires": []
    },
    {
        "id": "26286ead.d1c1c2",
        "type": "comment",
        "z": "78343655.9fb1a8",
        "name": "時刻設定",
        "info": "",
        "x": 80,
        "y": 180,
        "wires": []
    },
    {
        "id": "39dec44d.8ad89c",
        "type": "exec",
        "z": "78343655.9fb1a8",
        "command": "sudo reboot #",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 580,
        "y": 80,
        "wires": [
            [],
            [
                "d87cd4eb.6c6218"
            ],
            []
        ]
    },
    {
        "id": "27d41671.1d92aa",
        "type": "ui_button",
        "z": "78343655.9fb1a8",
        "name": "Reboot",
        "group": "31787600.224eaa",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "#FF005C",
        "className": "",
        "icon": "",
        "payload": "再起動します。よろしいですか？",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 60,
        "y": 80,
        "wires": [
            [
                "39466a4.c12c696"
            ]
        ]
    },
    {
        "id": "8a0afb28.764138",
        "type": "comment",
        "z": "78343655.9fb1a8",
        "name": "再起動",
        "info": "",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "d87cd4eb.6c6218",
        "type": "debug",
        "z": "78343655.9fb1a8",
        "name": "エラー",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 80,
        "wires": []
    },
    {
        "id": "39466a4.c12c696",
        "type": "ui_toast",
        "z": "78343655.9fb1a8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "672bb37a.1fadcc"
            ]
        ]
    },
    {
        "id": "672bb37a.1fadcc",
        "type": "switch",
        "z": "78343655.9fb1a8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 80,
        "wires": [
            [
                "39dec44d.8ad89c"
            ]
        ]
    },
    {
        "id": "f0eb240ea394c5db",
        "type": "exec",
        "z": "78343655.9fb1a8",
        "command": "sudo shutdown -h now",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 600,
        "y": 380,
        "wires": [
            [],
            [
                "731ec15f2b77f268"
            ],
            []
        ]
    },
    {
        "id": "034fdd57bb82ce7a",
        "type": "ui_button",
        "z": "78343655.9fb1a8",
        "name": "shutdown",
        "group": "31787600.224eaa",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#FF005C",
        "className": "",
        "icon": "",
        "payload": "シャットダウンします。よろしいですか？",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 60,
        "y": 380,
        "wires": [
            [
                "54765787a86b4e8e"
            ]
        ]
    },
    {
        "id": "6a643efd10cf70c4",
        "type": "comment",
        "z": "78343655.9fb1a8",
        "name": "シャットダウン",
        "info": "",
        "x": 100,
        "y": 340,
        "wires": []
    },
    {
        "id": "731ec15f2b77f268",
        "type": "debug",
        "z": "78343655.9fb1a8",
        "name": "エラー",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 380,
        "wires": []
    },
    {
        "id": "54765787a86b4e8e",
        "type": "ui_toast",
        "z": "78343655.9fb1a8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "確認",
        "name": "",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "49467502f604ce62"
            ]
        ]
    },
    {
        "id": "49467502f604ce62",
        "type": "switch",
        "z": "78343655.9fb1a8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "f0eb240ea394c5db"
            ]
        ]
    },
    {
        "id": "b6a240e5.2c4d5",
        "type": "function",
        "z": "92130b74.2074b8",
        "name": "設定読出",
        "func": "let setting=global.get(\"setting_data\");\nlet clients=Object.keys(setting).sort();\n\nnew_setting={};\nfor(let i = 0; i < clients.length; ++i){\n    let temp={};\n    let data={};\n    let id_list=Object.keys(setting[clients[i]][\"data\"]).sort();\n    for(let j = 0; j < id_list.length; ++j){\n        let type=setting[clients[i]][\"data\"][id_list[j]][\"type\"];\n        if(type==\"DOUT\"||type==\"AOUT\"){\n            temp[id_list[j]]=setting[clients[i]][\"data\"][id_list[j]];\n        }\n    }\n    data[\"data\"]=temp;\n    data[\"name\"]=setting[clients[i]][\"name\"];\n    new_setting[clients[i]]=data;\n}\n\nmsg.setting=new_setting;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "4331de34.2952b",
                "4f4b2ea1.3110b"
            ]
        ]
    },
    {
        "id": "98c1ad6a.e693f",
        "type": "ui_ui_control",
        "z": "92130b74.2074b8",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "102a747d.82f34c"
            ]
        ]
    },
    {
        "id": "102a747d.82f34c",
        "type": "switch",
        "z": "92130b74.2074b8",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ユニット操作",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 140,
        "wires": [
            [
                "b6a240e5.2c4d5"
            ]
        ]
    },
    {
        "id": "6dc3eb1b.e4ca74",
        "type": "link in",
        "z": "92130b74.2074b8",
        "name": "",
        "links": [
            "59fa77e3.56f538"
        ],
        "x": 415,
        "y": 220,
        "wires": [
            [
                "4331de34.2952b",
                "6ea5e8dd.a33e98"
            ]
        ]
    },
    {
        "id": "4331de34.2952b",
        "type": "ui_template",
        "z": "92130b74.2074b8",
        "group": "208d3918.4b0066",
        "name": "ユニット操作",
        "order": 11,
        "width": 30,
        "height": 30,
        "format": "<select name=\"クライアント名\" id=\"client_select\" ></select>\n\n<p id=\"a_title\">アナログ値操作</p>\n\n<div class=\"a_body\">\n<div class=\"a_wrapper1\" id=\"a_wrapper\"></div>\n</div>\n\n<p id=\"d_title\">デジタル値操作</p>\n\n<div class=\"d_body\">\n<div class=\"d_wrapper1\" id=\"d_wrapper\"></div>\n</div>\n<script>\n\n(function(scope) {\n     function pulldown_create(option_list,id,func){\n        initialize(id);\n        let select = document.getElementById(id);\n        select.onchange=func;\n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n        \n            //option要素にvalueと表示名を設定\n            option.value = option_list[i][0];\n            option.textContent = option_list[i][1] ;\n            //select要素にoption要素を追加する\n            select.appendChild(option);\n        }\n    }\n    \n    function create_options(setting){\n        clients=Object.keys(setting).sort();\n        console.log(clients);\n        let option_list=[];\n        for(let i=0;i<clients.length;++i){\n            let option=[]\n            option.push(clients[i])\n            option.push(setting[clients[i]][\"name\"]);\n            option_list.push(option);\n        }\n        option_list.unshift([\"not_selected\",\"選択してください\"]);\n        return option_list;\n    }\n    \n    function add_data(id,data,setting){\n        let is_display=setting[\"disp\"];\n        let type=setting[\"type\"];\n\n        if (is_display!=0 && type==\"DOUT\"){\n            let d_value=document.getElementById(id);\n            d_value.innerHTML=\"\";\n            //d_value.classList.add('circle');\n            d_value.className=\"circle\"\n            if (data==1){\n               // console.log(data);\n                d_value.style.backgroundColor=\"#00FF33\";\n            }\n            if (data==0){\n                d_value.style.backgroundColor=\"#c0c0c0\";\n            }\n        }\n        \n        if (is_display!=0 && type==\"AOUT\"){\n            let a_value=document.getElementById(id);\n            let value=Number(data);\n            if(Number.isInteger(value)){\n                a_value.innerHTML=String(value);\n            }else{\n                a_value.innerHTML=String(value.toFixed(2));\n            }\n        }\n        \n    }\n    \n    function create_element(parent_id,id,setting){\n      \n        let element=document.getElementById(parent_id);\n        let type=setting[\"type\"];\n        let is_display=setting[\"disp\"]\n        let name=setting[\"name\"];\n        let unit=setting[\"unit\"];\n        let out_low=setting[\"out_l\"];\n        let out_high=setting[\"out_h\"];\n        let child=document.createElement(\"div\");\n        child.className=\"item\";\n        if (parent_id===\"d_wrapper\"){\n            child.innerHTML=`<div class=\"test\"><p class=\"data-name\" id=${id}_name>${name}</p>\n                                <p><span id=\"${id}_value\" class=\"circle\"></span></p></div>\n                                <button type=\"button\" id=${id}-on 　size=\"10\" class=\"button\">ON</button>\n                                <button type=\"button\" id=${id}-off size=\"10\" class=\"button\">OFF</button>`\n            element.appendChild(child);\n            let on_button=document.getElementById(`${id}-on`);\n            let off_button=document.getElementById(`${id}-off`);\n            on_button.onclick=send_data;\n            off_button.onclick=send_data;\n        }\n        if(parent_id===\"a_wrapper\"){\n            \n            child.innerHTML=` <div class=\"test\">\n                                    <p class=\"data-name\" id=${id}_name>${name}</p>\n                                <p>\n                                    <span class=\"data-value\" id=${id}_value>'--'</span><span class=\"data-unit\" id=${id}_unit>${unit}</span>\n                                </p>\n                                <input type=\"number\" id=${id}-input><br>\n                                <button type=\"button\" id=${id}-a size=\"10\" class=\"button\">確定</button>\n                                </div>`\n            element.appendChild(child);\n            let a_button=document.getElementById(`${id}-a`);\n            let input=document.getElementById(`${id}-input`);\n            input.min=Number(out_low);\n            input.max=Number(out_high);\n            \n            a_button.onclick=send_data;\n        }\n    }\n  \n    function initialize(id){\n        let element=document.getElementById(id);\n        element.innerHTML=\"\";\n    }\n    \n    function create_frame(){\n        initialize(\"a_wrapper\");\n        initialize(\"d_wrapper\");\n        let setting=g_setting;\n        \n        let client=document.getElementById(\"client_select\").value;\n        let id_list=Object.keys(setting[client][\"data\"]).sort();\n        \n        for (let i=0;i<id_list.length;++i){\n            let type=setting[client][\"data\"][id_list[i]][\"type\"];\n            let is_display=setting[client][\"data\"][id_list[i]][\"disp\"];\n            if (is_display!=0&&type==\"DOUT\"){\n                create_element(\"d_wrapper\",id_list[i],setting[client][\"data\"][id_list[i]]);\n            }\n            if (is_display!=0&&type==\"AOUT\"){\n                create_element(\"a_wrapper\",id_list[i],setting[client][\"data\"][id_list[i]]);\n            }\n            \n        }\n    }\n    \n    function send_data(){\n        let client=document.getElementById(\"client_select\").value;\n        let element_id=this.id.split('-')[0];\n        let setting=g_setting[client][\"data\"][element_id];\n        let element_type=this.id.split('-')[1];\n        if (element_type===\"on\"){\n            scope.send({payload:[element_id,1]});\n        }\n         if (element_type===\"off\"){\n            scope.send({payload:[element_id,0]});\n        }\n        \n        if (element_type===\"a\"){\n            let value=Number(document.getElementById(`${element_id}-input`).value);\n            let out_low=Number(setting[\"out_l\"]);\n            let out_high=Number(setting[\"out_h\"]);\n            if((value<=out_high)&&(value>=out_low)){\n                scope.send({payload:[element_id,value]});\n            }else{\n                window.alert(\"無効な値です\");\n            }\n                \n            \n        }\n    }\n    \n    scope.$watch('msg.setting', (current, previous) => {\n        if(current!=null){\n            g_setting=current;\n            let option_list=create_options(g_setting);\n            pulldown_create(option_list,\"client_select\",create_frame);\n        }\n    });\n\n    scope.$watch('msg', function(msg) {\n        if(msg){\n            let setting=g_setting;\n            let selected_client=document.getElementById(\"client_select\").value;\n            let actual_client=msg.client;\n            let client_data=msg.payload;\n            let id_list=Object.keys(setting[selected_client][\"data\"]).sort();\n            if(selected_client==actual_client){\n                for(let i=0;i<id_list.length;++i){\n\n                    add_data(`${id_list[i]}_value`,client_data[id_list[i]],setting[selected_client][\"data\"][id_list[i]]);\n                }\n            }\n        }\n    });\n    \n   \n  \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "7b4bbd44.874f94",
                "6de2d55c.d792ec"
            ]
        ]
    },
    {
        "id": "bc7fe97b.42cf48",
        "type": "mqtt out",
        "z": "92130b74.2074b8",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "86fbcd55.ef339",
        "x": 1170,
        "y": 140,
        "wires": []
    },
    {
        "id": "173b38fc.440df7",
        "type": "debug",
        "z": "92130b74.2074b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 80,
        "wires": []
    },
    {
        "id": "a8a8961c.6e3198",
        "type": "json",
        "z": "92130b74.2074b8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "173b38fc.440df7",
                "bc7fe97b.42cf48"
            ]
        ]
    },
    {
        "id": "7b4bbd44.874f94",
        "type": "debug",
        "z": "92130b74.2074b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 80,
        "wires": []
    },
    {
        "id": "6de2d55c.d792ec",
        "type": "function",
        "z": "92130b74.2074b8",
        "name": "",
        "func": "let topic=msg.payload[0];\nlet value=msg.payload[1];\ntopic = topic.split('_'); \ntopic=topic.join('/'); \nmsg.topic=\"/\"+topic;\nmsg.payload=Number(value);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "a8a8961c.6e3198"
            ]
        ]
    },
    {
        "id": "6ea5e8dd.a33e98",
        "type": "debug",
        "z": "92130b74.2074b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "4f4b2ea1.3110b",
        "type": "debug",
        "z": "92130b74.2074b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "01028b3a1fd6e630",
        "type": "ui_template",
        "z": "8f11d900e2c81d8d",
        "group": "eb5b7c1b6e50479c",
        "name": "カメラ設定",
        "order": 1,
        "width": "30",
        "height": "30",
        "format": "<button type=\"button\" id=\"add\" size=\"10\" class=\"button\" >カメラ追加</button>\n<table border=\"1\" width=\"1000\" id=\"table\" >\n    \n    <thead>\n        <tr>\n            <th>No.</th>\n            <th>名前</th>\n            <th>カメラサーバーIP</th>\n            <th>USBポート</th>\n            <th>動画ストレージ</th>\n            <th>有効\\無効</th>\n            <th>操作</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n<div class=\"flexb\">\n<button type=\"button\" id=\"register\" 　size=\"10\" class=\"button\">登録</button>\n<button type=\"button\" id=\"cancel\" size=\"10\" class=\"button\"  >キャンセル</button>\n\n</div>\n\n\n<script>\n(function(scope) {\n    let add_button = document.getElementById(\"add\");\n    let register_button=document.getElementById(\"register\");\n    let cancel_button=document.getElementById('cancel');\n    let table_data=document.getElementById(\"table\");\n    \n    scope.$watch('msg.payload', (current, previous) => {\n        console.log(current,previous);\n        table_initialize();\n        table_create(current,\"table\");\n        \n    });\n    \n    \n    function table_initialize(){\n        const table_length=table_data.rows.length-1;\n        console.log(table_data);\n        for(let i = 0; i < table_length; ++i){\n            // tbody要素にある最後の行（tr要素）を削除\n            table_data.deleteRow(-1);\n        }\n        \n    }\n \n     function input_create(type,id,value){\n        let input = document.createElement('input');\n        input.type=type;\n        input.id=id;\n        input.value=value;\n        input.className=\"mail\"\n        return input;\n    } \n    \n    function pulldown_create(option_list,id,value){\n        \n        let select = document.createElement(\"select\");\n        select.id=id;\n        \n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n        \n            //option要素にvalueと表示名を設定\n            option.value = String(i);\n            option.textContent = option_list[i] ;\n            if (option.value==value){\n                option.selected=true;\n            }\n            //select要素にoption要素を追加する\n            \n            select.appendChild(option);    \n        }\n        return select;\n    }\n    \n    function link_create(id,href){\n       \n        let link = document.createElement(\"a\");\n        link.id=id;\n        link.href=href\n        link.innerText=href\n        \n        return link\n        \n    }\n    \n    \n    \n         \n    function table_create(data){\n      \n        for(let i = 0; i < data.length; ++i){\n            let camera_name=data[i][0]\n            let camera_address=data[i][1];\n            let camera_port=data[i][2];\n            let movie_strage=data[i][3];\n            let movie_address=\"http://\"+camera_address+\":1880/ui/#!/8\";\n            let is_valid=data[i][4];\n            \n            let cell=[];\n            cell[0]=document.createTextNode(String(i));\n            cell[1]=input_create(\"text\",`camera_name_${i}`,camera_name);\n            cell[2]=input_create(\"text\",`camera_address_${i}`,camera_address);\n            cell[3]=pulldown_create([\"右上(青)\",\"右下(青)\",\"左上(黒)\",\"左下(黒)\"],`camera_port_${i}`,camera_port);\n            cell[4]=link_create(`movie_address_${i}`,movie_address);\n            cell[5]=pulldown_create([\"無効\",\"有効\"],`is_valid_${i}`,is_valid);\n            cell[6]=button_create(`delete_${i}`);\n            \n            let new_row = table_data.insertRow(-1);\n            let new_cell=[];\n            for(let j = 0; j < cell.length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n        }\n    }\n    \n    function button_create(idx){\n       let button1 = document.createElement(\"button\");\n       button1.id=idx;\n       button1.innerText=\"削除\";\n       button1.onclick=delete_row;\n      \n       return button1;\n        \n    }\n    \n    function insert_table_data(){\n        const rows_length=table_data.rows.length;\n        const cells_length=table_data.rows[0].cells.length;\n        \n        let cell=[];\n        cell[0]=document.createTextNode(String(rows_length-1));\n        cell[1]=input_create(\"text\",`camera_name_${rows_length-1}`,\"\");\n        cell[2]=input_create(\"text\",`camera_address_${rows_length-1}`,\"\");\n        cell[3]=pulldown_create([\"右上(青)\",\"右下(青)\",\"左上(黒)\",\"左下(黒)\"],`camera_port_${rows_length-1}`,1);\n        cell[4]=link_create(`movie_address_${rows_length-1}`,\"\");\n        cell[5]=pulldown_create([\"無効\",\"有効\"],`is_valid_${rows_length-1}`,1);\n        cell[6]=button_create(`delete_${rows_length-1}`);\n        \n        let new_row = table_data.insertRow(-1);\n        let new_cell=[];\n        \n        for(let j = 0; j < cells_length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n            \n    }\n    \n   function is_duplicated(elements) {\n        // Setを使って、配列の要素を一意にする\n        console.log(elements);\n        const setElements = new Set(elements);\n        console.log(setElements.size !== elements.length);\n        return setElements.size !== elements.length;\n    }\n    \n    function send_data(){\n        const data=load_table_data()[0];\n        const address_data=load_table_data()[1];\n        console.log(data);\n        scope.send({payload:data});\n       \n    }\n    \n     function load_table_data(){\n        const data=[];\n        const address_data=[];\n        for(let i = 0; i < table_data.rows.length-1; ++i){\n            let name_value=document.getElementById(`camera_name_${i}`).value;\n            let address_value=document.getElementById(`camera_address_${i}`).value;\n            let port_value=document.getElementById(`camera_port_${i}`).value;\n            let movie_value=document.getElementById(`movie_address_${i}`).href;\n            let is_valid_value=document.getElementById(`is_valid_${i}`).value;\n            console.log(name_value,address_value,is_valid_value);\n            data.push([name_value,address_value,port_value,movie_value,is_valid_value]);\n            address_data.push(address_value)\n           \n        }\n        return [data,address_data];\n        \n    }\n    \n    function delete_row(){\n        console.log(table_data);\n        //console.log($e.currentTarget);\n        console.log(this);\n        const index1=this.id.split('_')[1];\n        console.log(index1);\n        const row_index=Number(index1)+1;\n        table_data.deleteRow(row_index);\n        \n       // if (table_data.rows.length!==row_index){\n            update_table(row_index);\n        //}\n            \n    }\n    \n    function update_table(table_index){\n        //console.log(table_index);\n        \n        for(let i = table_index; i < table_data.rows.length; ++i){\n           \n            console.log(table_data.rows.length);\n            table_data.rows[i].cells[0].innerText=String(i-1);\n            //console.log(table_data.rows[i].cells[0].innerText);\n            let name=document.getElementById(`camera_name_${i}`);\n            let address=document.getElementById(`camera_address_${i}`);\n            let port=document.getElementById(`camera_port_${i}`);\n            let movie=document.getElementById(`movie_address_${i}`);\n            let is_valid=document.getElementById(`is_valid_${i}`);\n            let delete_button=document.getElementById(`delete_${i}`);\n            name.id=`camera_name_${i-1}`;\n            address.id=`camera_address_${i-1}`;\n            port.id=`camera_port_${i-1}`;\n            movie.id=`movie_address_${i-1}`;\n            is_valid.id=`is_valid_${i-1}`\n            delete_button.id=`delete_${i-1}`\n            console.log(address.id,is_valid.id,delete_button.id);\n            \n    \n        }\n        \n         console.log(table_data);\n    }\n    \n    function get_data(){\n        \n        scope.send({payload:\"get_data\"});\n    }\n        \n        \n        \n    \n    register_button.onclick = send_data;\n    add_button.onclick = insert_table_data;\n    cancel_button.onclick=get_data;\n  \n  \n\n   \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "18cc6cd3d228350d",
                "42ee2fd03be8d96d"
            ]
        ]
    },
    {
        "id": "0b22450c25072025",
        "type": "function",
        "z": "8f11d900e2c81d8d",
        "name": "カメラ設定保存",
        "func": "camera_setting=msg.payload;\nglobal.set(\"camera_setting\",camera_setting);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "9cf4be4b2440043e",
        "type": "function",
        "z": "8f11d900e2c81d8d",
        "name": "カメラ設定データ読出",
        "func": "msg.payload=global.get(\"camera_setting\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "01028b3a1fd6e630",
                "66d381b9345b613f"
            ]
        ]
    },
    {
        "id": "5fa37df975247b76",
        "type": "ui_ui_control",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "events": "all",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "96ab76f93c8743ed"
            ]
        ]
    },
    {
        "id": "96ab76f93c8743ed",
        "type": "switch",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "カメラ設定",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "カメラデータ表示",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "9cf4be4b2440043e"
            ],
            [
                "9cf4be4b2440043e"
            ]
        ]
    },
    {
        "id": "18cc6cd3d228350d",
        "type": "debug",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 140,
        "wires": []
    },
    {
        "id": "42ee2fd03be8d96d",
        "type": "switch",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "get_data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 220,
        "wires": [
            [
                "0b22450c25072025"
            ],
            [
                "9cf4be4b2440043e"
            ]
        ]
    },
    {
        "id": "66d381b9345b613f",
        "type": "ui_template",
        "z": "8f11d900e2c81d8d",
        "group": "8360c55a.442a28",
        "name": "カメラデータ表示",
        "order": 1,
        "width": "27",
        "height": "27",
        "format": "\n\n<div id=\"camera_wrapper\" class=\"camera_wrapper\" align=\"center\">\n    \n</div>\n<script>\n(function(scope) {\n    \n    scope.$watch('msg.payload', (current, previous) => {\n        const data=current;\n        const parent_id=\"camera_wrapper\";\n        initialize(parent_id);\n        add_data([],parent_id);\n        add_data(data,parent_id);\n    });\n    \n    function initialize(id){\n        element=document.getElementById(id);\n        element.innerHTML=\"\";\n    }\n    \n    function create_wrapper(parent_id,id){\n        const parent=document.getElementById(parent_id);\n        const div_node=document.createElement(\"div\"); \n        div_node.id=id;\n        parent.appendChild(div_node);\n        console.log(parent);\n    }\n    \n    function add_data(data,parent_id){\n        //console.log(data,parent_id);\n        for(let i = 0; i < data.length; ++i){\n            \n           let src=`http://${data[i][1]}:5189${data[i][2]}?action=stream`;\n            let name=data[i][0];\n            let is_valid=data[i][4];\n            if (is_valid==\"1\"){\n                create_wrapper(parent_id,`camera_${i}`);\n                add_name(`camera_${i}`,name);\n                add_img(`camera_${i}`,src,640,360);\n               \n            }\n            \n        }\n        \n    }\n    \n    function add_img(parent_id,src,width,height){\n        console.log(parent_id,src,width,height);\n        const parent = document.getElementById(parent_id);\n        const child=document.createElement(\"img\");\n        child.src=src;\n        child.height=height;\n        child.width=width;\n        parent.appendChild(child);\n    }\n    \n    function add_name(parent_id,name){\n        console.log(parent_id,name);\n        const parent = document.getElementById(parent_id);\n        const child=document.createTextNode(name);\n        console.log(parent,child);\n        parent.appendChild(child);\n    }\n    \n    \n    \n    \n    \n    \n  \n\n   \n})(scope);\n</script>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a1536252.66299",
        "type": "ui_template",
        "z": "8f11d900e2c81d8d",
        "group": "f4b715c4.813018",
        "name": "動画データ表示",
        "order": 1,
        "width": "30",
        "height": "30",
        "format": "<select name=\"カメラ名\" id=\"camera_port\" ></select>\n\n<label>\n    日付\n    <input type=\"date\" id=\"date\" name=\"date\">\n</label>\n\n<button type=\"button\" id=\"get_button\" class=\"button\">データ取得</button>\n<div id=\"video_wrapper\">\n</div>\n\n<table border=\"1\" width=\"1000\" id=\"table\" >\n    \n    <thead>\n        <tr>\n            <th>時刻</th>\n            <th>ファイル名</th>\n            <th>再生</th>\n            <th>ダウンロード</th>\n            \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n    \n\n<script>\n(function(scope) {\n    \n    \n    scope.$watch('msg.camera_setting', (current, previous) => {\n        let filtered_data=filter_data(current);\n        pulldown_create(filtered_data,\"camera_port\");\n        \n    });\n    \n    \n    scope.$watch('msg.movie_list', function(msg) {\n        console.log(msg);\n        if (msg) {\n            table_initialize();\n            table_create(msg);\n        }\n    });\n    \n    scope.$watch('msg.movie_select', (current, previous) => {\n        console.log(current,previous);\n        let date_value=current[0];\n        let port_value=current[1];\n        document.getElementById(\"date\").value=date_value;\n        let port= document.getElementById(\"camera_port\");\n        port.value=port_value;\n        for (let i=0;port.options.length;++i){\n            if (port.options[i].value==port.value){\n                port.options[i].selected==true;\n                console.log(port.options[i]);\n            }\n        }\n    });\n    \n    function table_initialize(){\n        let table_data=document.getElementById(\"table\");\n        const table_length=table_data.rows.length-1;\n        console.log(table_data);\n        for(let i = 0; i < table_length; ++i){\n            // tbody要素にある最後の行（tr要素）を削除\n            table_data.deleteRow(-1);\n        }\n        \n    }\n    \n    function a_create(file_name,text){\n        let a=document.createElement(\"a\");\n        let usb_port=file_name.split(\"_\")[0];\n        a.href=`/files/${usb_port}/${file_name}`;\n        a.download=`/files/${usb_port}/${file_name}`;\n        a.innerText=text\n        \n        return a\n    }\n    \n    function table_create(data){\n       let table_data=document.getElementById(\"table\"); \n        \n        \n        for(let i = 0; i < data.length; ++i){\n            let date=data[i][0]\n            let file_name=data[i][1];\n            \n            let cell=[];\n            cell[0]=document.createTextNode(String(date));\n            cell[1]=document.createTextNode(String(file_name));\n            cell[2]=button_create(`play_${i}`,\"再生\",file_name,play_movie);\n            cell[3]=a_create(file_name,\"ダウンロード\");\n            \n            let new_row = table_data.insertRow(-1);\n            let new_cell=[];\n            for(let j = 0; j < cell.length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n        }\n    }\n    \n    function filter_data(data){\n        let new_data=[];\n        for(let i = 0; i < data.length; ++i){\n            let camera_address=data[i][1];\n            if (camera_address==location.hostname){\n                new_data.push(data[i]);\n            }\n        }\n        console.log(new_data)\n        return new_data;\n        \n        \n    }\n    \n    function pulldown_create(option_list,id){\n        let select = document.getElementById(id);\n        select.innerText=\"\";\n        let new_option=[];\n        for(let i = 0; i < option_list.length; ++i){\n            is_valid=option_list[i][4];\n            if(is_valid==\"1\"){\n                new_option.push(option_list[i]);\n            }\n        }\n        \n        for(let i = 0; i < new_option.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = new_option[i][2];\n            option.textContent = new_option[i][0] ;\n\n            //select要素にoption要素を追加する\n            select.appendChild(option);\n        }\n    }\n    \n    \n    function get_info(){\n        let camera_port=document.getElementById(\"camera_port\").value;\n        let date=document.getElementById(\"date\").value;\n        console.log(camera_port,date);\n        scope.send({payload:[date,camera_port]});\n\n    }\n    \n    function button_create(idx,text,name,func){\n       let button = document.createElement(\"button\");\n       button.id=idx;\n       button.innerText=text;\n       button.name=name\n       button.onclick=func;\n      \n       return button;\n        \n    }\n    \n    function download_movie(){\n        console.log(this);\n        \n        \n    }\n    \n    function play_movie(){\n        let video_wrapper=document.getElementById(\"video_wrapper\");\n        video_wrapper.innerText=\"\";\n        let file_name=this.name;\n        let usb_port=file_name.split(\"_\")[0];\n        let src=`/files/${usb_port}/${file_name}`\n        let video=document.createElement(\"video\");\n        video.src=src\n        video.setAttribute(\"controls\",\"\");\n        video.setAttribute(\"autoplay\",\"\");\n        video_wrapper.appendChild(video);\n      \n    }\n    \n    \n    \n   get_button.onclick=get_info;\n   \n})(scope);\n</script>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "87354246.3e356",
                "fb0f2509.02df38"
            ]
        ]
    },
    {
        "id": "d036f941.b58b48",
        "type": "function",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "func": "\nlet camera_setting=global.get(\"camera_setting\");\nlet movie_select=global.get(\"movie_select\");\n\nmsg.camera_setting=camera_setting;\nmsg.movie_select=movie_select;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 480,
        "wires": [
            [
                "a1536252.66299",
                "2745d01.1827c3"
            ]
        ]
    },
    {
        "id": "8b4f8af8.6b22f8",
        "type": "ui_ui_control",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "events": "all",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "e4509318.6b75c"
            ]
        ]
    },
    {
        "id": "e4509318.6b75c",
        "type": "switch",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "動画データ表示",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "fb0f2509.02df38",
                "d036f941.b58b48"
            ]
        ]
    },
    {
        "id": "fb0f2509.02df38",
        "type": "function",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "func": "let movie_select=global.get(\"movie_select\");\nlet movie_info=global.get(\"movie_info\");\nlet date=movie_select[0].split(\"-\").join(\"\");\nlet usb_port=\"usb\"+movie_select[1]\n\nlet movie_list=movie_info[usb_port];\nlet filtered_movie_list=[];\nif (movie_list!=null){\n    \n    for(let i=0;i<movie_list.sort().length;++i){\n        if (movie_list[i].startsWith(usb_port+\"_\"+date)){\n            let filtered_date=movie_list[i].substr(-10,4);\n            let filtered_movie=movie_list[i];\n            filtered_movie_list.push([filtered_date,filtered_movie])\n        }\n    }\n}else{\n    filtered_movie_list=[];\n}\n\n\nmsg.movie_list=filtered_movie_list;\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "a1536252.66299",
                "db92d13c.ac59f"
            ]
        ]
    },
    {
        "id": "5548fcd1.5c7eb4",
        "type": "link in",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "links": [],
        "x": -15,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "87354246.3e356",
        "type": "function",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "func": "global.set(\"movie_select\",msg.payload)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "db92d13c.ac59f",
        "type": "debug",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "f1e2e42f.e747b8",
        "type": "debug",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 280,
        "wires": []
    },
    {
        "id": "2745d01.1827c3",
        "type": "debug",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "a2142f58.5db14",
        "type": "link out",
        "z": "8f11d900e2c81d8d",
        "name": "",
        "links": [
            "7084f588.b4025c"
        ],
        "x": 1875,
        "y": 220,
        "wires": []
    },
    {
        "id": "b12e4bf2582169aa",
        "type": "ui_ui_control",
        "z": "916a9af3eb5cec35",
        "name": "",
        "events": "all",
        "x": 300,
        "y": 140,
        "wires": [
            [
                "3b466c4f84fef2f4"
            ]
        ]
    },
    {
        "id": "469004e7305d070a",
        "type": "json",
        "z": "916a9af3eb5cec35",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1210,
        "y": 140,
        "wires": [
            [
                "c0dab09d54db2d17"
            ]
        ]
    },
    {
        "id": "c0dab09d54db2d17",
        "type": "file",
        "z": "916a9af3eb5cec35",
        "name": "設定保存",
        "filename": "/home/pi/SSOCR/SSOCR_setting.txt",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3b466c4f84fef2f4",
        "type": "file in",
        "z": "916a9af3eb5cec35",
        "name": "",
        "filename": "/home/pi/SSOCR/SSOCR_setting.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "c60105bb00999c46"
            ]
        ]
    },
    {
        "id": "c60105bb00999c46",
        "type": "json",
        "z": "916a9af3eb5cec35",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 140,
        "wires": [
            [
                "fe6d424503e4dc04"
            ]
        ]
    },
    {
        "id": "fe6d424503e4dc04",
        "type": "ui_template",
        "z": "916a9af3eb5cec35",
        "group": "1c7831878985d276",
        "name": "７セグ表示認識設定(旧)",
        "order": 1,
        "width": "40",
        "height": "62",
        "format": "<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"roi\">表示領域指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>X1</th>\n            <th>Y1</th>\n            <th>X2</th>\n            <th>Y2</th>\n            <th>X3</th>\n            <th>Y3</th>\n            <th>X4</th>\n            <th>Y4</th>\n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x1\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"roi_y1\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x2\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_y2\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x3\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"roi_y3\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x4\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_y4\"></td>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n\n<div  class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"roi_register\">確定</button>\n    <button type=\"button\" class=\"button\" id=\"roi_reset\">キャンセル</button>\n</div>\n<br>\n\n<div id=\"stage\">\n    <canvas id=\"background_layer\"></canvas>\n    <canvas id=\"ui_layer\"></canvas>\n</div>\n\n<div  class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"seg_add\">桁追加</button>\n    <button type=\"button\" class=\"button\" id=\"seg_delete\">桁削除</button>\n</div>\n<br>\n\n\n<table border=\"1\" id=\"segment_table\">\n    \n    <thead>\n        <tr>\n            <th>No.</th>\n            <th>セグメント登録</th>\n            <th>オフセットX</th>\n            <th>オフセットY</th>\n            <th>X1</th>\n            <th>Y1</th>\n            <th>X2</th>\n            <th>Y2</th>\n            <th>X3</th>\n            <th>Y3</th>\n            <th>小数点有無</th>\n            <th>小数点登録</th>\n            <th>小数点X</th>\n            <th>小数点Y</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n\n\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"on_color\">表示色指定</button>\n    \n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>青</th>\n            <th>緑</th>\n            <th>赤</th>\n           \n        </tr>\n        <tr>\n            <td><div id=\"on_color_blue\"></div></td> \n            <td><div id=\"on_color_green\"></div></td> \n            <td><div id=\"on_color_red\"></div></td> \n\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n    </table>\n    \n    <div style=\"background-color:#FF0000\" id=\"on_color_view\">&emsp;&emsp;</div>\n    <div id=\"on_color_value\"></div>\n    \n</div>\n<br>\n\n<div  class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"off_color\">消灯色指定</button>\n    \n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>青</th>\n            <th>緑</th>\n            <th>赤</th>\n           \n        </tr>\n        <tr>\n            <td><div id=\"off_color_blue\"></div></td> \n            <td><div id=\"off_color_green\"></div></td> \n            <td><div id=\"off_color_red\"></div></td> \n\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n    </table>\n\n    <div style=\"background-color:#FF0000\" id=\"off_color_view\">&emsp;&emsp;</div>\n    <div id=\"off_color_value\"></div>\n    \n    \n</div>\n<br>\n\n<div  class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"register\">登録</button>\n    <button type=\"button\" class=\"button\" id=\"cancel\">キャンセル</button>\n</div>\n<br>\n\n<script>\n(function(scope) {\n    //キャンバスの初期化\n    initialize_canvas();\n    \n    \n    scope.$watch('msg.payload', (current, previous) => {\n        if (current!=undefined){\n            console.log(current);\n           load_setting_to_ui(current);\n        }\n    });\n    \n    function load_setting_to_ui(setting){\n        document.querySelector(\"#roi_x1\").value=setting[\"roi\"][0];\n        document.querySelector(\"#roi_y1\").value=setting[\"roi\"][1];\n        document.querySelector(\"#roi_x2\").value=setting[\"roi\"][2];\n        document.querySelector(\"#roi_y2\").value=setting[\"roi\"][3];\n        document.querySelector(\"#roi_x3\").value=setting[\"roi\"][4];\n        document.querySelector(\"#roi_y3\").value=setting[\"roi\"][5];\n        document.querySelector(\"#roi_x4\").value=setting[\"roi\"][6];\n        document.querySelector(\"#roi_y4\").value=setting[\"roi\"][7];\n        \n        \n        const segment_setting=setting[\"segment\"];\n        setting_table_create(segment_setting);\n        \n        document.querySelector(\"#on_color_blue\").innerText=setting[\"on_color\"][0];\n        document.querySelector(\"#on_color_green\").innerText=setting[\"on_color\"][1];\n        document.querySelector(\"#on_color_red\").innerText=setting[\"on_color\"][2];\n        document.querySelector(\"#off_color_blue\").innerText=setting[\"off_color\"][0];\n        document.querySelector(\"#off_color_green\").innerText=setting[\"off_color\"][1];\n        document.querySelector(\"#off_color_red\").innerText=setting[\"off_color\"][2];\n       \n        cv['onRuntimeInitialized'] = () => {\n            roi();\n            draw_segment();\n            load_segment_color_to_ui();\n        }\n        \n    }\n\n    function setting_table_create(setting){\n        const table=document.querySelector(\"#segment_table\");\n        const cells_length=table.rows[0].cells.length;\n        table_delete(\"segment_table\");\n        console.log(setting);\n        \n        for(let i = 0; i < setting.length; ++i){\n            let seg_x1=setting[i][2]\n            let seg_y1=setting[i][3]\n            let seg_x2=setting[i][4]\n            let seg_y2=setting[i][5]\n            let seg_x3=setting[i][6]\n            let seg_y3=setting[i][7]\n            let is_decimal=setting[i][8]\n            let decimal_x=setting[i][9]\n            let decimal_y=setting[i][10]\n          \n           \n            let cell=[];\n            if(i==0){\n                cell[2]=document.createTextNode(\"\");\n                cell[3]=document.createTextNode(\"\");\n            }else{\n                let offset_x=setting[i][0]\n                let offset_y=setting[i][1]\n                cell[2]=input_create(\"number\",`offset_x_${i}`,offset_x,set_offset);\n                cell[3]=input_create(\"number\",`offset_y_${i}`,offset_y,set_offset);\n            }\n                \n            \n            cell[0]=document.createTextNode(String(i));\n            cell[1]=button_create(`seg_register_${i}`,set_segment_info);\n            cell[4]=input_create(\"number\",`seg_x1_${i}`,seg_x1,draw_segment);\n            cell[5]=input_create(\"number\",`seg_y1_${i}`,seg_y1,draw_segment);\n            cell[6]=input_create(\"number\",`seg_x2_${i}`,seg_x2,draw_segment);\n            cell[7]=input_create(\"number\",`seg_y2_${i}`,seg_y2,draw_segment);\n            cell[8]=input_create(\"number\",`seg_x3_${i}`,seg_x3,draw_segment);\n            cell[9]=input_create(\"number\",`seg_y3_${i}`,seg_y3,draw_segment);\n            cell[10]=pulldown_create([\"無\",\"有\"],`is_decimal_${i}`,is_decimal);\n            cell[11]=button_create(`decimal_register_${i}`,set_decimal_info);\n            cell[12]=input_create(\"number\",`decimal_x_${i}`,decimal_x,draw_segment);\n            cell[13]=input_create(\"number\",`decimal_y_${i}`,decimal_y,draw_segment);\n            \n        \n            let new_row = table.insertRow(-1);\n            let new_cell=[];\n        \n            for(let j = 0; j < cells_length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n            \n            if(i>0){\n        \n                document.querySelector(`#offset_x_${i}`).addEventListener(\"click\",draw_segment);\n                document.querySelector(`#offset_y_${i}`).addEventListener(\"click\",draw_segment);\n            }\n    \n        }\n    }\n    \n    function table_delete(id){\n        let table=document.getElementById(id);\n        const table_length=table.rows.length-1;\n        for(let i = 0; i < table_length; ++i){\n            // tbody要素にある最後の行（tr要素）を削除\n            table.deleteRow(-1);\n        }\n    }\n    \n    function load_segment_color_to_ui(){\n        const on_blue=Number(document.querySelector(\"#on_color_blue\").innerText);\n        const on_green=Number(document.querySelector(\"#on_color_green\").innerText);\n        const on_red=Number(document.querySelector(\"#on_color_red\").innerText);\n        console.log(on_blue,on_green,on_red);\n        const on_color=RGB2bgColor(on_red,on_green,on_blue);\n        console.log(on_color);\n        turn_color(\"on_color_view\",on_color);\n        \n        const off_blue=Number(document.querySelector(\"#off_color_blue\").innerText);\n        const off_green=Number(document.querySelector(\"#off_color_green\").innerText);\n        const off_red=Number(document.querySelector(\"#off_color_red\").innerText);\n        const off_color=RGB2bgColor(off_red,off_green,off_blue);\n        turn_color(\"off_color_view\",off_color);\n        \n    }\n    \n    \n \n    //表示領域指定のキャンセルボタンが押されたら、キャンバスを初期化\n    document.querySelector(\"#roi_reset\").onclick=initialize_canvas;\n    \n    //重ね合わせたキャンバスの初期化\n    function initialize_canvas(){\n        //画像のロード\n        const image = new Image();\n        image.src = '/20230803153442.jpg';\n        //画像が読み込まれたら、キャンバスの初期化を実行\n        image.onload= function(){\n            const stage=document.querySelector(\"#stage\");\n            const ui_canvas=document.querySelector(\"#ui_layer\");\n            const background_canvas=document.querySelector(\"#background_layer\");\n            //キャンバスの大きさを初期化\n            stage.style.height=\"720px\";\n            ui_canvas.width=1280;\n            ui_canvas.height=720;\n            background_canvas.width=1280;\n            background_canvas.height=720;\n            //キャンバスに画像をロード\n            drawCanvas(\"background_layer\",image,0,0,image.width,image.height,0,0,1280,720);\n        }\n    }\n    \n    //キャンバスに画像を書き込む\n    function drawCanvas(id,image,s_x,s_y,s_width,s_height,d_x,d_y,d_width,d_height) {\n        const canvas=document.querySelector(`#${id}`);\n\t    if (canvas.getContext('2d')) {\n            const context = canvas.getContext('2d');\n\t\t    context.drawImage(image,s_x,s_y,s_width,s_height,d_x,d_y,d_width,d_height);\n\t\t}\n    }\n    \n    //表示領域指定の表示領域ボタンが押されたら、関数set_roi_pointsを実行\n    document.querySelector(\"#roi\").onclick=set_roi_points;\n    \n    //表示領域の四隅４点座標をマウスのクリックで取得し、それらの座標を入力欄に出力する関数\n    function set_roi_points(){\n        let count=0;//マウスのクリック回数\n        let points=[];//クリックされた画像上の座標を格納\n        //キャンバスの情報を格納\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら関数get_roi_pointsを実行\n        canvas.addEventListener('click',get_roi_points);\n        \n        document.querySelector(\"#roi_reset\").addEventListener('click',function(){\n            initialize_canvas();\n            count=0;\n            points=[];\n            return\n        });\n     \n        //配列pointsにクリックされた時点でのマウス座標を、格納。クリック４回目で座標を入力欄に出力＋表示領域の可視化\n        function get_roi_points(e){\n            count++\n            //マウス座標をpointsに格納\n            points.push(e.offsetX);\n            points.push(e.offsetY);\n           //マウスのクリックカウントが４回なら以下の処理を実行 \n            if (count==4){\n                //キャンバス上でのマウスのクリックイベントの解除\n                canvas.removeEventListener('click', get_roi_points);\n            　　//座標を入力欄に格納\n                document.querySelector(\"#roi_x1\").value=points[0];\n                document.querySelector(\"#roi_y1\").value=points[1];\n                document.querySelector(\"#roi_x2\").value=points[2];\n                document.querySelector(\"#roi_y2\").value=points[3];\n                document.querySelector(\"#roi_x3\").value=points[4];\n                document.querySelector(\"#roi_y3\").value=points[5];\n                document.querySelector(\"#roi_x4\").value=points[6];\n                document.querySelector(\"#roi_y4\").value=points[7];\n                //表示領域の可視化\n                draw_roi_rectangle();\n            }\n        }\n    }\n    \n    //入力欄の数値をユーザーが変更したら、関数draw_roi_rectangleを実行\n    document.querySelector(\"#roi_x1\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y1\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x2\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y2\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x3\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y3\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x4\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y4\").onchange=draw_roi_rectangle;\n   \n    //四角形を描画する関数\n    function draw_roi_rectangle(){\n        //キャンバスのロード\n        let canvas=document.querySelector(`#ui_layer`);\n        let context = canvas.getContext('2d');\n        //キャンバスのクリア\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        //入力欄の情報を読み込み\n        const roi_x1=Number(document.querySelector(\"#roi_x1\").value);\n        const roi_y1=Number(document.querySelector(\"#roi_y1\").value);\n        const roi_x2=Number(document.querySelector(\"#roi_x2\").value);\n        const roi_y2=Number(document.querySelector(\"#roi_y2\").value);\n        const roi_x3=Number(document.querySelector(\"#roi_x3\").value);\n        const roi_y3=Number(document.querySelector(\"#roi_y3\").value);\n        const roi_x4=Number(document.querySelector(\"#roi_x4\").value);\n        const roi_y4=Number(document.querySelector(\"#roi_y4\").value);\n        //線分の描画\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x1,roi_y1,roi_x2,roi_y2);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x2,roi_y2,roi_x3,roi_y3);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x3,roi_y3,roi_x4,roi_y4);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x4,roi_y4,roi_x1,roi_y1);\n    }\n    \n    //線分を描画する関数\n    function draw_line(id,color,alpha,width,p1_x,p1_y,p2_x,p2_y){\n        //キャンバスのロード\n        let canvas=document.querySelector(`#${id}`);\n        let context = canvas.getContext('2d');\n        //現在のパスをリセット\n        context.beginPath();\n        //描画スタイルの指定\n        context.strokeStyle = color;//線色\n        context.lineWidth = width;//線幅\n        context.globalAlpha=alpha;//透過度\n        //線分の描画\n        context.moveTo(p1_x,p1_y);//始点の指定\n        context.lineTo(p2_x,p2_y)//終点の指定\n        context.stroke();//描画処理\n    }\n    \n    //確定ボタンが押されたら、関数roiを実行\n    document.querySelector(\"#roi_register\").onclick=roi;\n    \n    //画像を射影変換し、正面から見た画像に変換する関数\n    function roi(){\n      \n        const roi_x1=Number(document.querySelector(\"#roi_x1\").value);\n        const roi_y1=Number(document.querySelector(\"#roi_y1\").value);\n        const roi_x2=Number(document.querySelector(\"#roi_x2\").value);\n        const roi_y2=Number(document.querySelector(\"#roi_y2\").value);\n        const roi_x3=Number(document.querySelector(\"#roi_x3\").value);\n        const roi_y3=Number(document.querySelector(\"#roi_y3\").value);\n        const roi_x4=Number(document.querySelector(\"#roi_x4\").value);\n        const roi_y4=Number(document.querySelector(\"#roi_y4\").value);\n        //表示領域の縦線の組、横線の組について、組のうち長い線の長さを求める\n        const width=compare_horizonal_line_length(roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4)\n        const height=compare_vertical_line_length(roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4)\n        //変換前と変換後の四隅の点座標を配列に格納\n        const src_array=[roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4];//変換前\n        const dst_array= [0, 0,width, 0, width, height, 0, height];//変換後\n        //画像をキャンバスにロード\n        const src = cv.imread(\"background_layer\");\n        //変換後の画像の宣言\n       \n        let dst = new cv.Mat();\n        let dsize = new cv.Size(width, height);\n        //画像フォーマットの変換\n        let srcTri = cv.matFromArray(4, 1, cv.CV_32FC2, src_array);\n        let dstTri = cv.matFromArray(4, 1, cv.CV_32FC2, dst_array);\n        //変換前と変換後の四隅の座標から変換行列Ｍを求める\n        let M = cv.getPerspectiveTransform(srcTri, dstTri);\n        //変換前の画像srcについて、射影変換を適用し、変換後画像dstを得る\n        cv.warpPerspective(src, dst, M, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n        //キャンバスの描画内容を消去\n        erase_contents(\"ui_layer\");\n        //キャンバスを変換後画像サイズにリサイズ\n        resize_canvas(\"ui_layer\",width,height);\n        resize_canvas(\"background_layer\",width,height);\n        resize_canvas_wrapper(\"stage\",height);\n        //キャンバスに変換後画像をロード\n        cv.imshow('background_layer', dst);\n        //不要になったオブジェクトを削除\n        src.delete(); dst.delete(); M.delete(); srcTri.delete(); dstTri.delete();\n           \n        \n    \n    }\n    \n    //キャンバスの内容を消去する関数\n    function erase_contents(id){\n        const canvas =document.querySelector(`#${id}`);\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    //四角形の横線の長さを比較し、長い方を返却する関数\n    function compare_horizonal_line_length(x1,y1,x2,y2,x3,y3,x4,y4){\n        const horizonal_line_above_length=calc_dist(x1,y1,x2,y2);\n        const horizonal_line_below_length=calc_dist(x3,y3,x4,y4);\n        if (horizonal_line_above_length>horizonal_line_below_length){\n            return horizonal_line_above_length;\n        }else{\n            return horizonal_line_below_length;\n        }\n    }\n    \n    //四角形の縦線の長さを比較し、長い方を返却する関数\n    function compare_vertical_line_length(x1,y1,x2,y2,x3,y3,x4,y4){\n        const vertical_line_left_length=calc_dist(x1,y1,x4,y4);\n        const vertical_line_right_length=calc_dist(x2,y2,x3,y3);\n         if (vertical_line_left_length>vertical_line_right_length){\n            return vertical_line_left_length;\n        }else{\n            return vertical_line_right_length;\n        }\n    }\n    \n    //2点間の距離を算出し返却する関数\n    function calc_dist(x1,y1,x2,y2){\n        const pt = Math.round(Math.sqrt( Math.pow( x2-x1, 2 ) + Math.pow( y2-y1, 2 ) ) );\n        return pt;\n    } \n    \n    //キャンバスをリサイズする関数\n    function resize_canvas(id,width,height){\n        const canvas=document.querySelector(`#${id}`);\n        canvas.width=width\n        canvas.height=height\n    }\n    \n    //div要素のサイズをリサイズする関数\n    function resize_canvas_wrapper(id,height){\n        const wrapper=document.querySelector(`#${id}`);\n        wrapper.style.height=`${height}px`;\n    }\n    \n \n    //画像上のセグメントの左上、右上、右下をクリックし、それらの画像上の座標を入力欄に出力する関数\n    function set_segment_info(){\n        const id=this.id.split(\"_\")[2];\n        let count=0;//マウスのクリック回数\n        let points=[];//クリックされた画像上の座標を格納\n        //キャンバスのロード\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら、関数set_infoを実行\n        canvas.addEventListener('click',set_info);\n        //クリックされる度にクリックされた画像上の座標を配列に格納、クリック回数が３回で入力欄に配列の座標を出力\n        function set_info(e){\n            count++//カウントアップ\n            //マウス座標をpointsに格納\n            points.push(e.offsetX);\n            points.push(e.offsetY);\n            console.log(e.offsetX,e.offsetY);\n            //クリック回数が３回で下記の処理を実行\n            if (count==3){\n                //キャンバス上でのマウスのクリックイベントの解除\n                canvas.removeEventListener('click', set_info);\n                //座標を入力欄に出力\n                document.querySelector(`#seg_x1_${id}`).value=points[0];\n                document.querySelector(`#seg_y1_${id}`).value=points[1];\n                document.querySelector(`#seg_x2_${id}`).value=points[2];\n                document.querySelector(`#seg_y2_${id}`).value=points[3];\n                document.querySelector(`#seg_x3_${id}`).value=points[4];\n                document.querySelector(`#seg_y3_${id}`).value=points[5];\n            }\n        }\n    }\n    \n      //セグメントの入力欄の座標情報から、セグメントをキャンバスに描画する関数\n    function draw_segment(){\n        \n        const table=document.querySelector(\"#segment_table\");\n        const rows_length=table.rows.length;\n        \n        //キャンバスのロード\n        const canvas=document.querySelector(`#ui_layer`);\n        const  context = canvas.getContext('2d');\n        //キャンバスの初期化\n        //ontext.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        \n        for (let i=0;i<rows_length-1;++i){\n            //セグメントの入力欄の情報を格納\n            let x1=Number(document.querySelector(`#seg_x1_${i}`).value);\n            let y1=Number(document.querySelector(`#seg_y1_${i}`).value);\n            let x2=Number(document.querySelector(`#seg_x2_${i}`).value);\n            let y2=Number(document.querySelector(`#seg_y2_${i}`).value);\n            let x3=Number(document.querySelector(`#seg_x3_${i}`).value);\n            let y3=Number(document.querySelector(`#seg_y3_${i}`).value);\n           \n            context.beginPath();\n            //キャンバスの書式設定\n            context.lineJoin =\"round\";//線の終端のスタイル\n            context.strokeStyle = \"red\";//線色\n            context.lineWidth = 3;//線幅\n            context.globalAlpha=0.75;//透過度\n            //横辺、縦辺の長さを求める\n          \n            dist_x=calc_dist(x1,x2,x2,y2);\n            dist_y=calc_dist(x2,y2,x3,y3);\n            //x,y方向の距離を求める\n            d_x=Math.abs(x2-x1);\n            d_y=y2-y1;\n        \n            context.moveTo(x1,y1);//始点の指定\n            context.lineTo(x2,y2)//終点の指定\n            context.lineTo(x3,y3)//終点の指定\n            context.lineTo(x3-d_x,y3+d_y);\n            context.lineTo(x1,y1);\n            context.stroke();//描画処理\n            \n            context.beginPath();\n            is_decimal=Number(document.querySelector(`#is_decimal_${i}`).value);\n            if (is_decimal){\n            \n                let decimal_x=Number(document.querySelector(`#decimal_x_${i}`).value);\n                let decimal_y=Number(document.querySelector(`#decimal_y_${i}`).value);\n            \n                 // 円の中心座標: (100,100)\n                // 半径: 50\n                // 開始角度: 0度 (0 * Math.PI / 180)\n                // 終了角度: 360度 (360 * Math.PI / 180)\n                 // 方向: true=反時計回りの円、false=時計回りの円\n                context.arc( decimal_x, decimal_y, 10, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n\n                // 塗りつぶしの色\n                context.fillStyle = \"red\" ;\n\n                    // 塗りつぶしを実行\n                context.fill() ;\n    \n                // 線の色\n                context.strokeStyle = \"red\" ;\n\n                // 線の太さ\n                context.lineWidth = 1 ;\n\n                // 線を描画を実行\n                context.stroke() ;\n   \n            }\n        }\n        \n    }\n    \n    //表示色指定、消灯色指定ボタンをクリックで関数set_colorを実行\n    document.querySelector(\"#on_color\").onclick=set_color;\n    document.querySelector(\"#off_color\").onclick=set_color;\n    \n    //キャンバス上の画像をクリックし、クリックした座標の色情報をdivに出力\n    function set_color(){\n        //キャンバスのロード\n        const ui_canvas=document.querySelector(\"#ui_layer\");\n        const background_canvas=document.querySelector(\"#background_layer\");\n        const context = background_canvas.getContext('2d');\n        //画像が描画されているキャンバスが一番上にくるようにして、色を取得できるようにする\n        background_canvas.style.zIndex = 2;\n        ui_canvas.style.zIndex = 1;\n        //クリックされたボタンのidを取得\n        const idx=this.id;\n        //色を表示するdivのdomを指定\n        const color_view_id=`${this.id}_view`;\n        const color_view=document.querySelector(`#${color_view_id}`);\n        //キャンバス上でマウスがクリックされたら、関数get_rgbaを実行\n        background_canvas.addEventListener('click',get_rgba);\n        //クリックされた座標の色情報をdivに出力する\n        function get_rgba(e){\n            //キャンバスの枠幅、形状を取得\n            const borderWidth = 1;\n            const rect = e.target.getBoundingClientRect();\n\t        //  マウス座標の取得\n            const x = Math.round(e.clientX- rect.left - borderWidth);\n            const y =Math.round(e.clientY- rect.top - borderWidth);\n            //  指定座標のImageDataオブジェクトの取得 \n            const imagedata = context.getImageData(x, y, 1, 1);\n            //  RGBAの取得\n            const r = imagedata.data[0];        \n            const g = imagedata.data[1];\n            const b = imagedata.data[2];\n            const a = imagedata.data[3];\n            //青　緑、赤の輝度値を表に出力\n            document.querySelector(`#${idx}_blue`).innerText=b;\n            document.querySelector(`#${idx}_green`).innerText=g;\n            document.querySelector(`#${idx}_red`).innerText=r;\n            // RGBから#ffffff形式へ変換する\n            const color=RGB2bgColor(r,g,b)\n            //色表示処理\n            turn_color(color_view_id,color);\n            //クリックイベントの解除\n            background_canvas.removeEventListener('click', get_rgba);\n            //キャンバスの描画順序のリセット\n            ui_canvas.style.zIndex = 2;\n            background_canvas.style.zIndex = 1;\n        }\n    }\n    \n    //色をhtml上で表示する関数\n    function turn_color(id,color){\n        const element=document.querySelector(`#${id}`);\n        element.style.backgroundColor = color;\n    }\n        \n    // RGBから#ffffff形式へ変換する関数\n    function RGB2bgColor(r,g,b) {\n        r = r.toString(16);\n        if (r.length == 1) r = \"0\" + r;\n        g = g.toString(16);\n        if (g.length == 1) g = \"0\" + g;\n        b = b.toString(16);\n        if (b.length == 1) b = \"0\" + b;\n \n        return '#' + r + g + b;  \n    }\n    \n    \n    \n    \n    \n    //WEBUIの設定データを連想配列に格納\n    function push_setting_info(array){\n        let dict={}\n        for(let i=0;i<array.length;++i){\n            let dom=document.querySelector(`#${array[i]}`);\n            if(dom.tagName===\"INPUT\"){\n                dict[array[i]]=dom.value;\n            }else{\n                dict[array[i]]=dom.innerHTML;\n            }\n        }\n        return dict;\n    }\n    \n   \n    \n    function input_create(type,id,value,func){\n        let input = document.createElement('input');\n        input.type=type;\n        input.id=id;\n        input.value=value;\n        if(type==\"number\"){\n            input.className=type\n        }\n        if(func!=null){\n            input.onchange=func;\n        }\n        return input;\n    }\n    \n    \n    function button_create(id,func){\n        let button = document.createElement(\"button\");\n        button.id=id;\n        button.innerText=\"登録\";\n        if (func!=null){\n            button.onclick=func;\n        }\n   \n       return button;\n    }\n    \n    \n    function pulldown_create(option_list,id,value){\n        \n        let select = document.createElement(\"select\");\n        select.id=id;\n        \n        for(let i = 0; i < option_list.length; ++i){\n            //optio要素を新しく作る\n            let option = document.createElement('option');\n        \n            //option要素にvalueと表示名を設定\n            option.value = String(i);\n            option.textContent = option_list[i] ;\n            if (option.value==value){\n                option.selected=true;\n            }\n            //select要素にoption要素を追加する\n            \n            select.appendChild(option);    \n        }\n        return select;\n    }\n    \n    \n    document.querySelector(\"#seg_add\").onclick=insert_table_data;\n    function insert_table_data(){\n        const table=document.querySelector(\"#segment_table\");\n        const rows_length=table.rows.length;\n        const cells_length=table.rows[0].cells.length;\n        \n        let cell=[];\n        cell[0]=document.createTextNode(String(rows_length-1));\n        cell[1]=button_create(`seg_register_${rows_length-1}`,set_segment_info);\n        if(rows_length>1){\n            const seg_x1=Number(document.querySelector(\"#seg_x1_0\").value);\n            const seg_y1=Number(document.querySelector(\"#seg_y1_0\").value);\n            const seg_x2=Number(document.querySelector(\"#seg_x2_0\").value);\n            const seg_y2=Number(document.querySelector(\"#seg_y2_0\").value);\n            const seg_x3=Number(document.querySelector(\"#seg_x3_0\").value);\n            const seg_y3=Number(document.querySelector(\"#seg_y3_0\").value);\n            const decimal_x=Number(document.querySelector(\"#decimal_x_0\").value);\n            const decimal_y=Number(document.querySelector(\"#decimal_y_0\").value);\n            \n        \n            cell[2]=input_create(\"number\",`offset_x_${rows_length-1}`,\"0\",set_offset);\n            cell[3]=input_create(\"number\",`offset_y_${rows_length-1}`,\"0\",set_offset);\n            cell[4]=input_create(\"number\",`seg_x1_${rows_length-1}`,seg_x1,draw_segment);\n            cell[5]=input_create(\"number\",`seg_y1_${rows_length-1}`,seg_y1,draw_segment);\n            cell[6]=input_create(\"number\",`seg_x2_${rows_length-1}`,seg_x2,draw_segment);\n            cell[7]=input_create(\"number\",`seg_y2_${rows_length-1}`,seg_y2,draw_segment);\n            cell[8]=input_create(\"number\",`seg_x3_${rows_length-1}`,seg_x3,draw_segment);\n            cell[9]=input_create(\"number\",`seg_y3_${rows_length-1}`,seg_y3,draw_segment);\n            cell[10]=pulldown_create([\"無\",\"有\"],`is_decimal_${rows_length-1}`,\"0\");\n            cell[11]=button_create(`decimal_register_${rows_length-1}`,set_decimal_info);\n            cell[12]=input_create(\"number\",`decimal_x_${rows_length-1}`,decimal_x,draw_segment);\n            cell[13]=input_create(\"number\",`decimal_y_${rows_length-1}`,decimal_y,draw_segment);\n            \n        }else{\n            cell[2]=document.createTextNode(\"\");\n            cell[3]=document.createTextNode(\"\");\n            cell[4]=input_create(\"number\",`seg_x1_${rows_length-1}`,\"0\",draw_segment);\n            cell[5]=input_create(\"number\",`seg_y1_${rows_length-1}`,\"0\",draw_segment);\n            cell[6]=input_create(\"number\",`seg_x2_${rows_length-1}`,\"0\",draw_segment);\n            cell[7]=input_create(\"number\",`seg_y2_${rows_length-1}`,\"0\",draw_segment);\n            cell[8]=input_create(\"number\",`seg_x3_${rows_length-1}`,\"0\",draw_segment);\n            cell[9]=input_create(\"number\",`seg_y3_${rows_length-1}`,\"0\",draw_segment)\n            cell[10]=pulldown_create([\"無\",\"有\"],`is_decimal_${rows_length-1}`,\"0\");\n            cell[11]=button_create(`decimal_register_${rows_length-1}`,set_decimal_info);\n            cell[12]=input_create(\"number\",`decimal_x_${rows_length-1}`,\"0\",draw_segment);\n            cell[13]=input_create(\"number\",`decimal_y_${rows_length-1}`,\"0\",draw_segment);\n        }\n       \n        let new_row = table.insertRow(-1);\n        let new_cell=[];\n        \n        for(let j = 0; j < cells_length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n        }\n        \n        document.querySelector(`#offset_x_${rows_length-1}`).addEventListener(\"click\",draw_segment);\n        document.querySelector(`#offset_y_${rows_length-1}`).addEventListener(\"click\",draw_segment);\n            \n    }\n    \n    function set_offset(){\n        const id=this.id.split(\"_\")[2];\n        const cord=this.id.split(\"_\")[1];\n        \n        const offset=Number(document.querySelector(`#offset_${cord}_${id}`).value);\n        const value_1=Number(document.querySelector(`#seg_${cord}1_${String(Number(id)-1)}`).value);\n        const value_2=Number(document.querySelector(`#seg_${cord}2_${String(Number(id)-1)}`).value);\n        const value_3=Number(document.querySelector(`#seg_${cord}3_${String(Number(id)-1)}`).value);\n        const decimal=Number(document.querySelector(`#decimal_${cord}_${String(Number(id)-1)}`).value);\n        \n        let input_1=document.querySelector(`#seg_${cord}1_${id}`);\n        let input_2=document.querySelector(`#seg_${cord}2_${id}`);\n        let input_3=document.querySelector(`#seg_${cord}3_${id}`);\n        let input_4=document.querySelector(`#decimal_${cord}_${id}`);\n        \n        input_1.value=String(value_1+offset);\n        input_2.value=String(value_2+offset);\n        input_3.value=String(value_3+offset);\n        input_4.value=String(decimal+offset);\n    }\n        \n    \n    \n    document.querySelector(\"#seg_delete\").onclick=table_delete_row;\n    function table_delete_row(){\n        const table=document.querySelector(\"#segment_table\");\n        const rows_length=table.rows.length;\n        if (rows_length>1){\n            table.deleteRow(-1);\n        }\n    }\n    \n    function set_decimal_info(){\n        const id=this.id.split(\"_\")[2];\n        let count=0;//マウスのクリック回数\n        let points=[];//クリックされた画像上の座標を格納\n        //キャンバスのロード\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら、関数set_infoを実行\n        canvas.addEventListener('click',set_info);\n        //クリックされる度にクリックされた画像上の座標を配列に格納、クリック回数が３回で入力欄に配列の座標を出力\n        function set_info(e){\n            count++//カウントアップ\n            //マウス座標をpointsに格納\n            points.push(e.offsetX);\n            points.push(e.offsetY);\n            console.log(e.offsetX,e.offsetY);\n            //クリック回数が３回で下記の処理を実行\n            if (count==1){\n                //キャンバス上でのマウスのクリックイベントの解除\n                canvas.removeEventListener('click', set_info);\n                //座標を入力欄に出力\n                document.querySelector(`#decimal_x_${id}`).value=points[0];\n                document.querySelector(`#decimal_y_${id}`).value=points[1];\n            }\n        }\n    }\n    \n    //セグメントの入力欄の座標情報から、セグメントをキャンバスに描画する関数\n    function draw_decimal_point(){\n        const id=this.id.split(\"_\")[2];\n        //キャンバスのロード\n        const canvas=document.querySelector(`#ui_layer`);\n        const  context = canvas.getContext('2d');\n        //キャンバスの初期化\n        //ontext.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n        //セグメントの入力欄の情報を格納\n      \n        const x1=Number(document.querySelector(`#decimal_x_${id}`).value);\n        const y1=Number(document.querySelector(`#decimal_y_${id}`).value);\n        \n        // 円の中心座標: (100,100)\n        // 半径: 50\n        // 開始角度: 0度 (0 * Math.PI / 180)\n        // 終了角度: 360度 (360 * Math.PI / 180)\n        // 方向: true=反時計回りの円、false=時計回りの円\n        context.arc( x1, y1, 10, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n\n        // 塗りつぶしの色\n        context.fillStyle = \"red\" ;\n\n        // 塗りつぶしを実行\n        context.fill() ;\n\n        // 線の色\n        context.strokeStyle = \"red\" ;\n\n        // 線の太さ\n        context.lineWidth = 1 ;\n\n        // 線を描画を実行\n        context.stroke() ;\n      \n    }\n    \n    document.querySelector(\"#register\").onclick=send_setting_to_server;\n    \n    function send_setting_to_server(){\n        const setting=load_setting_data();\n        scope.send({payload:setting});\n    }\n    \n    \n    function load_setting_data(){\n        const table=document.querySelector(\"#segment_table\");\n        const rows_length=table.rows.length;\n        \n        let setting={}\n        \n        const roi_x1=document.querySelector(`#roi_x1`).value;\n        const roi_y1=document.querySelector(`#roi_y1`).value;\n        const roi_x2=document.querySelector(`#roi_x2`).value;\n        const roi_y2=document.querySelector(`#roi_y2`).value;\n        const roi_x3=document.querySelector(`#roi_x3`).value;\n        const roi_y3=document.querySelector(`#roi_y3`).value;\n        const roi_x4=document.querySelector(`#roi_x4`).value;\n        const roi_y4=document.querySelector(`#roi_y4`).value;\n        const roi_array=[roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4]\n        setting[\"roi\"]=roi_array;\n        let segment_array=[];\n        for (let i=0;i<rows_length-1;++i){\n            if(i>0){\n                offset_x=document.querySelector(`#offset_x_${i}`).value;\n                offset_y=document.querySelector(`#offset_y_${i}`).value;\n                \n            }else{\n                offset_x=\"\";\n                offset_y=\"\";\n            }\n            let seg_x1=document.querySelector(`#seg_x1_${i}`).value;\n            let seg_y1=document.querySelector(`#seg_y1_${i}`).value;\n            let seg_x2=document.querySelector(`#seg_x2_${i}`).value;\n            let seg_y2=document.querySelector(`#seg_y2_${i}`).value;\n            let seg_x3=document.querySelector(`#seg_x3_${i}`).value;\n            let seg_y3=document.querySelector(`#seg_y3_${i}`).value;\n            let is_decimal=document.querySelector(`#is_decimal_${i}`).value;\n            let decimal_x=document.querySelector(`#decimal_x_${i}`).value;\n            let decimal_y=document.querySelector(`#decimal_y_${i}`).value;\n            segment_array.push([offset_x,offset_y,seg_x1,seg_y1,seg_x2,seg_y2,seg_x3,seg_y3,is_decimal,decimal_x,decimal_y])\n        }\n        setting[\"segment\"]=segment_array;\n        \n        const on_blue=document.querySelector(\"#on_color_blue\").innerText;\n        const on_green=document.querySelector(\"#on_color_green\").innerText;\n        const on_red=document.querySelector(\"#on_color_red\").innerText;\n        const on_color_array=[on_blue,on_green,on_red];\n        setting[\"on_color\"]=on_color_array;\n        const off_blue=document.querySelector(\"#off_color_blue\").innerText;\n        const off_green=document.querySelector(\"#off_color_green\").innerText;\n        const off_red=document.querySelector(\"#off_color_red\").innerText;\n        const off_color_array=[off_blue,off_green,off_red];\n        setting[\"off_color\"]=off_color_array;\n        \n        return setting;\n    \n    }\n        \n    \n        \n      \n})(scope);\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "469004e7305d070a"
            ]
        ]
    },
    {
        "id": "4c464a8443e1a096",
        "type": "exec",
        "z": "85fd863d751e4741",
        "command": "python3 -u ./image_recognition/analog_gauge_reader.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "analog_gauge_reader.py",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "b0c1695364b0aff6",
                "75cc8b2bc7ff9e4f",
                "35ec35cc1d80ef51"
            ],
            [
                "b0c1695364b0aff6",
                "c66704d29b7526b4"
            ],
            [
                "b0c1695364b0aff6",
                "c66704d29b7526b4"
            ]
        ]
    },
    {
        "id": "b2ad623689f5eb1c",
        "type": "ui_template",
        "z": "85fd863d751e4741",
        "group": "f21c6831facf0718",
        "name": "画像認識設定",
        "order": 1,
        "width": "30",
        "height": "74",
        "format": "<button type=\"button\" class=\"button\" id=\"snapshot\">写真撮影</button>\n\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"roi\">表示領域指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>X1</th>\n            <th>Y1</th>\n            <th>X2</th>\n            <th>Y2</th>\n            <th>X3</th>\n            <th>Y3</th>\n            <th>X4</th>\n            <th>Y4</th>\n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x1\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"roi_y1\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x2\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_y2\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x3\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"roi_y3\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_x4\"></td>\n            <td><input type=\"number\" class=\"number\" id=\"roi_y4\"></td>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<br>\n\n<div  class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"roi_register\">確定</button>\n    <button type=\"button\" class=\"button\" id=\"roi_reset\">キャンセル</button>\n</div>\n<br>\n\n<div id=\"stage\">\n    <canvas id=\"background_layer\"></canvas>\n    <canvas id=\"ui_layer\"></canvas>\n</div>\n<br>\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"set_center\">指針中心指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>中心X</th>\n            <th>中心Y</th>\n           \n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"center_x\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"center_y\"></td>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<br>\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"set_radius\">半径指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>半径</th>\n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"radius\"></td> \n           \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<br>\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"set_scaling_point_1\">スケーリング点1指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>X</th>\n            <th>Y</th>\n            <th>角度</th>\n            <th>指示値</th>\n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"scaling_point_1_x\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_point_1_y\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_angle_1\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_value_1\"></td> \n           \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</div>\n<br>\n\n<div class=wrapper1>\n    <button type=\"button\" class=\"button\" id=\"set_scaling_point_2\">スケーリング点2指定</button>\n    <table border=\"1\">\n    <thead>\n        <tr>\n            <th>X</th>\n            <th>Y</th>\n            <th>角度</th>\n            <th>指示値</th>\n        </tr>\n        <tr>\n            <td><input type=\"number\" class=\"number\" id=\"scaling_point_2_x\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_point_2_y\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_angle_2\"></td> \n            <td><input type=\"number\" class=\"number\" id=\"scaling_value_2\"></td> \n           \n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n    </table>\n</div>\n<br>\n\n\n<div class=wrapper1>\n    <div>データ名</div>\n    <input type=\"text\" class=\"text_input\" id=\"name\"> \n</div>\n<br>\n\n<div class=wrapper1>\n    <div>小数点以下桁数</div>\n    <input type=\"number\" class=\"number\" id=\"decimal_digits\"> \n</div>\n<br>\n\n<div class=\"flexc\">\n    <button type=\"button\" id=\"register\" class=\"button\">登録</button>\n    <button type=\"button\" id=\"cancel\" class=\"button\" >キャンセル</button>\n</div>\n\n<script>\n(function(scope) {\n    initialize_canvas();\n    \n    \n    //子機追加ボタンクリックで関数insert_tableを実\n   // add_button=document.querySelector(\"#add_col\")\n   // add_button.onclick=insert_table\n    \n    //登録ボタンクリックで関数send_dataを実行\n    register_button=document.querySelector(\"#register\");\n    register_button.onclick=send_data;\n    \n    //キャンセルボタンクリックで関数request_settingを実行\n    cancel_button=document.querySelector(\"#cancel\");\n    cancel_button.onclick=request_setting;\n    \n    //設定データを受信で関数table_initializeとread_dataを実行\n     scope.$watch('msg.setting', (current, previous) => {\n        console.log(current,previous);\n        if (current!=null){\n            g_setting=current;\n            table_initialize();\n            read_data();\n            \n        }\n    \n    });\n    \n     //重ね合わせたキャンバスの初期化\n    function initialize_canvas(){\n        //画像のロード\n        const image = new Image();\n        //image.src = `/gauge_recognition/snapshot.jpg`;\n        image.src = `/gauge12.jpg`;\n        //画像が読み込まれたら、キャンバスの初期化を実行\n        image.onload= function(){\n            const stage=document.querySelector(\"#stage\");\n            const ui_canvas=document.querySelector(\"#ui_layer\");\n            const background_canvas=document.querySelector(\"#background_layer\");\n            //キャンバスの大きさを初期化\n            stage.style.height=`${image.height}px`;\n            ui_canvas.width=image.width;\n            ui_canvas.height=image.height;\n            background_canvas.width=image.width;\n            background_canvas.height=image.height;\n            //キャンバスに画像をロード\n            drawCanvas(\"background_layer\",image,0,0,image.width,image.height,0,0,image.width,image.height);\n            //drawCanvas(\"background_layer\",image,0,0);\n        }\n    }\n    \n     \n    //表示領域指定の表示領域ボタンが押されたら、関数set_roi_pointsを実行\n    document.querySelector(\"#roi\").onclick=set_roi_points;\n    \n    //表示領域の四隅４点座標をマウスのクリックで取得し、それらの座標を入力欄に出力する関数\n    function set_roi_points(){\n        let count=0;//マウスのクリック回数\n        let points=[];//クリックされた画像上の座標を格納\n        //キャンバスの情報を格納\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら関数get_roi_pointsを実行\n        canvas.addEventListener('click',get_roi_points);\n        \n        document.querySelector(\"#roi_reset\").addEventListener('click',function(){\n            initialize_canvas();\n            count=0;\n            points=[];\n            return\n        });\n     \n        //配列pointsにクリックされた時点でのマウス座標を、格納。クリック４回目で座標を入力欄に出力＋表示領域の可視化\n        function get_roi_points(e){\n            count++\n            //マウス座標をpointsに格納\n            points.push(e.offsetX);\n            points.push(e.offsetY);\n           //マウスのクリックカウントが４回なら以下の処理を実行 \n            if (count==4){\n                //キャンバス上でのマウスのクリックイベントの解除\n                canvas.removeEventListener('click', get_roi_points);\n                \n                const x_left=Number(points[0]);\n                const y_left=Number(points[1]);\n                const x_upper=Number(points[2]);\n                const y_upper=Number(points[3]);\n                const x_right=Number(points[4]);\n                const y_right=Number(points[5]);\n                const x_lower=Number(points[6]);\n                const y_lower=Number(points[7]);\n                /*console.log(x_left,y_left);\n                \n                const a1=(y_left-y_right)/(x_left-x_right);\n                const b1=y_left-x_left*a1;\n                \n                const a2=(y_upper-y_lower)/(x_upper-x_lower);\n                const b2=y_upper-x_upper*a2;\n                \n                const x_m=-1*(b1-b2)/(a1-a2);\n                const y_m=(a1*b2-a2*b1)/(a1-a2);\n                \n                const dx_left=x_m-x_left;\n                const dy_left=y_m-y_left;\n\n                const dx_right=x_right-x_m;\n                const dy_right=y_right-y_m;\n                \n                const P_upper_left_x=Math.round(x_upper-dx_left);\n                const P_upper_left_y=Math.round(y_upper-dy_left);\n                const P_upper_right_x=Math.round(x_upper+dx_right);\n                const P_upper_right_y=Math.round(y_upper+dy_right);\n                const P_lower_right_x=Math.round(x_lower+dx_right);\n                const P_lower_right_y=Math.round(y_lower+dy_right);\n                const P_lower_left_x=Math.round(x_lower-dx_left);\n                const P_lower_left_y=Math.round(y_lower-dy_left);\n                \n    \n\n            　　//座標を入力欄に格納\n                document.querySelector(\"#roi_x1\").value=String(P_upper_left_x);\n                document.querySelector(\"#roi_y1\").value=String(P_upper_left_y);\n                document.querySelector(\"#roi_x2\").value=String(P_upper_right_x);\n                document.querySelector(\"#roi_y2\").value=String(P_upper_right_y);\n                document.querySelector(\"#roi_x3\").value=String(P_lower_right_x);\n                document.querySelector(\"#roi_y3\").value=String(P_lower_right_y);\n                document.querySelector(\"#roi_x4\").value=String(P_lower_left_x);\n                document.querySelector(\"#roi_y4\").value=String(P_lower_left_y);\n                */\n                //表示領域の可視化\n                document.querySelector(\"#roi_x1\").value=String(x_left);\n                document.querySelector(\"#roi_y1\").value=String(y_left);\n                document.querySelector(\"#roi_x2\").value=String(x_upper);\n                document.querySelector(\"#roi_y2\").value=String(y_upper);\n                document.querySelector(\"#roi_x3\").value=String(x_right);\n                document.querySelector(\"#roi_y3\").value=String(y_right);\n                document.querySelector(\"#roi_x4\").value=String(x_lower);\n                document.querySelector(\"#roi_y4\").value=String(y_lower);\n                draw_roi_rectangle();\n            }\n        }\n    }\n    \n    //入力欄の数値をユーザーが変更したら、関数draw_roi_rectangleを実行\n    document.querySelector(\"#roi_x1\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y1\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x2\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y2\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x3\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y3\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_x4\").onchange=draw_roi_rectangle;\n    document.querySelector(\"#roi_y4\").onchange=draw_roi_rectangle;\n   \n    //四角形を描画する関数\n    function draw_roi_rectangle(){\n        //キャンバスのロード\n        let canvas=document.querySelector(`#ui_layer`);\n        let context = canvas.getContext('2d');\n        //キャンバスのクリア\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        //入力欄の情報を読み込み\n        const roi_x1=Number(document.querySelector(\"#roi_x1\").value);\n        const roi_y1=Number(document.querySelector(\"#roi_y1\").value);\n        const roi_x2=Number(document.querySelector(\"#roi_x2\").value);\n        const roi_y2=Number(document.querySelector(\"#roi_y2\").value);\n        const roi_x3=Number(document.querySelector(\"#roi_x3\").value);\n        const roi_y3=Number(document.querySelector(\"#roi_y3\").value);\n        const roi_x4=Number(document.querySelector(\"#roi_x4\").value);\n        const roi_y4=Number(document.querySelector(\"#roi_y4\").value);\n        //線分の描画\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x1,roi_y1,roi_x2,roi_y2);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x2,roi_y2,roi_x3,roi_y3);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x3,roi_y3,roi_x4,roi_y4);\n        draw_line(\"ui_layer\",\"red\",0.5,3,roi_x4,roi_y4,roi_x1,roi_y1);\n    }\n    \n    //線分を描画する関数\n    function draw_line(id,color,alpha,width,p1_x,p1_y,p2_x,p2_y){\n        //キャンバスのロード\n        let canvas=document.querySelector(`#${id}`);\n        let context = canvas.getContext('2d');\n        //現在のパスをリセット\n        context.beginPath();\n        //描画スタイルの指定\n        context.strokeStyle = color;//線色\n        context.lineWidth = width;//線幅\n        context.globalAlpha=alpha;//透過度\n        //線分の描画\n        context.moveTo(p1_x,p1_y);//始点の指定\n        context.lineTo(p2_x,p2_y)//終点の指定\n        context.stroke();//描画処理\n    }\n    \n    //確定ボタンが押されたら、関数roiを実行\n    document.querySelector(\"#roi_register\").onclick=roi;\n    \n    //画像を射影変換し、正面から見た画像に変換する関数\n    function roi(){\n      \n        const roi_x1=Number(document.querySelector(\"#roi_x1\").value);\n        const roi_y1=Number(document.querySelector(\"#roi_y1\").value);\n        const roi_x2=Number(document.querySelector(\"#roi_x2\").value);\n        const roi_y2=Number(document.querySelector(\"#roi_y2\").value);\n        const roi_x3=Number(document.querySelector(\"#roi_x3\").value);\n        const roi_y3=Number(document.querySelector(\"#roi_y3\").value);\n        const roi_x4=Number(document.querySelector(\"#roi_x4\").value);\n        const roi_y4=Number(document.querySelector(\"#roi_y4\").value);\n        //表示領域の縦線の組、横線の組について、組のうち長い線の長さを求める\n        const width=compare_horizonal_line_length(roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4)\n        const height=compare_vertical_line_length(roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4)\n        //変換前と変換後の四隅の点座標を配列に格納\n        const src_array=[roi_x1,roi_y1,roi_x2,roi_y2,roi_x3,roi_y3,roi_x4,roi_y4];//変換前\n        const dst_array= [0, 0,width, 0, width, height, 0, height];//変換後\n        //画像をキャンバスにロード\n        const src = cv.imread(\"background_layer\");\n        //変換後の画像の宣言\n       \n        let dst = new cv.Mat();\n        let dsize = new cv.Size(width, height);\n        //画像フォーマットの変換\n        let srcTri = cv.matFromArray(4, 1, cv.CV_32FC2, src_array);\n        let dstTri = cv.matFromArray(4, 1, cv.CV_32FC2, dst_array);\n        //変換前と変換後の四隅の座標から変換行列Ｍを求める\n        let M = cv.getPerspectiveTransform(srcTri, dstTri);\n        //変換前の画像srcについて、射影変換を適用し、変換後画像dstを得る\n        cv.warpPerspective(src, dst, M, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n        //キャンバスの描画内容を消去\n        erase_contents(\"ui_layer\");\n        //キャンバスを変換後画像サイズにリサイズ\n        resize_canvas(\"ui_layer\",width,height);\n        resize_canvas(\"background_layer\",width,height);\n        \n        \n        resize_canvas_wrapper(\"stage\",width,height);\n        //キャンバスに変換後画像をロード\n        cv.imshow('background_layer', dst);\n        //不要になったオブジェクトを削除\n        src.delete(); dst.delete(); M.delete(); srcTri.delete(); dstTri.delete();\n    \n    }\n     //キャンバスの内容を消去する関数\n    function erase_contents(id){\n        const canvas =document.querySelector(`#${id}`);\n        const context = canvas.getContext('2d');\n        context.clearRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    //四角形の横線の長さを比較し、長い方を返却する関数\n    function compare_horizonal_line_length(x1,y1,x2,y2,x3,y3,x4,y4){\n        const horizonal_line_above_length=calc_dist(x1,y1,x2,y2);\n        const horizonal_line_below_length=calc_dist(x3,y3,x4,y4);\n        if (horizonal_line_above_length>horizonal_line_below_length){\n            return horizonal_line_above_length;\n        }else{\n            return horizonal_line_below_length;\n        }\n    }\n    \n    //四角形の縦線の長さを比較し、長い方を返却する関数\n    function compare_vertical_line_length(x1,y1,x2,y2,x3,y3,x4,y4){\n        const vertical_line_left_length=calc_dist(x1,y1,x4,y4);\n        const vertical_line_right_length=calc_dist(x2,y2,x3,y3);\n         if (vertical_line_left_length>vertical_line_right_length){\n            return vertical_line_left_length;\n        }else{\n            return vertical_line_right_length;\n        }\n    }\n    \n    //2点間の距離を算出し返却する関数\n    function calc_dist(x1,y1,x2,y2){\n        const pt = Math.round(Math.sqrt( Math.pow( x2-x1, 2 ) + Math.pow( y2-y1, 2 ) ) );\n        return pt;\n    } \n    \n    //キャンバスをリサイズする関数\n    function resize_canvas(id,width,height){\n        const canvas=document.querySelector(`#${id}`);\n        canvas.width=width\n        canvas.height=height\n    }\n    \n    //div要素のサイズをリサイズする関数\n    function resize_canvas_wrapper(id,width,height){\n        const wrapper=document.querySelector(`#${id}`);\n        wrapper.style.width=`${width}px`;\n        wrapper.style.height=`${height}px`;\n    }\n    \n    document.querySelector(\"#set_center\").onclick=set_center;\n    function set_center(){\n        let center=[];//クリックされた画像上の座標を格納\n        //キャンバスの情報を格納\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら関数get_roi_pointsを実行\n        canvas.addEventListener('click',get_center);\n     \n        //配列pointsにクリックされた時点でのマウス座標を、格納。クリック４回目で座標を入力欄に出力＋表示領域の可視化\n        function get_center(e){\n            canvas.removeEventListener('click', get_center);\n            //マウス座標をpointsに格納\n            document.querySelector(\"#center_x\").value=String(e.offsetX);\n            document.querySelector(\"#center_y\").value=String(e.offsetY);\n            \n            enforce_change_event();\n        }\n    }\n    \n    \n    \n    document.querySelector(\"#set_radius\").onclick=set_radius;\n    function set_radius(){\n        let center=[];//クリックされた画像上の座標を格納\n        //キャンバスの情報を格納\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら関数get_roi_pointsを実行\n        canvas.addEventListener('click',get_radius);\n     \n        //配列pointsにクリックされた時点でのマウス座標を、格納。クリック４回目で座標を入力欄に出力＋表示領域の可視化\n        function get_radius(e){\n            canvas.removeEventListener('click', get_radius);\n            //マウス座標をpointsに格納\n            const center_x=Number(document.querySelector(\"#center_x\").value);\n            const center_y=Number(document.querySelector(\"#center_y\").value);\n            \n            const radius=Math.round(calc_dist(e.offsetX,e.offsetY,center_x,center_y));\n            document.querySelector(\"#radius\").value=String(radius);\n            \n            enforce_change_event();\n            \n            \n        }\n    }\n    \n    function draw_circle(){\n        const center_x=Number(document.querySelector(\"#center_x\").value);\n        const center_y=Number(document.querySelector(\"#center_y\").value);\n        const radius=Number(document.querySelector(\"#radius\").value);\n        const scaling_point_1_x=Number(document.querySelector(\"#scaling_point_1_x\").value);\n        const scaling_point_1_y=Number(document.querySelector(\"#scaling_point_1_y\").value);\n        const scaling_point_2_x=Number(document.querySelector(\"#scaling_point_2_x\").value);\n        const scaling_point_2_y=Number(document.querySelector(\"#scaling_point_2_y\").value);\n        //キャンバスのロード\n        let canvas=document.querySelector(\"#ui_layer\");\n        let context = canvas.getContext('2d');\n        //キャンバスのクリア\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        // パスをリセット\n        context.strokeStyle = \"red\" ;\n        // 線の太さ\n        context.lineWidth = 2 ;\n        \n        context.beginPath () ;\n       \n        context.arc( center_x, center_y, 2, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n        context.fillStyle = \"red\" ;\n        // 塗りつぶしを実行\n        context.fill() ;\n            \n        // 線を描画を実行\n        context.stroke() ;\n        \n        context.beginPath () ;\n\n        context.arc( center_x, center_y, radius, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n        // 線を描画を実行\n        context.stroke() ;\n        \n        context.beginPath () ;\n       \n        context.arc( scaling_point_1_x, scaling_point_1_y, 2, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n        context.fillStyle = \"red\" ;\n        // 塗りつぶしを実行\n        context.fill() ;\n            \n        // 線を描画を実行\n        context.stroke() ;\n        \n        context.beginPath () ;\n       \n        context.arc( scaling_point_2_x, scaling_point_2_y, 2, 0 * Math.PI / 180, 360 * Math.PI / 180, false ) ;\n        context.fillStyle = \"red\" ;\n        // 塗りつぶしを実行\n        context.fill() ;\n            \n        // 線を描画を実行\n        context.stroke() ;\n        \n    }\n    \n    \n    document.querySelector(\"#set_scaling_point_1\").onclick=set_scaling_point;\n    document.querySelector(\"#set_scaling_point_2\").onclick=set_scaling_point;\n    function set_scaling_point(){\n        let center=[];//クリックされた画像上の座標を格納\n        //キャンバスの情報を格納\n        const id=this.id.split(\"_\")[3];\n        console.log(id)\n        const canvas=document.querySelector(\"#ui_layer\");\n        const context = canvas.getContext('2d');\n        //キャンバスがクリックされたら関数get_roi_pointsを実行\n        canvas.addEventListener('click',get_scaling_point);\n     \n        //配列pointsにクリックされた時点でのマウス座標を、格納。クリック４回目で座標を入力欄に出力＋表示領域の可視化\n        function get_scaling_point(e){\n            canvas.removeEventListener('click', get_scaling_point);\n            //マウス座標をpointsに格納\n            const center_x=Number(document.querySelector(\"#center_x\").value);\n            const center_y=Number(document.querySelector(\"#center_y\").value);\n            document.querySelector(`#scaling_point_${id}_x`).value=String(e.offsetX);\n            document.querySelector(`#scaling_point_${id}_y`).value=String(e.offsetY);\n            \n            \n            const angle=calc_angle(Number(e.offsetX),Number(e.offsetY),center_x,center_y);\n            document.querySelector(`#scaling_angle_${id}`).value=String(angle);\n            enforce_change_event();\n            \n        }\n    }\n    \n    function calc_angle(x1,y1,x2,y2){\n        const radian = Math.atan2( y2 - y1, x2 - x1 );\n        const degree = radian * (180 / Math.PI);\n        if (-90<=degree&&degree<0){\n            return Math.round(90-Math.abs(degree));\n        }\n        if(0<=degree&&degree<=180){\n            return Math.round(90+degree);\n        }\n        \n        if(-180<degree&&degree<-90){\n            return Math.round(450+degree);\n        }\n    }\n    \n    function enforce_change_event(){\n        document.querySelector(\"#center_x\").onchange();\n        document.querySelector(\"#center_y\").onchange();\n        document.querySelector(\"#radius\").onchange();\n        document.querySelector(\"#scaling_point_1_x\").onchange();\n        document.querySelector(\"#scaling_point_1_y\").onchange();\n        document.querySelector(\"#scaling_point_2_x\").onchange();\n        document.querySelector(\"#scaling_point_2_y\").onchange();\n        \n    }\n        \n    \n\n    document.querySelector(\"#center_x\").onchange=draw_circle;\n    document.querySelector(\"#center_y\").onchange=draw_circle;\n    document.querySelector(\"#radius\").onchange=draw_circle;\n    document.querySelector(\"#scaling_point_1_x\").onchange=draw_circle;\n    document.querySelector(\"#scaling_point_1_y\").onchange=draw_circle;\n    document.querySelector(\"#scaling_point_2_x\").onchange=draw_circle;\n    document.querySelector(\"#scaling_point_2_y\").onchange=draw_circle;\n    \n    //設定データの読み出し関数\n    function read_data(){\n        let table=document.querySelector(\"#setting\");\n        \n        let data=g_setting;\n        document.querySelector(\"#ip\").value=data[\"ip\"];\n        document.querySelector(\"#port\").value=data[\"port\"];\n        document.querySelector(\"#timeout\").value=data[\"timeout\"];\n        document.querySelector(\"#interval\").value=data[\"interval\"];\n        document.querySelector(\"#topic\").value=data[\"topic\"];\n        \n        let table_data=g_setting[\"camera\"];\n        const element_keys=Object.keys(table_data).sort();\n        //console.log(element_keys);\n        \n        let cameras=g_cameras;\n        let center_x=\"\";\n        let center_y=\"\";\n        let top_x=\"\";\n        let top_y=\"\";\n        let nod=\"\";\n        let start_x=\"\";\n        let start_y=\"\";\n        let end_x=\"\";\n        let end_y=\"\";\n        let scaling_start=\"\"\n        let scaling_end=\"\";\n        let name=\"\";\n    \n        for(let i = 0; i < cameras.length; ++i){\n            let id=cameras[i][\"usb\"];\n            //console.log(id);\n            //console.log(element_keys.includes(id))\n            if (element_keys.includes(id)){\n                center_x=table_data[id][\"center_x\"];\n                center_y=table_data[id][\"center_y\"];\n                top_x=table_data[id][\"top_x\"];\n                top_y=table_data[id][\"top_y\"];\n                start_x=table_data[id][\"start_x\"];\n                start_y=table_data[id][\"start_y\"];\n                nod=table_data[id][\"nod\"];\n                end_x=table_data[id][\"end_x\"];\n                end_y=table_data[id][\"end_y\"];\n                scaling_start=table_data[id][\"scaling_start\"];\n                scaling_end=table_data[id][\"scaling_end\"];\n                name=table_data[id][\"name\"];\n            }\n                \n           /* for (let j=0;j<cameras.length;++j){\n                if (cameras[j][\"usb\"]==keys[i]{\n                    let video=cameras[i][\"video\"];\n                }\n            }*/\n            \n            let cell=[];\n            cell[0]=document.createTextNode(String(i));\n            cell[1]=div_create(`id_${i}`,`カメラ_${id}`);\n            cell[2]=input_create(\"text\",`name_${i}`,name,\"text_input\");\n            cell[3]=input_create(\"number\",`nod_${i}`,nod,\"number_input\");\n            cell[4]=input_create(\"number\",`center_x_${i}`,center_x,\"number_input\");\n            cell[5]=input_create(\"number\",`center_y_${i}`,center_y,\"number_input\");\n            cell[6]=input_create(\"number\",`top_x_${i}`,top_x,\"number_input\");\n            cell[7]=input_create(\"number\",`top_y_${i}`,top_y,\"number_input\");\n            cell[8]=input_create(\"number\",`start_x_${i}`,start_x,\"number_input\");\n            cell[9]=input_create(\"number\",`start_y_${i}`,start_y,\"number_input\");\n            cell[10]=input_create(\"number\",`end_x_${i}`,end_x,\"number_input\");\n            cell[11]=input_create(\"number\",`end_y_${i}`,end_y,\"number_input\");\n            cell[12]=input_create(\"number\",`scaling_start_${i}`,scaling_start,\"number_input\");\n            cell[13]=input_create(\"number\",`scaling_end_${i}`,scaling_end,\"number_input\");\n            //cell[14]=button_create(`delete_${i}`,\"削除\");\n            \n            let new_row = table.insertRow(-1);\n            let new_cell=[];\n            for(let j = 0; j < cell.length; ++j){\n                new_cell[j]=new_row.insertCell(j);\n                new_cell[j].appendChild(cell[j]);\n            }\n        }\n    }\n    \n    //ラズパイに設定データを送信する関数\n    function send_data(){\n        const data=store_setting_data();\n        scope.send({payload:data});\n        \n    }\n    \n    //WebUIの設定データを辞書データに格納する関数\n    function store_setting_data(){\n        let data={}\n        \n        data[\"roi_x1\"]=document.querySelector(\"#roi_x1\").value;\n        data[\"roi_y1\"]=document.querySelector(\"#roi_y1\").value;\n        data[\"roi_x2\"]=document.querySelector(\"#roi_x2\").value;\n        data[\"roi_y2\"]=document.querySelector(\"#roi_y2\").value;\n        data[\"roi_x3\"]=document.querySelector(\"#roi_x3\").value;\n        data[\"roi_y3\"]=document.querySelector(\"#roi_y3\").value;\n        data[\"roi_x4\"]=document.querySelector(\"#roi_x4\").value;\n        data[\"roi_y4\"]=document.querySelector(\"#roi_y4\").value;\n        data[\"center_x\"]=document.querySelector(\"#center_x\").value;\n        data[\"center_y\"]=document.querySelector(\"#center_y\").value;\n        data[\"radius\"]=document.querySelector(\"#radius\").value;\n        data[\"scaling_point_1_x\"]=document.querySelector(\"#scaling_point_1_x\").value;\n        data[\"scaling_point_1_y\"]=document.querySelector(\"#scaling_point_1_y\").value;\n        data[\"scaling_angle_1\"]=document.querySelector(\"#scaling_angle_1\").value;\n        data[\"scaling_value_1\"]=document.querySelector(\"#scaling_value_1\").value;\n        data[\"scaling_point_2_x\"]=document.querySelector(\"#scaling_point_2_x\").value;\n        data[\"scaling_point_2_y\"]=document.querySelector(\"#scaling_point_2_y\").value;\n        data[\"scaling_angle_2\"]=document.querySelector(\"#scaling_angle_2\").value;\n        data[\"scaling_value_2\"]=document.querySelector(\"#scaling_value_2\").value;\n        data[\"name\"]=document.querySelector(\"#name\").value;\n        data[\"decimal_digits\"]=document.querySelector(\"#decimal_digits\").value;\n        \n        return data;\n    }\n    \n    document.querySelector(\"#snapshot\").onclick=request_snapshot();\n    \n    function request_snapshot(){\n        scope.send({payload:\"snapshot\"});\n        \n    }\n    \n    \n    //設定データをラズパイに要求する関数\n    function request_setting(){\n        scope.send({payload:\"setting_request\"});\n    }\n    \n    //登録ボタンクリックで関数send_dataを実行\n    register_button=document.querySelector(\"#register\");\n    register_button.onclick=send_data;\n    \n    //キャンセルボタンクリックで関数request_settingを実行\n    cancel_button=document.querySelector(\"#cancel\");\n    cancel_button.onclick=request_setting;\n    \n    //カメラ選択で関数load_camera_settingを実行\n    camera_select=document.querySelector(\"#camera_select\");\n    camera_select.onchange=load_camera;\n    \n    \n    const canvas = document.getElementById('background_layer');\n    canvas.addEventListener(\"mousemove\", function(e){\n\t    var borderWidth = 1;\n\t    var rect = e.target.getBoundingClientRect();\n\t    var x = Math.round(e.clientX - rect.left - borderWidth);\n\t    var y = Math.round(e.clientY - rect.top - borderWidth);\n\t    document.getElementById(\"cursor\").innerHTML = `x=${x},y=${y}`\n    });\n\n    canvas.addEventListener(\"click\", function(e){\n\t    var borderWidth = 1;\n\t    var rect = e.target.getBoundingClientRect();\n\t    var x = Math.round(e.clientX - rect.left - borderWidth);\n\t    var y = Math.round(e.clientY - rect.top - borderWidth);\n\t    document.getElementById(\"textarea\").value= `x=${x},y=${y}`\n    });\n  \n     scope.$watch('msg.camera', (current, previous) => {\n        console.log(current,previous);\n        if (current!=null){\n            g_cameras=current;\n            let cameras=g_cameras;\n            update_cameras(\"camera_select\",cameras);\n        }\n    });\n    \n    //角度と変換値のデータを受信で関数display_sensor_dataを実行\n    scope.$watch('msg.payload', function(payload) {\n        if(payload){\n            console.log(payload);\n            let sensor_data=payload;\n            display_sensor_data(sensor_data);\n        }\n    });\n    \n    \n    //キャンバスに画像を書き込む\n    function drawCanvas(id,image,s_x,s_y,s_width,s_height,d_x,d_y,d_width,d_height) {\n        const canvas=document.querySelector(`#${id}`);\n\t    if (canvas.getContext('2d')) {\n            const context = canvas.getContext('2d');\n\t\t    context.drawImage(image,s_x,s_y,s_width,s_height,d_x,d_y,d_width,d_height);\n\t\t}\n    }\n\n\n    \n   /* \n    function update_cameras(id,cameras){\n        let select = document.querySelector(`#${id}`);\n        select.innerHTML=\"\";\n        let option=document.createElement(\"option\");\n        option.value = \"not_selected\";\n        option.textContent = `選択してください`;\n        //select要素にoption要素を追加する\n        select.appendChild(option);\n        for(let i = 0; i < cameras.length; ++i){\n            //option要素を新しく作る\n            let option=document.createElement(\"option\");\n    \n            //option要素にvalueと表示名を設定\n            option.value = cameras[i][\"usb\"];\n            option.textContent = `camera_${cameras[i][\"usb\"]}`;\n            //select要素にoption要素を追加する\n            select.appendChild(option);\n        }\n    }\n \n    function load_camera(){\n        let usb=document.querySelector(`#camera_select`).value;\n        console.log(usb);\n        if (usb!=\"not_selected\"){\n            display_image();\n        }\n    }\n    \n    function display_image(){\n        let usb=document.querySelector(`#camera_select`).value;\n        let src=`http://${location.hostname}:5189${usb}?action=stream`;\n        drawCanvas(src);\n    }*/\n  \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "f19a74988bd56279",
                "59f74fa1640677d8"
            ]
        ]
    },
    {
        "id": "4d62db97546fd60c",
        "type": "ui_ui_control",
        "z": "85fd863d751e4741",
        "name": "",
        "events": "all",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "e15860af081a24d1"
            ]
        ]
    },
    {
        "id": "f19a74988bd56279",
        "type": "switch",
        "z": "85fd863d751e4741",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting_request",
                "vt": "str"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            },
            {
                "t": "eq",
                "v": "snapshot",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1150,
        "y": 220,
        "wires": [
            [],
            [
                "887e81cbda268283"
            ],
            [
                "dc2d559aa472802d"
            ]
        ]
    },
    {
        "id": "018dd238ef9b2da4",
        "type": "inject",
        "z": "85fd863d751e4741",
        "name": "自動起動",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "analog_gauge_reader.py",
        "payloadType": "str",
        "x": 140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "a92615a2269aad7e",
        "type": "delay",
        "z": "85fd863d751e4741",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 500,
        "wires": [
            [
                "4c464a8443e1a096",
                "f1925d399934bf5e"
            ]
        ]
    },
    {
        "id": "9b06297d853ab5da",
        "type": "subflow:7a21b679996998b7",
        "z": "85fd863d751e4741",
        "name": "kill",
        "x": 330,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "db986b12fdd78734",
        "type": "delay",
        "z": "85fd863d751e4741",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 440,
        "wires": [
            [
                "4c464a8443e1a096"
            ]
        ]
    },
    {
        "id": "ee36696522283e4d",
        "type": "subflow:7a21b679996998b7",
        "z": "85fd863d751e4741",
        "name": "kill",
        "x": 1350,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b0c1695364b0aff6",
        "type": "debug",
        "z": "85fd863d751e4741",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 540,
        "wires": []
    },
    {
        "id": "f1925d399934bf5e",
        "type": "exec",
        "z": "85fd863d751e4741",
        "command": "python3 -u ./image_recognition/get_cameras.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "get_cameras.py",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "e15860af081a24d1"
            ],
            [],
            []
        ]
    },
    {
        "id": "a00ede1e6fb98120",
        "type": "change",
        "z": "85fd863d751e4741",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "camera",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 160,
        "wires": [
            [
                "b2ad623689f5eb1c",
                "1373863914396f66"
            ]
        ]
    },
    {
        "id": "e15860af081a24d1",
        "type": "file in",
        "z": "85fd863d751e4741",
        "name": "設定データ読み出し",
        "filename": "/home/pi/image_recognition/cameras.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "997ae989d1229ea1"
            ]
        ]
    },
    {
        "id": "997ae989d1229ea1",
        "type": "json",
        "z": "85fd863d751e4741",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "a00ede1e6fb98120"
            ]
        ]
    },
    {
        "id": "1343c6d30f497d59",
        "type": "inject",
        "z": "85fd863d751e4741",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mjpg",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "77203731f7beebc5",
        "type": "subflow:7a21b679996998b7",
        "z": "85fd863d751e4741",
        "name": "kill",
        "x": 270,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5584e3ee2958d111",
        "type": "inject",
        "z": "85fd863d751e4741",
        "name": "自動起動",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "analog_gauge_reader.py",
        "payloadType": "str",
        "x": 160,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1373863914396f66",
        "type": "ui_template",
        "z": "85fd863d751e4741",
        "group": "a6606b610a1391d9",
        "name": "画像認識値表示",
        "order": 1,
        "width": "30",
        "height": "74",
        "format": "<div id=\"wrapper\">\n    \n</div>\n\n<script>\n(function(scope) {\n \n\n    //設定データを受信で関数read_dataを実行\n     scope.$watch('msg.camera', (current, previous) => {\n        console.log(current,previous);\n        if (current!=null){\n            g_setting=current;\n            create_frame();\n        }\n    });\n    \n    //角度と変換値のデータを受信で関数display_sensor_dataを実行\n    scope.$watch('msg.payload', function(payload) {\n        if(payload){\n            console.log(payload);\n            let value=payload[\"val\"];\n            let key=payload[\"usb\"];\n            add_value(`value_${key}`,value);\n        }\n    });\n    \n    \n    function create_element(parent_id,id){\n    \n        add_wrapper(parent_id,id,\"element_wrapper\")\n        let usb=id.split(\"_\")[1];\n        let src=`http://${location.hostname}:5189${usb}?action=stream`;\n        add_img(id,src,640,360)\n        add_wrapper(id,`value_${usb}`,\"value\")\n        let t=document.querySelector(`#value_${usb}`);\n        t.innerText=\"現在値：--\";\n        \n    }\n    \n    function add_wrapper(parent_id,id,class_name){\n        const element=document.querySelector(`#${parent_id}`);\n        const child=document.createElement(\"div\");\n        child.id=id;\n        child.className=class_name\n        element.appendChild(child)\n    }\n    \n    function add_value(id,value){\n        const element=document.querySelector(`#${id}`);\n        element.innerHTML=`現在値：${String(value)}`;\n\n    }\n    \n    function add_img(parent_id,src,width,height){\n        const element= document.querySelector(`#${parent_id}`);\n        const child=document.createElement(\"img\");\n        child.src=src;\n        child.height=height;\n        child.width=width;\n        element.appendChild(child);\n    }\n    \n    function create_frame(){\n        initialize(\"wrapper\");\n        let setting=g_setting;\n        let keys=[];\n        for (let i=0;i<setting.length;++i){\n            keys.push(setting[i][\"usb\"]);\n            \n        }\n        //let keys=Object.keys(setting[\"camera\"]).sort();\n        for (let i=0;i<keys.length;++i){\n            create_element(\"wrapper\",`id_${keys[i]}`);\n        }\n    }\n   \n    function initialize(id){\n        let element=document.querySelector(`#${id}`);\n        element.innerHTML=\"\";\n        \n    }\n    \n  \n   \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 940,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "75cc8b2bc7ff9e4f",
        "type": "json",
        "z": "85fd863d751e4741",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 810,
        "y": 460,
        "wires": [
            [
                "1373863914396f66"
            ]
        ]
    },
    {
        "id": "359c2623c0b911ce",
        "type": "inject",
        "z": "85fd863d751e4741",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "cbdcd4c4c2e405dd",
        "type": "exec",
        "z": "85fd863d751e4741",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a7c0c3cc0501e838",
        "type": "inject",
        "z": "85fd863d751e4741",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "35ec35cc1d80ef51",
        "type": "debug",
        "z": "85fd863d751e4741",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 500,
        "wires": []
    },
    {
        "id": "c66704d29b7526b4",
        "type": "file",
        "z": "85fd863d751e4741",
        "name": "",
        "filename": "./image_recognition/log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 890,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "59f74fa1640677d8",
        "type": "debug",
        "z": "85fd863d751e4741",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 40,
        "wires": []
    },
    {
        "id": "887e81cbda268283",
        "type": "json",
        "z": "85fd863d751e4741",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "71ac339a72bf6204"
            ]
        ]
    },
    {
        "id": "90d17d596e8d69ed",
        "type": "change",
        "z": "85fd863d751e4741",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "analog_gauge_reader.py",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1840,
        "y": 260,
        "wires": [
            [
                "ee36696522283e4d"
            ]
        ]
    },
    {
        "id": "71ac339a72bf6204",
        "type": "file",
        "z": "85fd863d751e4741",
        "name": "",
        "filename": "/home/pi/gauge_recognition/gauge_setting.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1540,
        "y": 220,
        "wires": [
            [
                "90d17d596e8d69ed"
            ]
        ]
    },
    {
        "id": "dc2d559aa472802d",
        "type": "exec",
        "z": "85fd863d751e4741",
        "command": "python3 -u /home/pi/gauge_recognition/snapshot.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "snapshot.py",
        "x": 1370,
        "y": 280,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d0da69f7cab5c00a",
        "type": "ui_template",
        "z": "e4e780b06009f68e",
        "group": "75f8dd9e8aa16c65",
        "name": "その他コマンド",
        "order": 1,
        "width": "0",
        "height": "0",
        "format": "<button id=\"reboot\" class=\"button\">再起動</button><br>\n<button id=\"shutdown\" class=\"button\">シャットダウン</button><br>\n<script>\n(function(scope) {\n    let reboot_button=document.querySelector(\"#reboot\");\n    reboot_button.onclick=reboot;\n    let shutdown_button=document.querySelector(\"#shutdown\");\n    shutdown_button.onclick=shutdown;\n\n    function reboot(){\n    if(window.confirm(\"実行しますか？\")){\n    scope.send({payload:\"reboot\"});\n    }\n    }\n\n    function shutdown(){\n    if(window.confirm(\"実行しますか？\")){\n    scope.send({payload:\"shutdown\"});\n    }\n    }\n    \n   \n  \n})(scope);\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "f636bded9a96b5bb",
                "d07c483dd17013f8"
            ]
        ]
    },
    {
        "id": "f636bded9a96b5bb",
        "type": "debug",
        "z": "e4e780b06009f68e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "d07c483dd17013f8",
        "type": "switch",
        "z": "e4e780b06009f68e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shutdown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "37290c01579657cd"
            ],
            [
                "2f6dce76a0c12531"
            ]
        ]
    },
    {
        "id": "37290c01579657cd",
        "type": "exec",
        "z": "e4e780b06009f68e",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 770,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2f6dce76a0c12531",
        "type": "exec",
        "z": "e4e780b06009f68e",
        "command": "sudo shutdown -h now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 800,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "3a3988a7.2a2ba8",
        "type": "http in",
        "z": "f8716dce.c0c578",
        "name": "",
        "url": "/mobile2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 118,
        "y": 343,
        "wires": [
            [
                "b854189d.bf9df"
            ]
        ]
    },
    {
        "id": "a66fea47.d45308",
        "type": "http response",
        "z": "f8716dce.c0c578",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 598,
        "y": 343,
        "wires": []
    },
    {
        "id": "b854189d.bf9df",
        "type": "function",
        "z": "f8716dce.c0c578",
        "name": "画像表示",
        "func": "msg.payload=\"Last Update : \"+global.get(\"time1\")+\"</br>\";\nmsg.payload=msg.payload+global.get(\"html_up\")+\"</br>\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 371,
        "y": 343,
        "wires": [
            [
                "a66fea47.d45308"
            ]
        ]
    },
    {
        "id": "56d6e2b6.5e48fc",
        "type": "http response",
        "z": "f8716dce.c0c578",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 674,
        "y": 219,
        "wires": []
    },
    {
        "id": "b410b859.619578",
        "type": "function",
        "z": "f8716dce.c0c578",
        "name": "画像データ生成",
        "func": "var data0=msg.payload.text;\nvar data = data0.replace(/\\s/g,'+');\n\nmsg.payload = `<img src=\"data:image/jpeg;base64,${data}\">`;\n\nglobal.set(\"html_up\",msg.payload);\n\n\nvar getCurrentTime = function () {\n    var date = new Date();\n    date.setHours(date.getHours() + 9);\n    var d = date.getFullYear() + '-';\n    d += ('0' + (date.getMonth() + 1)).slice(-2) + '-';\n    d += ('0' + date.getDate()).slice(-2) + ' ';\n    d += ('0' + date.getHours()).slice(-2) + ':';\n    d += ('0' + date.getMinutes()).slice(-2) + ':';\n    d += ('0' + date.getSeconds()).slice(-2);\n    return d;\n};\n\nmsg.payload =  {\n    \"timestamp\": getCurrentTime()\n};\n\nglobal.set(\"time1\",msg.payload.timestamp);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 339,
        "y": 218,
        "wires": [
            [
                "56d6e2b6.5e48fc"
            ]
        ]
    },
    {
        "id": "b1bd4bbb.d5e98",
        "type": "debug",
        "z": "f8716dce.c0c578",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 591,
        "y": 432,
        "wires": []
    },
    {
        "id": "a86c8dfe.8c2eb",
        "type": "http in",
        "z": "f8716dce.c0c578",
        "name": "",
        "url": "/up",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 104,
        "y": 219,
        "wires": [
            [
                "b410b859.619578"
            ]
        ]
    },
    {
        "id": "14ab8e32802cd6bf",
        "type": "exec",
        "z": "1eb77752a0f352b9",
        "command": "sudo python3 ./ble/scan.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "scan.py",
        "x": 620,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7b9cb2dbd1166081",
        "type": "inject",
        "z": "1eb77752a0f352b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f4d5820ebf70a674",
        "type": "exec",
        "z": "1eb77752a0f352b9",
        "command": "mjpg_streamer -i \"/usr/local/lib/mjpg-streamer/input_uvc.so -d /dev/video0 -r 640x360 -f 10 -q 80\" -o \"/usr/local/lib/mjpg-streamer/output_http.so -p 51890\" ",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "mjpgstreamer",
        "x": 620,
        "y": 100,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "962845484a380d0b",
        "type": "inject",
        "z": "1eb77752a0f352b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "f4d5820ebf70a674"
            ]
        ]
    },
    {
        "id": "c3095e4505cc3520",
        "type": "exec",
        "z": "1eb77752a0f352b9",
        "command": "python3 ./img_recorder/img_recorder.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 660,
        "y": 400,
        "wires": [
            [
                "bc0579a986ee64c5"
            ],
            [
                "bc0579a986ee64c5"
            ],
            [
                "bc0579a986ee64c5"
            ]
        ]
    },
    {
        "id": "917f7ec03602df27",
        "type": "inject",
        "z": "1eb77752a0f352b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "c3095e4505cc3520"
            ]
        ]
    },
    {
        "id": "bc0579a986ee64c5",
        "type": "debug",
        "z": "1eb77752a0f352b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 420,
        "wires": []
    },
    {
        "id": "fdaa301ea778afd9",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "149b6b710dac4ab1",
        "name": "センサ登録",
        "order": 1,
        "width": "27",
        "height": 27,
        "format": "\n<label>センサ種別\n<select id=\"sensor_select\" class=\"select\">\n    <option value=\"angle\">角度</option>\n    <option value=\"current\">電流</option>\n    <option value=\"power\">電力</option>\n    \n</select>\n</label>\n\n<p>\n    <label for=\"serial\">シリアル番号</label>\n    <input type=\"text\" id=\"serial\">\n</p>\n\n</br>\n<button type=\"button\" id=\"add_sensor\" class=\"button\">センサ追加</button>\n<h1>角度センサ</h1>\n<table border=\"1\" id=\"angle_sensor_setting\">\n    <thead>\n        <tr>\n            <th>シリアルNo.</th>\n            <th>センサ名</th>\n            <th>削除</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n</br>\n<h1>電流センサ</h1>\n<table border=\"1\" id=\"current_sensor_setting\">\n    <thead>\n        <tr>\n            <th>シリアルNo.</th>\n            <th>センサ名</th>\n            <th>モード</th>\n            <th>発信周期(秒)</th>\n            <th>削除</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</br>\n\n<h1>電力センサ</h1>\n<table border=\"1\" id=\"power_sensor_setting\">\n    <thead>\n        <tr>\n            <th>シリアルNo.</th>\n            <th>センサ名</th>\n            <th>電圧仕様(V)</th>\n            <th>削除</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</br>\n<div class=\"flex_a\">\n    <button type=\"button\" id=\"sensor_register\" class=\"button\">登録</button>\n    <button type=\"button\" id=\"sensor_cancel\" class=\"button\" >元に戻す</button>\n</div>\n\n<script>\n \n(function (scope) {\n    api_server = `http://${location.hostname}:8000`;\n\n\n    //登録されたセンサ情報を元に戻すボタンクリック、センサ登録画面表示時にサーバーから取得\n    request_sensor_data();\n    document.querySelector(\"#sensor_cancel\").onclick = request_sensor_data;\n    function request_sensor_data() {\n        $.get(`${api_server}/sensors/`,\n            function (data) {\n                console.log(data);\n                load_data(data);\n            });\n    }\n\n    //取得したデータを表にロードする関数\n    function load_data(data) {\n        const angle_sensor_table = document.querySelector(\"#angle_sensor_setting\");\n        const current_sensor_table = document.querySelector(\"#current_sensor_setting\");\n        const power_sensor_table = document.querySelector(\"#power_sensor_setting\");\n\n        table_initialize(\"angle_sensor_setting\");\n        table_initialize(\"current_sensor_setting\");\n        table_initialize(\"power_sensor_setting\");\n        for (let i = 0; i < data.length; ++i) {\n            let serial = data[i][1];\n            let type = data[i][2];\n            let mode = data[i][3];\n            let name = data[i][4];\n            let voltage = data[i][5];\n            let interval = data[i][6];\n\n            if (type == 0) {\n                let angle_doms = create_angle_sensor_dom([serial, name]);\n                create_table(angle_sensor_table, angle_doms);\n            }\n\n            if (type == 1) {\n                let current_doms = create_current_sensor_dom([serial, name, mode, interval]);\n                create_table(current_sensor_table, current_doms);\n            }\n\n            if (type == 2) {\n                let power_doms = create_power_sensor_dom([serial, name, voltage]);\n                create_table(power_sensor_table, power_doms);\n            }\n        }\n    }\n\n\n    //センサ追加ボタンクリックで、表にセンサを追加\n    document.querySelector(\"#add_sensor\").onclick = add_sensor;\n    function add_sensor() {\n        const angle_table = document.querySelector(\"#angle_sensor_setting\");\n        const current_table = document.querySelector(\"#current_sensor_setting\");\n        const power_table = document.querySelector(\"#power_sensor_setting\");\n\n        const type_dom = document.querySelector(\"#sensor_select\");\n        const idx = type_dom.selectedIndex;\n        const type = type_dom.options[idx].value;\n        const type_text = type_dom.options[idx].text;\n        const serial = document.querySelector(\"#serial\").value;\n        const sensor_id = `${serial}_${type}`;\n        if (serial == \"\") {\n            window.alert(\"シリアルが入力されていません\");\n        } else {\n\n            if (type_text == \"角度\") {\n                const angle_doms = create_angle_sensor_dom([serial, null, \"60\"]);\n                const angle_serials = get_sensor_serials(angle_table);\n                console.log(angle_serials);\n\n                if (angle_serials.includes(serial)) {\n                    window.alert(\"センサが既に登録されています\");\n                } else {\n                    create_table(angle_table, angle_doms);\n                }\n            }\n\n            if (type_text == \"電流\") {\n                const current_doms = create_current_sensor_dom([serial, null, \"ac\", \"60\"]);\n                const current_serials = get_sensor_serials(current_table);\n                if (current_serials.includes(serial)) {\n                    window.alert(\"センサが既に登録されています\");\n                } else {\n                    create_table(current_table, current_doms);\n                }\n\n            }\n            if (type_text == \"電力\") {\n                const power_doms = create_power_sensor_dom([serial, null, \"200\", \"60\"]);\n                const power_serials = get_sensor_serials(power_table);\n                if (power_serials.includes(serial)) {\n                    window.alert(\"センサが既に登録されています\");\n                } else {\n                    create_table(power_table, power_doms);\n                }\n            }\n        }\n\n    }\n\n    //表のセンサのシリアルナンバーを取得する関数\n    function get_sensor_serials(table) {\n        let serials = [];\n        for (let i = 1; i < table.rows.length; ++i) {\n            console.log(table.rows[i].cells[0].children[0].innerText);\n            let serial = table.rows[i].cells[0].children[0].innerText;\n            serials.push(serial);\n        }\n        return serials;\n    }\n\n\n    //角度センサのDOMを生成する関数\n    function create_angle_sensor_dom(values) {\n        let serial = values[0];\n        let name = values[1];\n\n\n        const sensor_table = document.querySelector(\"#angle_sensor_setting\");\n        const col = String(sensor_table.rows.length - 1);\n        const serial_div = div_create(`angle_serial_${col}`, serial);\n        const name_input = input_create(\"text\", `angle_name_${col}`, name, \"text_input\"); //センサー名入力欄生成\n        const delete_checkbox = input_create(\"checkbox\", `angle_delete_${col}`, null, null);\n        const doms = [serial_div, name_input, delete_checkbox];\n        return doms;\n    }\n\n    //電流センサのDOMを生成する関数\n    function create_current_sensor_dom(values) {\n        let serial = values[0];\n        let name = values[1];\n        let mode = values[2];\n        let interval = values[3];\n        const mode_options = [[0, \"交流\"], [1, \"直流\"]];\n        const interval_options = [[1, \"1\"], [10, \"10\"], [60, \"60\"], [900, \"900\"]];\n        const sensor_table = document.querySelector(\"#current_sensor_setting\");\n        const col = String(sensor_table.rows.length - 1);\n        const serial_div = div_create(`current_serial_${col}`, serial);\n        const name_input = input_create(\"text\", `current_name_${col}`, name, \"text_input\"); //センサー名入力欄生成\n        const mode_selector = pulldown_create(`current_mode_${col}`, mode, mode_options, null);//センサタイプ選択タブ生成\n        const interval_selector = pulldown_create(`current_interval_${col}`, interval, interval_options, null);//センサタイプ選択タブ生成\n        const delete_checkbox = input_create(\"checkbox\", `current_delete_${col}`, null, null);\n        const doms = [serial_div, name_input, mode_selector, interval_selector, delete_checkbox];\n        return doms\n    }\n\n     //電力センサのDOMを生成する関数\n    function create_power_sensor_dom(values) {\n        const voltage_options = [[200, \"200V\"], [400, \"400V\"]];\n        let serial = values[0];\n        let name = values[1];\n        let voltage = values[2];\n        const sensor_table = document.querySelector(\"#power_sensor_setting\");\n        const col = String(sensor_table.rows.length - 1);\n        const serial_div = div_create(`power_serial_${col}`, serial);\n        const name_input = input_create(\"text\", `power_name_${col}`, name, \"text_input\"); //センサー名入力欄生成\n        const voltage_selector = pulldown_create(`power_voltage_${col}`, voltage, voltage_options, null);//センサタイプ選択タブ生成\n        const delete_checkbox = input_create(\"checkbox\", `power_delete_${col}`, null, null);\n        const doms = [serial_div, name_input, voltage_selector, delete_checkbox];\n        return doms;\n    }\n\n\n\n    //表に行を追加する関数\n    function create_table(table, doms) {\n        //行の末尾に生成したDOMを追加\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n\n    //入力欄の定義関数\n    function input_create(type, id, value, class_name) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n        input.value = value;\n        input.className = class_name;\n        return input;\n    }\n\n    //プルダウンメニュー生成関数\n    function pulldown_create(id, pv, option_list, func) {\n        let select = document.createElement(\"select\");\n        select.id = id;\n\n        for (let i = 0; i < option_list.length; ++i) {\n            //option要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueとtextContentを設定\n            option.value = option_list[i][0];\n            option.textContent = option_list[i][1];\n            //select要素にoption要素を追加する\n            if (option.value == pv) {\n                option.selected = true;\n            }\n            //入力欄の値が更新されたときにfuncを実行\n            if (func != null) {\n                select.onchange = func;\n            }\n            select.appendChild(option);\n        }\n        return select;\n    }\n\n    //ボタンの定義関数\n    function button_create(id, text, func, table_id, cell_index) {\n        let button = document.createElement(\"button\");\n\n        button.id = id;\n        button.innerText = text;\n        button.setAttribute(\"table_id\", table_id);\n        button.setAttribute(\"cell_index\", cell_index);\n        if (func != null) {\n            button.onclick = func;\n        }\n        return button;\n    }\n\n\n\n    //divの定義関数\n    function div_create(id, text) {\n        let div_node = document.createElement(\"div\");\n\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n\n    function load_table_data() {\n        const angle_table = document.querySelector(\"#angle_sensor_setting\");\n        const current_table = document.querySelector(\"#current_sensor_setting\");\n        const power_table = document.querySelector(\"#power_sensor_setting\");\n\n        const angle_data = get_table_child_elements(angle_table);\n        const current_data = get_table_child_elements(current_table);\n        const power_data = get_table_child_elements(power_table);\n\n        const ret = { \"angle\": angle_data, \"current\": current_data, \"power\": power_data };\n        console.log(ret);\n\n        return ret;\n\n    }\n\n    //登録ボタンクリックでサーバーに表のセンサ情報を登録\n    document.querySelector(\"#sensor_register\").onclick = register_sensor_data;\n    function register_sensor_data() {\n        const table = document.querySelector(\"#sensor_setting\");\n        const send_data = JSON.stringify(load_table_data());\n        $.ajax({\n            url: `${api_server}/sensors/`,\n            type: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            dataType: 'json',\n            data: send_data,\n        }).done(function (data) {\n            console.log(data);\n            load_data(data);\n        });\n\n    }\n\n    //表のデータを配列にロードする関数\n    function get_table_child_elements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; ++i) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; ++j) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    let value = get_dom_value(dom);\n                    \n                    row_data.push(get_dom_value(dom));\n                    \n\n                }\n            }\n            \n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //DOMの値を取得する関数\n    function get_dom_value(dom) {\n        console.log(dom.tagName);\n        if (dom.tagName == \"DIV\") {\n            if (dom.innerText == \"\") {\n                return null;\n            }\n            else {\n                return dom.innerText;\n            }\n        }\n\n        if (dom.tagName == \"INPUT\" && dom.getAttribute('type') === 'checkbox') {\n            if (dom.checked) {\n                return \"1\";\n            } else {\n                return \"0\";\n            }\n\n        }\n\n        if (dom.tagName == \"SELECT\" || dom.tagName == \"INPUT\") {\n            if (dom.value == \"\") {\n                return null;\n            } else {\n                return dom.value;\n\n            }\n\n        }\n    }\n\n\n    //設定表の初期化関数\n    function table_initialize(id) {\n        let table = document.querySelector(`#${id}`);\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n\n})(scope);\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f2660f8cf32ffc92",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "86e5caf1d5296825",
        "name": "イベントログ",
        "order": 1,
        "width": "30",
        "height": "90",
        "format": "<label>\n    日付\n    <input type=\"date\" id=\"date\" name=\"date\">\n</label>\n\n<button type=\"button\" id=\"data_request\" class=\"button\">データ取得</button>\n\n<table border=\"1\" id=\"event_log\">\n    <thead>\n        <tr>\n            <th>時間</th>\n            <th>センサタイプ</th>\n            <th>シリアルNo.</th>\n            <th>センサ名</th>\n            <th>属性</th>\n            <th>イベント種別</th>\n            <th>センサ値</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n\n\n\n\n\n<script>\n\n(function (scope) {\n    //日付を日付タブにセット\n    set_date();\n\n    api_server = `http://${location.hostname}:8000`;\n    //データ取得ボタンクリックでサーバーからイベントデータを取得\n    document.querySelector(\"#data_request\").onclick = get_events;\n    function get_events() {\n        const date = document.querySelector(\"#date\").value;\n        $.get(`${api_server}/event_log?date=${date}`,\n            function (data) {\n                console.log(data);\n                const table = document.querySelector(\"#event_log\");\n                table_initialize(\"event_log\");\n                for (let i = 0; i < data.length; ++i) {\n                    doms = create_event_dom(data[i]);\n                    create_table(table, doms);\n                }\n\n            });\n    }\n\n    //イベントデータのDOMを生成する関数\n    function create_event_dom(values) {\n        const table = document.querySelector(\"#event_log\");\n        let date = values[0];\n        let sensor_type = values[1];\n        let sensor_serial = values[2];\n        let sensor_name = values[3];\n        let sensor_attribute = values[4];\n        let event_type = values[5];\n        let value = values[6];\n\n        const col = String(table.rows.length - 1);\n        const date_div = div_create(`date_${col}`, date);\n        const sensor_type_div = div_create(`sensor_type_${col}`, sensor_type);\n        const sensor_serial_div = div_create(`sensor_serial_${col}`, sensor_serial);\n        const sensor_name_div = div_create(`sensor_name_${col}`, sensor_name);\n        const sensor_attribute_div = div_create(`sensor_attribute_${col}`, sensor_attribute);\n        const event_type_div = div_create(`event_type_${col}`, event_type);\n        const value_div = div_create(`value_${col}`, value);\n\n\n\n        const doms = [date_div, sensor_type_div, sensor_serial_div, sensor_name_div, sensor_attribute_div, event_type_div, value_div];\n\n        return doms;\n    }\n\n\n    //表に行を追加する関数\n    function create_table(table, doms) {\n        //行の末尾に生成したDOMを追加\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n\n\n    //divの定義関数\n    function div_create(id, text) {\n        let div_node = document.createElement(\"div\");\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n\n    //設定表の初期化関数\n    function table_initialize(id) {\n        let table = document.querySelector(`#${id}`);\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n\n    //操作日の日付を取得し、文字列として返却する関数\n    function load_date() {\n        let today = new Date();\n        // `getDate()`は月の日(1から31)を返します\n        let day = (\"0\" + today.getDate()).slice(-2);\n        // `getMonth()`は月を返します(0から11まで)\n        let month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n        // `getFullYear()`は通年を返します\n        let year = today.getFullYear();\n        console.log(`${year}-${month}-${day}`);\n\n        return `${year}-${month}-${day}`;\n    }\n\n    //表示日の日付を日付タブにセットする関数\n    function set_date() {\n        let date = document.getElementById(\"date\");\n        date.value = load_date();\n    }\n    document.querySelector(\"#data_request\").onclick();\n\n\n})(scope);\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1140,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "caa9b61b74611de2",
        "type": "exec",
        "z": "3092101353e92f2b",
        "command": "sudo python3 /home/pi/sirc/endpoint.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "1e8d83c9bae13cdb"
            ],
            [
                "1e8d83c9bae13cdb"
            ],
            [
                "1e8d83c9bae13cdb"
            ]
        ]
    },
    {
        "id": "2999fdfff12fa50c",
        "type": "inject",
        "z": "3092101353e92f2b",
        "name": "開始トリガ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 100,
        "wires": [
            [
                "caa9b61b74611de2"
            ]
        ]
    },
    {
        "id": "1e8d83c9bae13cdb",
        "type": "debug",
        "z": "3092101353e92f2b",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 100,
        "wires": []
    },
    {
        "id": "71ca3a8421aae595",
        "type": "inject",
        "z": "3092101353e92f2b",
        "name": "開始トリガ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "x": 270,
        "y": 540,
        "wires": [
            [
                "376a73fa9ad96d7f"
            ]
        ]
    },
    {
        "id": "376a73fa9ad96d7f",
        "type": "exec",
        "z": "3092101353e92f2b",
        "command": "sudo systemctl start ble_scanner.service",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "f276d9ef3be5dd7a"
            ],
            [
                "f276d9ef3be5dd7a"
            ],
            [
                "f276d9ef3be5dd7a"
            ]
        ]
    },
    {
        "id": "f276d9ef3be5dd7a",
        "type": "debug",
        "z": "3092101353e92f2b",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 540,
        "wires": []
    },
    {
        "id": "3a67d1d6c0ac6d3d",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "1f5c443f02ccdb9b",
        "name": "ログ",
        "order": 2,
        "width": "30",
        "height": "30",
        "format": "<label>\n    開始日\n    <input type=\"date\" id=\"date_start\" name=\"date_start\">\n</label>\n\n<label>\n    終了日\n    <input type=\"date\" id=\"date_end\" name=\"date_end\">\n</label>\n\n<label for=\"sensor_type\">\n<select name=\"sensor_type\" id=\"sensor_type\"></select>\n</label>\n\n<label for=\"serial\">\n    センサー名\n<select  id=\"serial\" ></select>\n</label>\n\n<label for=\"attribute\">\n    属性\n<select  id=\"attribute\" ></select>\n</label>\n\n<button type=\"button\" id=\"data_request\" class=\"button\">データ取得</button>\n\n<div id=\"plot\" style=\"height: 700px\"></div>\n\n<md-button download=\"{{data_name}}.csv\" ng-init=\"href = '#';\" ng-href=\"{{href}}\" style=\"height: 48px; line-height: 36px;\">ダウンロード</md-button>\n<script>\n\n(function (scope) {\n\n    set_date();//今日の日付を開始日と終了日の日付タブにセット\n    api_server = `http://${location.hostname}:8000`;\n    sensor_types = { \"0\": \"角度\", \"1\": \"電流\", \"2\": \"電力\" };\n\n    const attribute_name = {\n        \"0\": \"角度\",\n        \"1\": \"スケーリング値\",\n        \"2\": \"電池残量\",\n        \"3\": \"電流\",\n        \"4\": \"積算電力\",\n        \"5\": \"皮相電力\",\n        \"6\": \"有効電力\",\n        \"7\": \"力率\",\n        \"8\": \"エラーコード\"\n\n    };\n\n    //登録されているセンサのタイプをサーバーから取得しセレクトタブに角度、電流、電力をセット\n    $.get(`${api_server}/sensor_types/`,\n        function (data) {\n            console.log(data);\n            add_type_options(data, \"sensor_type\");\n            document.querySelector(\"#sensor_type\").onchange();\n        });\n\n\n    //センサタイプ用セレクトタブの生成関数\n    function add_type_options(options, id) {\n        document.querySelector(`#${id}`).innerHTML = \"\";\n        let selector = document.querySelector(`#${id}`);\n\n        for (let i = 0; i < options.length; ++i) {\n            //option要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = options[i][0];//データID\n            option.textContent = sensor_types[String(options[i][0])];//データ名\n            //select要素にoption要素を追加する\n            selector.appendChild(option);\n        }\n    }\n\n    //選択されているセンサタイプのシリアルナンバーをサーバーから取得し、セレクトタブ（センサー名)にセット\n    document.querySelector(\"#sensor_type\").onchange = get_serials;\n    function get_serials() {\n        const sensor_type = Number(document.querySelector(\"#sensor_type\").value);\n        $.get(`${api_server}/sensor_serials?sensor_type=${sensor_type}`,\n            function (data) {\n                console.log(data);\n                add_serial_options(data, \"serial\");\n                document.querySelector(\"#serial\").onchange();\n            });\n\n    }\n\n    //センサ名用セレクトタブの生成関数\n    function add_serial_options(options, id) {\n        document.querySelector(`#${id}`).innerHTML = \"\";\n        let selector = document.querySelector(`#${id}`);\n\n        for (let i = 0; i < options.length; ++i) {\n            //option要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = options[i][0];//データID\n            option.textContent = options[i][1];//データ名\n            //select要素にoption要素を追加する\n            selector.appendChild(option);\n        }\n    }\n\n    //選択されているシリアルナンバーのセンサの属性をサーバーから取得し、セレクトタブ（属性)にセット\n    document.querySelector(\"#serial\").onchange = get_attributes;\n    function get_attributes() {\n        const sensor_type = document.querySelector(\"#sensor_type\").value;\n        const sensor_serial = document.querySelector(\"#serial\").value;\n        $.get(`${api_server}/sensor_attributes?sensor_type=${sensor_type}&sensor_serial=${sensor_serial}`,\n            function (data) {\n                console.log(data);\n                add_attribute_options(data, \"attribute\");\n            });\n\n    }\n\n    //属性用セレクトタブの生成関数\n    function add_attribute_options(options, id) {\n        document.querySelector(`#${id}`).innerHTML = \"\";\n        let selector = document.querySelector(`#${id}`);\n\n        for (let i = 0; i < options.length; ++i) {\n            //option要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueと表示名を設定\n            option.value = options[i][0];//データID\n            option.textContent = attribute_name[String(options[i][0])];//データ名\n            //select要素にoption要素を追加する\n            selector.appendChild(option);\n        }\n    }\n\n\n    //開始日、終了日、センサタイプ、センサー名、属性を選択した状態で、データ取得ボタンクリックでサーバーからログデータ取得＋描画\n    document.querySelector(\"#data_request\").onclick = get_data;\n    function get_data() {\n        const start = document.getElementById(\"date_start\").value;\n        const stop = document.getElementById(\"date_end\").value;\n        const sensor_type = document.getElementById(\"sensor_type\").value;\n        const sensor_serial = document.getElementById(\"serial\").value;\n        const sensor_attribute = document.getElementById(\"attribute\").value;\n        const name = attribute_name[sensor_attribute];\n\n        //すべてのセレクトタブが選択されていなかったら、これより下処理は実行しない\n        if (sensor_type == null || serial == null || attribute == null || start == null || stop == null) {\n            return;\n        }\n        scope.href = '#';\n\n        //データをサーバーに要求し、グラフを描く\n        $.get(`${api_server}/value_log?sensor_type=${sensor_type}&sensor_serial=${sensor_serial}&sensor_attribute=${sensor_attribute}&start=${start}&stop=${stop}`)\n            .done(function (data) {\n                console.log(data);\n                update(data, start, stop, name);//グラフ描画\n\n            })\n            //データ取得失敗なら\n            .fail(function (err) {\n                update();//グラフ初期化\n            });\n    }\n\n\n    // 画面を更新する\n    function update(arr, start, end, name) {\n        if (arr && arr.length !== 0) {\n            href(arr, name);\n            plot(arr, start, end, name);\n        } else {\n            scope.href = '#';\n            Plotly.purge('plot');\n        }\n    }\n\n    // グラフを描画する\n    function plot(arr, start, end, name) {\n        const ticks = arr[0];\n        const values = arr[1];\n        const data = [];\n        console.log(arr);\n        console.log(ticks);\n\n        if (values.length !== 0) {\n            data.push({\n                x: ticks,\n                y: values,\n                name: name,\n                mode: 'lines',\n                type: 'scattergl',\n                line: {\n                    width: 2\n                }\n            });\n        }\n\n        const layout = {\n            title: `${start.replace(/-/g, '/')}-${end.replace(/-/g, '/')}`,\n            xaxis: {\n                title: '時間',\n            },\n            yaxis: {\n                title: name,\n            },\n        };\n        console.log(data);\n        Plotly.newPlot('plot', data, layout);\n    }\n\n    // ダウンロードリンクを更新する\n    function href(arr, name) {\n        let csv = [];\n        for (let i = 0; i < arr[0].length; ++i) {\n            let time = arr[0][i].slice(0, -4);\n            let data = arr[1][i];\n            let element = `${time},${data}\\n`;\n            csv.push(element);\n\n        }\n        // const csv = [header].concat(arr.map(d => moment(d.time).format('YYYY-MM-DD HH:mm:ss') + ',' + chs.map(ch => d[ch]).join(',') + '\\n'));\n        const blob = new Blob(csv, { type: 'text/csv' });\n        scope.href = URL.createObjectURL(blob);\n        scope.data_name = name;\n    }\n\n    //今日の日付を生成する関数\n    function load_date() {\n        let today = new Date();\n        // `getDate()`は月の日(1から31)を返します\n        let day = (\"0\" + today.getDate()).slice(-2);\n        // `getMonth()`は月を返します(0から11まで)\n        let month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n        // `getFullYear()`は通年を返します\n        let year = today.getFullYear();\n        console.log(`${year}-${month}-${day}`);\n\n        return `${year}-${month}-${day}`;\n    }\n\n    //今日の日付を開始日と終了日タブにセットする関数\n    function set_date() {\n        let date_start = document.getElementById(\"date_start\");\n        let date_end = document.getElementById(\"date_end\");\n\n        date_start.value = load_date();\n        date_end.value = load_date();\n    }\n})(scope);\n    \n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "752d77d012e5e397",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "97334318.8857c",
        "name": "ダッシュボード",
        "order": 2,
        "width": "40",
        "height": "102",
        "format": "<div class=\"a_body\">\n<div class=\"a_wrapper\" id=\"a_wrapper\"></div>\n</div>\n\n<script>\n\n\n(function (scope) {\n    api_server = `http://${location.hostname}:8000`;\n    websocket_server = `ws://${location.hostname}:8765`;\n\n    function connect() {\n        const socket = new WebSocket(websocket_server);\n\n        socket.onmessage = function (event) {\n            console.log(JSON.parse(event.data));\n            const all_data = JSON.parse(event.data);\n            const timestamp = all_data[1];\n            const all_sensor_data = all_data[0];\n            for (let i = 0; i < all_sensor_data.length; ++i) {\n                let sensor_data = all_sensor_data[i];\n                let sensor_id = sensor_data[0];\n                let timestamp_div = document.getElementById(`${sensor_id}_timestamp`);\n                if (timestamp_div != null) {\n                    timestamp_div.innerText = timestamp;\n                }\n\n                let attributes = sensor_data[1];\n                for (let j = 0; j < attributes.length; ++j) {\n                    let value = attributes[j][0];\n                    let attribute_id = attributes[j][1];\n                    let status = attributes[j][2];\n\n                    let element = document.getElementById(attribute_id);\n                    if (element != null) {\n                        if (value == null) {\n                            element.innerText = \"--\";\n                        } else {\n                            element.innerText = value;\n                        }\n                        if (status == 2) {\n                            element.style.color = \"red\";\n                        }\n                        if (status == 1 || status == 4) {\n                            element.style.color = \"#FFCC00\";\n                        }\n                    }\n                }\n            }\n        };\n\n        socket.onclose = (event) => {\n            console.log('Socket is closed. 3秒後に再接続します。', event.reason);\n            setTimeout(() => {\n                connect();\n            }, 3000);\n        };\n\n        socket.onerror = (event) => {\n            console.error(event.message);\n            socket.close();\n        };\n\n\n\n    }\n    connect();\n\n    //タイムスタンプとセンサの状態（検知、未検知）をダッシュボードに反映する関数\n    function display_sensor_status(values) {\n        for (let i = 0; i < values.length; ++i) {\n            let sensor_id = values[i][0];\n            let sensor_status = values[i][1];\n            let timestamp = values[i][2];\n            let timestamp_div = document.getElementById(`${sensor_id}_timestamp`);\n            if (timestamp_div != null) {\n                timestamp_div.innerText = timestamp;\n            }\n            console.log(sensor_status);\n            let element = document.getElementById(`${sensor_id}_border`);\n            if (element != null) {\n                if (sensor_status == 0) {\n                    element.style.borderColor = \"silver\";\n                }\n                if (sensor_status == 4) {\n                    element.style.borderColor = \"#FFCC00\";\n                }\n\n                if (sensor_status == 5) {\n                    element.style.borderColor = \"#0094CE\";\n                }\n            }\n        }\n    }\n\n    //属性の値と状態（正常、異常、警報）をダッシュボードに反映する関数\n    function display_sensor_values(values) {\n        for (let i = 0; i < values.length; ++i) {\n            let attribute_id = values[i][0];\n            let attribute_value = values[i][1];\n            let attribute_status = values[i][2];\n\n            let element = document.getElementById(attribute_id);\n            if (element != null) {\n                if (attribute_value == null) {\n                    element.innerText = \"--\";\n                } else {\n                    element.innerText = attribute_value;\n                }\n                if (attribute_status == 2) {\n                    element.style.color = \"red\";\n                }\n                if (attribute_status == 1 || attribute_status == 4) {\n                    element.style.color = \"#FFCC00\";\n                }\n            }\n        }\n    }\n\n    //ダッシュボードに表示するボックスの設定をサーバーからロードする関数\n    $.get(`${api_server}/dashboard_setting/`,\n        function (data) {\n            console.log(data);\n            const sensor_settings = data[0];\n            const attribute_settings = data[1];\n            create_sensor_box(\"a_wrapper\", sensor_settings);\n            add_attributes(attribute_settings);\n        });\n\n    //サーバーからロードしたセンサの設定からセンサの表示ボックスを生成する関数\n    function create_sensor_box(parent_id, settings) {\n        initialize(\"a_wrapper\");\n        let element = document.getElementById(parent_id);\n        for (let i = 0; i < settings.length; ++i) {\n            let sensor_id = settings[i][0];\n            let sensor_name = settings[i][1];\n            let child = document.createElement(\"div\");\n            child.className = \"item\";\n            child.id = `${sensor_id}_border`;\n            child.innerHTML = ` \n                            <div id=${sensor_id} class=\"sensor-name\">${sensor_name} </div>\n                            <div class=\"timestamp\">更新時刻:&nbsp;<span id=${sensor_id}_timestamp class=\"sensor-timestamp\">--</span></div>\n                            `;\n            element.appendChild(child);\n        }\n    }\n\n    //DOMの要素を初期化する関数\n    function initialize(id) {\n        let element = document.getElementById(id);\n        element.innerHTML = \"\";\n    }\n\n    //センサ表示窓に属性を追加する関数\n    function add_attributes(attribute_settings) {\n        for (let i = 0; i < attribute_settings.length; ++i) {\n            let attribute_id = attribute_settings[i][0];\n            let sensor_id = attribute_settings[i][1];\n            let attribute_name = attribute_settings[i][3];\n            let attribute_unit = attribute_settings[i][9]\n            let element = document.getElementById(sensor_id);\n            let child = document.createElement(\"div\");\n            child.innerHTML = ` \n                            <p class=\"data-name\">${attribute_name}:&nbsp;\n                                <span class=\"data-value\" id=${attribute_id} >--</span><span class=\"data-unit\">&nbsp;${attribute_unit}</span>\n                            </p>\n                           `;\n            element.appendChild(child);\n        }\n    }\n})(scope);\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fe11e6957bddd551",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "",
        "name": "ヘッダー部",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"/css/epoch.css\">\n<style type=\"text/css\">\n    \n    .masonry-container {\n        width: 1400px;\n    }\n\n    .nr-dashboard-theme .nr-dashboard-textinput input {\n        border-color: #006fff;\n        border-bottom-width: 1px;\n        height: 38px;\n        font-size: 14px;\n        padding-top: 10px;  \n    }\n    \n    md-toast {\n        border: none !important;\n    }\n    \n    .data-value {\n       // vertical-align: bottom;\n        //top: 10px;\n        font-size: 30px;\n    }\n    \n    .data-unit{\n        font-size: 15px;\n        vertical-align: bottom; \n    }\n    \n    .data-name{\n        font-size : 20px;\n    }\n\n    .sensor-name{\n    font-size : 30px;\n    }\n    \n   /* .a_wrapper {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        gap: 10px;\n        grid-auto-rows: 100px;\n        margin: 10px;\n        //line-height: 60px;\n        text-align: center;\n    }*/\n    .a_wrapper {\n        display: flex;\n        width:100%;\n        flex-wrap: wrap;\n        line-height:30px;\n        text-align:center;\n    }\n\n    \n    .button{\n        width: 250px;\n        padding: 5px;\n        /*box-sizing: border-box;\n        border: 1px solid #68779a;\n        cursor: pointer;*/\n    }\n  \n  \n    .item{\n        margin:10px;\n        width:300px;\n        height:330px;\n        border: solid;\n        border-color:#0099FF;\n        /*コレ*/position: relative;\n    }\n\n    .flex_a{\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: flex-start;\n        width: 1300px;\n        height: 100px;\n        justify-content: center;\n    }\n\n    .flexc{\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: flex-start;\n        width: 1425px;\n        height: 100px;\n        justify-content: center;  \n    }\n    \n    .a_body{\n       // background-color: #f5f5f5;\n    }\n    \n    td {\n        text-align:center;        /* 文字の揃え位置指定 */\n    }\n\n    .text_input{\n        width:10em;\n    }\n\n    .address_input{\n        width:20em;\n    }\n    .number_input{\n        width:5em;\n    }\n\n    .select {\n    width: 200px;\n    }\n\n    .timestamp{\n        font-size : 15px;\n        text-align:center;\n        /*コレ*/position: absolute;\n        /*コレ*/bottom: 2px;\n        left:5px;\n    }\n\n    .day-select {\n    width: 50px;\n    }\n\n</style>\n<script type=\"text/javascript\" src=\"/js/epoch.js\"></script>\n<script type=\"text/javascript\" src=\"/js/plotly.min.js\"></script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1550,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5a035b8491bacd88",
        "type": "exec",
        "z": "3092101353e92f2b",
        "command": "sudo systemctl stop ble_scanner.service",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 580,
        "y": 620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c294abaa63ee724d",
        "type": "inject",
        "z": "3092101353e92f2b",
        "name": "終了トリガ",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "5a035b8491bacd88"
            ]
        ]
    },
    {
        "id": "69a014b299583746",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "12866929233d4104",
        "name": "取説",
        "order": 1,
        "width": "30",
        "height": "90",
        "format": "<iframe src=\"/files/manual.pdf#page=1&scrollbar=0&view=Fit&viewrect=0,0,570,0\" width=\"100%\"\n    height=\"100%\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\" style=\"border:none;\"></iframe>\n\n\n<script>\n\n(function (scope){\n\n   \n})(scope);\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1510,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e9ebb644a7aa2df2",
        "type": "ui_template",
        "z": "3092101353e92f2b",
        "group": "8210375b8a28cb48",
        "name": "角度センサスケーリング設定",
        "order": 1,
        "width": "30",
        "height": "90",
        "format": "<table border=\"1\" id=\"angle_sensor_setting\">\n    <thead>\n        <tr>\n            <th>シリアルNo.</th>\n            <th>センサ名</th>\n            <th>単位</th>\n            <th>小数点以下桁数</th>\n            <th>角度1</th>\n            <th>スケーリング値1</th>\n            <th>角度2</th>\n            <th>スケーリング値2</th>\n        </tr>\n    </thead>\n    <tbody>\n    </tbody>\n</table>\n</br>\n\n\n<div class=\"flexc\">\n    <button type=\"button\" id=\"register\" class=\"button\">登録</button>\n    <button type=\"button\" id=\"cancel\" class=\"button\" >元に戻す</button>\n</div>\n\n\n\n<script>\n(function (scope) {\n    api_server = `http://${location.hostname}:8000`;\n    //角度センサ登録画面と元に戻すボタンクリックで、サーバーからデータを取得\n    request_angle_data();\n\n    document.querySelector(\"#cancel\").onclick = request_angle_data;\n    function request_angle_data() {\n        $.get(`${api_server}/angle_scaling_settings`,\n            function (data) {\n                console.log(data);\n                load_data(data);\n            });\n\n    }\n\n    //データを表に格納する関数\n    function load_data(data) {\n\n        const angle_sensor_table = document.querySelector(\"#angle_sensor_setting\");\n\n\n        table_initialize(\"angle_sensor_setting\");\n\n       \n\n        for (let i = 0; i < data.length; ++i) {\n            let serial = data[i][0];\n            let name = data[i][1];\n            let unit = data[i][2];\n            let decimal_point = data[i][3];\n            let angle_1 = data[i][4];\n            let value_1 = data[i][5];\n            let angle_2 = data[i][6];\n            let value_2 = data[i][7];\n\n            let doms = create_angle_setting_dom([serial, name, unit, decimal_point, angle_1, value_1, angle_2, value_2]);\n            create_table(angle_sensor_table, doms);\n        }\n    }\n\n\n\n    //スケーリング設定のDOMを生成する関数\n    function create_angle_setting_dom(values) {\n        const angle_setting_table = document.querySelector(\"#angle_sensor_setting\");\n        let options = [[\"0\", \"0\"], [\"1\", \"1\"], [\"2\", \"2\"], [\"3\", \"3\"], [\"4\", \"4\"], [\"5\", \"5\"]]\n        let serial = values[0];\n        let name = values[1];\n        let unit = values[2];\n        let decimal_point = values[3];\n        let angle_1 = values[4];\n        let value_1 = values[5];\n        let angle_2 = values[6];\n        let value_2 = values[7];\n\n        const col = String(angle_setting_table.rows.length - 1);\n        const serial_div = div_create(`serail_${col}`, serial);\n        const sensor_name_div = div_create(`sensor_name_${col}`, name);\n\n        const unit_input = input_create(\"text\", `unit_${col}`, unit, \"text_input\");\n        const decimal_input = pulldown_create(`decimal_${col}`, decimal_point, options, null);\n        const angle_1_input = input_create(\"number\", `angle_1_${col}`, angle_1, \"number_input\");\n        const value_1_input = input_create(\"number\", `value_1_${col}`, value_1, \"number_input\");\n        const angle_2_input = input_create(\"number\", `angle_2_${col}`, angle_2, \"number_input\");\n        const value_2_input = input_create(\"number\", `value_2_${col}`, value_2, \"number_input\");\n\n        const doms = [serial_div, sensor_name_div, unit_input, decimal_input, angle_1_input, value_1_input, angle_2_input, value_2_input];\n\n        return doms;\n    }\n\n\n\n\n    //表に行を追加する関数\n    function create_table(table, doms) {\n        //行の末尾に生成したDOMを追加\n        let new_row = table.insertRow(-1);\n        for (let i = 0; i < doms.length; ++i) {\n            let new_cell = null;\n            new_cell = new_row.insertCell(i);\n            new_cell.appendChild(doms[i]);\n        }\n    }\n\n    //入力欄の定義関数\n    function input_create(type, id, value, class_name) {\n        let input = document.createElement('input');\n        input.type = type;\n        input.id = id;\n        input.value = value;\n        input.className = class_name;\n        // input要素のフォーカスが外れた時のイベントを登録します\n\n        return input;\n    }\n\n    //プルダウンメニュー生成関数\n    function pulldown_create(id, pv, option_list, func) {\n        let select = document.createElement(\"select\");\n        select.id = id;\n\n        for (let i = 0; i < option_list.length; ++i) {\n            //option要素を新しく作る\n            let option = document.createElement('option');\n            //option要素にvalueとtextContentを設定\n            option.value = option_list[i][0];\n            option.textContent = option_list[i][1];\n            //select要素にoption要素を追加する\n            if (option.value == pv) {\n                option.selected = true;\n            }\n            //入力欄の値が更新されたときにfuncを実行\n            if (func != null) {\n                select.onchange = func;\n            }\n            select.appendChild(option);\n        }\n        return select;\n    }\n\n\n    //divの定義関数\n    function div_create(id, text) {\n        let div_node = document.createElement(\"div\");\n\n        div_node.id = id;\n        div_node.innerText = text;\n        return div_node;\n    }\n\n\n    //登録ボタンクリックで表のデータをサーバーに登録\n    document.querySelector(\"#register\").onclick = register_sensor_data;\n    function register_sensor_data() {\n        const table = document.querySelector(\"#angle_sensor_setting\");\n        if (check_input_data(table)) {\n            const send_data = JSON.stringify(load_table_data());\n\n            console.log(send_data);\n            $.ajax({\n                url: `${api_server}/angle_scaling_settings`,\n                type: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                dataType: 'json',\n                data: send_data,\n            }).done(function (data) {\n         \n                load_data(data);\n\n\n            });\n        }\n    }\n\n    //表のデータを配列にロードする関数\n    function load_table_data() {\n        const angle_table = document.querySelector(\"#angle_sensor_setting\");\n        const angle_data = get_table_child_elements(angle_table);\n        const ret = angle_data;\n        console.log(ret);\n\n        return ret;\n\n    }\n\n\n    //表のデータを配列にロードする関数\n    function get_table_child_elements(table) {\n        let elements = [];\n        for (let i = 1; i < table.rows.length; ++i) {\n            let row_data = [];\n            for (let j = 0; j < table.rows[i].cells.length; ++j) {\n                let dom = table.rows[i].cells[j].children[0];\n                if (dom != undefined) {\n                    let value = get_dom_value(dom);\n                    //if (value!=null){\n                    row_data.push(get_dom_value(dom));\n                    // }\n                }\n            }\n            // row_data[0]=`${row_data[2]}_${row_data[1]}`;\n            elements.push(row_data);\n        }\n        return elements;\n    }\n\n    //DOMの値を取得する関数\n    function get_dom_value(dom) {\n        console.log(dom.tagName);\n        if (dom.tagName == \"DIV\") {\n            if (dom.innerText == \"\") {\n                return null;\n            }\n            else {\n                return dom.innerText;\n            }\n        }\n\n        if (dom.tagName == \"INPUT\" && dom.getAttribute('type') === 'checkbox') {\n            if (dom.checked) {\n                return \"1\";\n            } else {\n                return \"0\";\n            }\n\n        }\n\n        if (dom.tagName == \"SELECT\" || dom.tagName == \"INPUT\") {\n            if (dom.value == \"\") {\n                return null\n            } else {\n                return dom.value;\n\n            }\n\n        }\n    }\n\n\n\n    //設定表の初期化関数\n    function table_initialize(id) {\n        let table = document.querySelector(`#${id}`);\n        const table_length = table.rows.length - 1;\n        for (let i = 0; i < table_length; ++i) { // tbody要素にある最後の行（tr要素）を削除 \n            table.deleteRow(-1);\n        }\n    }\n\n    //表に入力されたデータをチェックする関数\n    function check_input_data(table) {\n        let flag = true;\n        for (let i = 0; i < table.rows.length - 1; ++i) {\n            let angle_1_dom = document.querySelector(`#angle_1_${i}`);\n            let angle_2_dom = document.querySelector(`#angle_2_${i}`);\n            let value_1_dom = document.querySelector(`#value_1_${i}`);\n            let value_2_dom = document.querySelector(`#value_2_${i}`);\n\n            let angle_1 = angle_1_dom.value;\n            let angle_2 = angle_2_dom.value;\n            let value_1 = value_1_dom.value;\n            let value_2 = value_2_dom.value;\n\n            angle_1_dom.style.backgroundColor = \"#FFFFFF\";\n            angle_2_dom.style.backgroundColor = \"#FFFFFF\";\n            value_1_dom.style.backgroundColor = \"#FFFFFF\";\n            value_2_dom.style.backgroundColor = \"#FFFFFF\";\n\n            if (angle_1 == \"\" || angle_2 == \"\" || value_1 == \"\" || value_2 == \"\") {\n                if (angle_1 == \"\") {\n                    angle_1_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                }\n\n                if (angle_2 == \"\") {\n                    angle_2_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                }\n\n                if (value_1 == \"\") {\n                    value_1_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                }\n\n                if (value_2 == \"\") {\n                    value_2_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                }\n\n\n                flag = false;\n\n\n\n            }\n\n            if (Number(angle_1) >= Number(angle_2) || Number(value_1) >= Number(value_2)) {\n                angle_1_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                angle_2_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                value_1_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n                value_2_dom.style.backgroundColor = \"#FFCCFF\"; // 赤色の背景色に変更\n\n\n\n            }\n            flag = false;\n\n        }\n        if (flag == false) {\n            window.alert(\"設定が適切でありません\");\n        }\n        return flag;\n    }\n\n\n\n})(scope);\n\n\n\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "99cb13115838e5a3",
        "type": "exec",
        "z": "3092101353e92f2b",
        "command": "sudo python3 /home/pi/sirc/db_schema.py",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 600,
        "y": 320,
        "wires": [
            [
                "040fc645929d0fa3"
            ],
            [
                "040fc645929d0fa3"
            ],
            [
                "040fc645929d0fa3"
            ]
        ]
    },
    {
        "id": "32bdb9b9ee9efeaf",
        "type": "inject",
        "z": "3092101353e92f2b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "99cb13115838e5a3"
            ]
        ]
    },
    {
        "id": "040fc645929d0fa3",
        "type": "debug",
        "z": "3092101353e92f2b",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 320,
        "wires": []
    },
    {
        "id": "c502c6538a2340b0",
        "type": "inject",
        "z": "3092101353e92f2b",
        "name": "終了トリガ(endpoint.py)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "endpoint",
        "payloadType": "str",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "d1fa22da11803e32"
            ]
        ]
    },
    {
        "id": "d1fa22da11803e32",
        "type": "subflow:867a438d9455ee92",
        "z": "3092101353e92f2b",
        "name": "",
        "x": 590,
        "y": 160,
        "wires": [
            [],
            [],
            []
        ]
    }
]